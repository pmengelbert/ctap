!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
A	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/skip.rs	/^impl<A: Seek> Skip for A {$/;"	c
A	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<'de, 'a, A> MapAccess<'de> for &'a mut A$/;"	c
A	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<'de, 'a, A> SeqAccess<'de> for &'a mut A$/;"	c
AES_128_GCM	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^pub static AES_128_GCM: aead::Algorithm = aead::Algorithm {$/;"	v
AES_128_GCM	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    AES_128_GCM,$/;"	e	enum:AlgorithmID
AES_256_GCM	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^pub static AES_256_GCM: aead::Algorithm = aead::Algorithm {$/;"	v
AES_256_GCM	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    AES_256_GCM,$/;"	e	enum:AlgorithmID
AES_KEY	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^    pub struct AES_KEY {$/;"	s	module:tests
ALL_ALGORITHMS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub static ALL_ALGORITHMS: [&digest::Algorithm; 5] = [$/;"	v	module:test_util
Adjacent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    Adjacent { tag: String, content: String },$/;"	e	enum:TagType
AeadDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadDecryptor {$/;"	i
AeadEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadEncryptor {$/;"	i
Aes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Aes,$/;"	e	enum:SymmetricCipherSpec
AesBitValueOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesBitValueOps: BitXor<Output = Self> + BitAnd<Output = Self> + Not<Output = Self> + Defau/;"	i
AesGcm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadDecryptor for AesGcm<'static> {$/;"	c
AesGcm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadEncryptor for AesGcm<'static> {$/;"	c
AesGcm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AesGcm<'a> {$/;"	c
AesGcm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^pub struct AesGcm<'a> {$/;"	s
AesNiDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiDecryptor {$/;"	c
AesNiDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockDecryptor for AesNiDecryptor {$/;"	c
AesNiDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiDecryptor { fn clone(&self) -> AesNiDecryptor { *self } }$/;"	c
AesNiDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiDecryptor {$/;"	s
AesNiEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiEncryptor {$/;"	c
AesNiEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockEncryptor for AesNiEncryptor {$/;"	c
AesNiEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiEncryptor { fn clone(&self) -> AesNiEncryptor { *self } }$/;"	c
AesNiEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiEncryptor {$/;"	s
AesOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesOps {$/;"	i
Affine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^        Affine(Elem<R>, Elem<R>),$/;"	e	enum:tests::TestPoint
AffinePoint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    struct AffinePoint {$/;"	s	module:tests
AgreementAlgorithmImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^impl Eq for AgreementAlgorithmImpl {}$/;"	c
AgreementAlgorithmImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^impl PartialEq for AgreementAlgorithmImpl {$/;"	c
AgreementAlgorithmImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^pub struct AgreementAlgorithmImpl {$/;"	s
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^impl Algorithm {$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^impl private::Sealed for Algorithm {}$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^impl signature::SigningAlgorithm for Algorithm {$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^impl private::Sealed for Algorithm {}$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^impl signature::VerificationAlgorithm for Algorithm {$/;"	c
Algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^pub struct Algorithm {$/;"	s
AlgorithmID	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^enum AlgorithmID {$/;"	g
AlgorithmID	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^enum AlgorithmID {$/;"	g
AlgorithmID	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^enum AlgorithmID {$/;"	g
AlgorithmID	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^enum AlgorithmID {$/;"	g
All	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    All,$/;"	e	enum:Trim
AllWeightsZero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    AllWeightsZero,$/;"	e	enum:WeightedError
AllowZero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub enum AllowZero {$/;"	g
Alphanumeric	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^impl Distribution<char> for Alphanumeric {$/;"	c
Alphanumeric	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^pub struct Alphanumeric;$/;"	s
AlreadyPadded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    AlreadyPadded = 0,$/;"	e	enum:Pad
Always	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    Always,$/;"	e	enum:QuoteStyle
Any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    Any(u8),$/;"	e	enum:Terminator
ArcWeak	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for ArcWeak<T>$/;"	c
ArcWeak	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for ArcWeak<T>$/;"	c
Arguments	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<'a> Serialize for fmt::Arguments<'a> {$/;"	c
Array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Array,$/;"	e	enum:Type
Array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Array(Vec<Value>),$/;"	e	enum:Value
ArrayInPlaceVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct ArrayInPlaceVisitor<'a, A: 'a>(&'a mut A);$/;"	s
ArrayVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for ArrayVisitor<[T; 0]> {$/;"	c
ArrayVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<A> ArrayVisitor<A> {$/;"	c
ArrayVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct ArrayVisitor<A> {$/;"	s
AsByteSliceMut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub trait AsByteSliceMut {$/;"	i
AsFail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/as_fail.rs	/^pub trait AsFail {$/;"	i
AsPrimitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^pub trait AsPrimitive<T>: 'static + Copy$/;"	i
AttestedCredentialData	/home/pme/src/rust/ctap/src/cbor.rs	/^impl AttestedCredentialData {$/;"	c
AttestedCredentialData	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct AttestedCredentialData {$/;"	s
Attr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl<'c, T> Attr<'c, T> {$/;"	c
Attr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^struct Attr<'c, T> {$/;"	s
AuthenticatorData	/home/pme/src/rust/ctap/src/cbor.rs	/^impl AuthenticatorData {$/;"	c
AuthenticatorData	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct AuthenticatorData {$/;"	s
AuthenticatorOptions	/home/pme/src/rust/ctap/src/cbor.rs	/^impl AuthenticatorOptions {$/;"	c
AuthenticatorOptions	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct AuthenticatorOptions {$/;"	s
B	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    impl<A, B> Pair for (A, B) {$/;"	c	module:private
BAD_NONNEGATIVE_INTEGERS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    static BAD_NONNEGATIVE_INTEGERS: &'static [&'static [u8]] = &[$/;"	v	module:tests
BE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub type BE = BigEndian;$/;"	t
BI	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static BI: [GePrecomp; 8] = [$/;"	v
BROADCAST_CID	/home/pme/src/rust/ctap/src/lib.rs	/^static BROADCAST_CID: [u8; 4] = [0xff, 0xff, 0xff, 0xff];$/;"	v
BTreeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, K, V, E> IntoDeserializer<'de, E> for BTreeMap<K, V>$/;"	c
BTreeSet	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for BTreeSet<T>$/;"	c
Bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            Bar,$/;"	e	enum:tests::enum_label_simple_tagged::Label
Bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Bar {};$/;"	s	function:tests::with_header_empty_ok
Bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            Bar(f32),$/;"	e	enum:tests::enum_newtypes::Wat
Bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            Bar,$/;"	e	enum:tests::enum_units::Wat
Bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Bar {$/;"	s	function:tests::struct_headers_inside_nested_tuple_seq
Bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Bar {$/;"	s	function:tests::struct_headers_inside_tuple
Base64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Base64,$/;"	e	enum:Tag
Base64Url	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Base64Url,$/;"	e	enum:Tag
Baz	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            Baz,$/;"	e	enum:tests::enum_label_simple_tagged::Label
Baz	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            Baz(bool),$/;"	e	enum:tests::enum_newtypes::Wat
Baz	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            Baz,$/;"	e	enum:tests::enum_units::Wat
Baz	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Baz(bool);$/;"	s	function:tests::struct_headers_inside_nested_tuple_seq
Bcrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Bcrypt,$/;"	e	enum:KdfSpec
Bernoulli	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^impl Bernoulli {$/;"	c
Bernoulli	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^impl Distribution<bool> for Bernoulli {$/;"	c
Bernoulli	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^pub struct Bernoulli {$/;"	s
Beta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Beta {$/;"	c
Beta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Distribution<f64> for Beta {$/;"	c
Beta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^pub struct Beta {$/;"	s
BigEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    impl Sealed for super::BigEndian {}$/;"	c	module:private
BigEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^impl ByteOrder for BigEndian {$/;"	c
BigEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^impl Default for BigEndian {$/;"	c
BigEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub enum BigEndian {}$/;"	g
Bigfloat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Bigfloat,$/;"	e	enum:Tag
Bignum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Bignum,$/;"	e	enum:Tag
Binomial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^impl Binomial {$/;"	c
Binomial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^impl Distribution<u64> for Binomial {$/;"	c
Binomial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^pub struct Binomial {$/;"	s
BitLength	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^impl BitLength {$/;"	c
BitLength	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^pub struct BitLength(pub usize);$/;"	s
BitString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    BitString = 0x03,$/;"	e	enum:Tag
Bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    type Bits;$/;"	t	interface:Float
Blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Blake2b,$/;"	e	enum:DigestSpec
Blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Blake2b {$/;"	c
Blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Clone for Blake2b { fn clone(&self) -> Blake2b { *self } }$/;"	c
Blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Digest for Blake2b {$/;"	c
Blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Mac for Blake2b {$/;"	c
Blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^pub struct Blake2b {$/;"	s
Blake2bParam	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^struct Blake2bParam {$/;"	s
Blake2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Blake2s {$/;"	c
Blake2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Clone for Blake2s { fn clone(&self) -> Blake2s { *self } }$/;"	c
Blake2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Digest for Blake2s {$/;"	c
Blake2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Mac for Blake2s {$/;"	c
Blake2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^pub struct Blake2s {$/;"	s
Blake2sParam	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^struct Blake2sParam {$/;"	s
Block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^    Block(TokenStream),$/;"	e	enum:Fragment
BlockDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptor {$/;"	i
BlockDecryptorX8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptorX8 {$/;"	i
BlockEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptor {$/;"	i
BlockEncryptorX8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptorX8 {$/;"	i
BlockEngine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <P: BlockProcessor, X: PaddingProcessor> BlockEngine<P, X> {$/;"	c
BlockEngine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct BlockEngine<P, X> {$/;"	s
BlockEngineState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^enum BlockEngineState {$/;"	g
BlockModeSpec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum BlockModeSpec {$/;"	g
BlockProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^trait BlockProcessor {$/;"	i
BlockRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore + CryptoRng> CryptoRng for BlockRng<R> {}$/;"	c
BlockRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore + SeedableRng> SeedableRng for BlockRng<R> {$/;"	c
BlockRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore + fmt::Debug> fmt::Debug for BlockRng<R> {$/;"	c
BlockRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore<Item=u32>> RngCore for BlockRng<R>$/;"	c
BlockRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore> BlockRng<R> {$/;"	c
BlockRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^pub struct BlockRng<R: BlockRngCore + ?Sized> {$/;"	s
BlockRng64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore + SeedableRng> SeedableRng for BlockRng64<R> {$/;"	c
BlockRng64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore + fmt::Debug> fmt::Debug for BlockRng64<R> {$/;"	c
BlockRng64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore<Item=u64>> RngCore for BlockRng64<R>$/;"	c
BlockRng64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^impl<R: BlockRngCore> BlockRng64<R> {$/;"	c
BlockRng64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^pub struct BlockRng64<R: BlockRngCore + ?Sized> {$/;"	s
BlockRngCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^pub trait BlockRngCore {$/;"	i
BlodeModePaddingSpec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum BlodeModePaddingSpec {$/;"	g
Blowfish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Blowfish,$/;"	e	enum:SymmetricCipherSpec
Blowfish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockDecryptor for Blowfish {$/;"	c
Blowfish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockEncryptor for Blowfish {$/;"	c
Blowfish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl Blowfish {$/;"	c
Blowfish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^pub struct Blowfish {$/;"	s
Bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Bool,$/;"	e	enum:Type
Bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Bool(bool),$/;"	e	enum:Key
Bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Bool(bool),$/;"	e	enum:Value
Bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            Bool(bool),$/;"	e	enum:tests::enum_untagged::Boolish
Bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Bool(bool),$/;"	e	enum:Unexpected
Bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Bool(bool),$/;"	e	enum:content::Content
Bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Bool(bool),$/;"	e	enum:content::Content
BoolAsSIMD	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^pub(crate) trait BoolAsSIMD : Sized {$/;"	i
BoolAttr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl<'c> BoolAttr<'c> {$/;"	c
BoolAttr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^struct BoolAttr<'c>(Attr<'c, ()>);$/;"	s
BoolVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Visitor<'de> for BoolVisitor {$/;"	c
BoolVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct BoolVisitor;$/;"	s
Boolean	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    Boolean = 0x01,$/;"	e	enum:Tag
Boolean	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Boolean,$/;"	e	enum:Unsupported
Boolish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        enum Boolish {$/;"	g	function:tests::enum_untagged
Borrowed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl<'a, Borrowed> SampleBorrow<Borrowed> for &'a Borrowed where Borrowed: SampleUniform {$/;"	c
Borrowed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl<Borrowed> SampleBorrow<Borrowed> for Borrowed where Borrowed: SampleUniform {$/;"	c
Borrowed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    Borrowed(BTreeSet<syn::Lifetime>),$/;"	e	enum:BorrowedLifetimes
BorrowedBytesDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> BorrowedBytesDeserializer<'de, E> {$/;"	c
BorrowedBytesDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for BorrowedBytesDeserializer<'de, E>$/;"	c
BorrowedBytesDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct BorrowedBytesDeserializer<'de, E> {$/;"	s
BorrowedLifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^enum BorrowedLifetimes {$/;"	g
BorrowedLifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl BorrowedLifetimes {$/;"	c
BorrowedLifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    impl Parse for BorrowedLifetimes {$/;"	c	function:parse_lit_into_lifetimes
BorrowedLifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    struct BorrowedLifetimes(Punctuated<syn::Lifetime, Token![+]>);$/;"	s	function:parse_lit_into_lifetimes
BorrowedStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> BorrowedStrDeserializer<'de, E> {$/;"	c
BorrowedStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct BorrowedStrDeserializer<'de, E> {$/;"	s
BorrowedWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> BorrowedWriteBuffer<'a> {$/;"	c
BorrowedWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for BorrowedWriteBuffer<'a> {$/;"	c
BorrowedWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct BorrowedWriteBuffer<'a> {$/;"	s
Bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Bound<T>$/;"	c
Bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for Bound<T>$/;"	c
BoundVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for BoundVisitor<T>$/;"	c	function:deserialize
BoundVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        struct BoundVisitor<T>(PhantomData<Bound<T>>);$/;"	s	function:deserialize
Bounded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^pub trait Bounded {$/;"	i
Bounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl Bounds {$/;"	c
Bounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl Default for Bounds {$/;"	c
Bounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^struct Bounds {$/;"	s
Box	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^impl Fail for Box<dyn Fail> {$/;"	c
Box	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^impl<R: CryptoRng + ?Sized> CryptoRng for Box<R> {}$/;"	c
Box	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^impl<R: RngCore + ?Sized> RngCore for Box<R> {$/;"	c
Box	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Decryptor for Box<SynchronousStreamCipher + 'static> {$/;"	c
Box	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Encryptor for Box<SynchronousStreamCipher + 'static> {$/;"	c
Box	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl SynchronousStreamCipher for Box<SynchronousStreamCipher + 'static> {$/;"	c
BoxStd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/box_std.rs	/^impl Fail for BoxStd {}$/;"	c
BoxStd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/box_std.rs	/^impl fmt::Debug for BoxStd {$/;"	c
BoxStd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/box_std.rs	/^impl fmt::Display for BoxStd {$/;"	c
BoxStd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/box_std.rs	/^pub struct BoxStd(pub Box<dyn Error + Send + Sync + 'static>);$/;"	s
BoxedLimbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> Clone for BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> Deref for BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> DerefMut for BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^struct BoxedLimbs<M> {$/;"	s
Break	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Break,$/;"	e	enum:Type
Break	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Break,$/;"	e	enum:Value
Bs2State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf2Ops for Bs2State<T> {$/;"	c
Bs2State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs2State<T> {$/;"	c
Bs2State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T> Bs2State<T> {$/;"	c
Bs2State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs2State<T>(T, T);$/;"	s
Bs4State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf4Ops for Bs4State<T> {$/;"	c
Bs4State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs4State<T> {$/;"	c
Bs4State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs4State<T> {$/;"	c
Bs4State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs4State<T>(T, T, T, T);$/;"	s
Bs8State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: AesBitValueOps + Copy + 'static> AesOps for Bs8State<T> {$/;"	c
Bs8State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy + Default> Gf8Ops for Bs8State<T> {$/;"	c
Bs8State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs8State<T> {$/;"	c
Bs8State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs8State<T> {$/;"	c
Bs8State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Not<Output = T> + Copy> Bs8State<T> {$/;"	c
Bs8State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs8State<T>(T, T, T, T, T, T, T, T);$/;"	s
Buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^impl Buffer {$/;"	c
Buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^struct Buffer {$/;"	s
BufferOverflow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    BufferOverflow$/;"	e	enum:BufferResult
BufferResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub enum BufferResult {$/;"	g
BufferUnderflow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    BufferUnderflow,$/;"	e	enum:BufferResult
BuildFn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl Default for BuildFn {$/;"	c
BuildFn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl FlagVisibility for BuildFn {$/;"	c
BuildFn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct BuildFn {$/;"	s
ByteArray	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    ByteArray,$/;"	e	enum:Unsupported
ByteBuf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        ByteBuf(Vec<u8>),$/;"	e	enum:content::Content
ByteOrder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub trait ByteOrder$/;"	i
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl Default for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl From<StringRecord> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl PartialEq for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl fmt::Debug for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl ops::Index<usize> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<'a, T: AsRef<[u8]>> From<&'a [T]> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<'a, T: AsRef<[u8]>> PartialEq<Vec<T>> for &'a ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<'a, T: AsRef<[u8]>> PartialEq<[T]> for &'a ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<'r> IntoIterator for &'r ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<T: AsRef<[u8]>> Extend<T> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<T: AsRef<[u8]>> From<Vec<T>> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<T: AsRef<[u8]>> FromIterator<T> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<T: AsRef<[u8]>> PartialEq<Vec<T>> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<T: AsRef<[u8]>> PartialEq<[T]> for ByteRecord {$/;"	c
ByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^pub struct ByteRecord(Box<ByteRecordInner>);$/;"	s
ByteRecordInner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^struct ByteRecordInner {$/;"	s
ByteRecordIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<'r> DoubleEndedIterator for ByteRecordIter<'r> {$/;"	c
ByteRecordIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<'r> ExactSizeIterator for ByteRecordIter<'r> {}$/;"	c
ByteRecordIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl<'r> Iterator for ByteRecordIter<'r> {$/;"	c
ByteRecordIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^pub struct ByteRecordIter<'r> {$/;"	s
ByteRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read> ByteRecordsIntoIter<R> {$/;"	c
ByteRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read> Iterator for ByteRecordsIntoIter<R> {$/;"	c
ByteRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct ByteRecordsIntoIter<R> {$/;"	s
ByteRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<'r, R: io::Read> ByteRecordsIter<'r, R> {$/;"	c
ByteRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<'r, R: io::Read> Iterator for ByteRecordsIter<'r, R> {$/;"	c
ByteRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct ByteRecordsIter<'r, R: 'r> {$/;"	s
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Bytes,$/;"	e	enum:Type
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Bytes(Bytes),$/;"	e	enum:Key
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Bytes(Bytes),$/;"	e	enum:Value
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Bytes(Vec<u8>),$/;"	e	enum:Bytes
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub enum Bytes {$/;"	g
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Bytes(&'a [u8]),$/;"	e	enum:Unexpected
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Bytes(&'de [u8]),$/;"	e	enum:content::Content
Bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Bytes(Vec<u8>),$/;"	e	enum:content::Content
BytesDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'de, 'a, E> Deserializer<'de> for BytesDeserializer<'a, E>$/;"	c
BytesDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub struct BytesDeserializer<'a, E> {$/;"	s
BytesIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<'r, R: 'r + ReadBytesExt> Iterator for BytesIter<'r, R> {$/;"	c
BytesIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub struct BytesIter<'r, R: 'r> {$/;"	s
BytesToHexChars	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^impl<'a> BytesToHexChars<'a> {$/;"	c
BytesToHexChars	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^impl<'a> Iterator for BytesToHexChars<'a> {$/;"	c
BytesToHexChars	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^impl<'a> iter::ExactSizeIterator for BytesToHexChars<'a> {$/;"	c
BytesToHexChars	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^struct BytesToHexChars<'a> {$/;"	s
BytesVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'a> Visitor<'a> for BytesVisitor {$/;"	c
BytesVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct BytesVisitor;$/;"	s
C0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C0: [u64; 256] = [$/;"	v
C1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C1: [u32; 16] = [$/;"	v
C1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C1: [u64; 256] = [$/;"	v
C2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C2: [u32; 16] = [$/;"	v
C2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C2: [u64; 256] = [$/;"	v
C3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C3: [u32; 16] = [$/;"	v
C3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C3: [u64; 256] = [$/;"	v
C4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C4: [u32; 16] = [$/;"	v
C4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C4: [u64; 256] = [$/;"	v
C5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C5: [u64; 256] = [$/;"	v
C6	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C6: [u64; 256] = [$/;"	v
C7	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C7: [u64; 256] = [$/;"	v
CASES	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static CASES: &[(&[Limb], usize)] = &[$/;"	v	function:tests::test_limbs_minimal_bits
CASES	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    static CASES: &'static [(&'static [u8], &'static [u8], &'static [u8], &'static [u8])] = &[$/;"	v	module:test
CHACHA20_POLY1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305.rs	/^pub static CHACHA20_POLY1305: aead::Algorithm = aead::Algorithm {$/;"	v
CHACHA20_POLY1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    CHACHA20_POLY1305,$/;"	e	enum:AlgorithmID
COMMON_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^pub static COMMON_OPS: CommonOps = CommonOps {$/;"	v
COMMON_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^pub static COMMON_OPS: CommonOps = CommonOps {$/;"	v
CRLF	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    CRLF,$/;"	e	enum:Terminator
CStr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for CStr {$/;"	c
CString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for CString {$/;"	c
CString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for CString {$/;"	c
CStringVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Visitor<'de> for CStringVisitor {$/;"	c
CStringVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct CStringVisitor;$/;"	s
CURVE25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^static CURVE25519: ec::Curve = ec::Curve {$/;"	v
CamelCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    CamelCase,$/;"	e	enum:RenameRule
Cancel	/home/pme/src/rust/ctap/src/packet.rs	/^    Cancel = 0x11,$/;"	e	enum:CtapCommand
Cauchy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^impl Cauchy {$/;"	c
Cauchy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^impl Distribution<f64> for Cauchy {$/;"	c
Cauchy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^pub struct Cauchy {$/;"	s
Causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^impl<'f> Iterator for Causes<'f> {$/;"	c
Causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^pub struct Causes<'f> {$/;"	s
Cbc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Cbc,$/;"	e	enum:BlockModeSpec
CbcDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> CbcDecryptor<T, X> {$/;"	c
CbcDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for CbcDecryptor<T, X> {$/;"	c
CbcDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcDecryptor<T, X> {$/;"	s
CbcDecryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for CbcDecryptorProcessor<T> {$/;"	c
CbcDecryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcDecryptorProcessor<T> {$/;"	s
CbcEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> CbcEncryptor<T, X> {$/;"	c
CbcEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for CbcEncryptor<T, X> {$/;"	c
CbcEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcEncryptor<T, X> {$/;"	s
CbcEncryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for CbcEncryptorProcessor<T> {$/;"	c
CbcEncryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcEncryptorProcessor<T> {$/;"	s
CbcTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CbcTest {$/;"	c	module:test
CbcTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CbcTest {$/;"	s	module:test
Cbor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Cbor,$/;"	e	enum:Tag
Cbor	/home/pme/src/rust/ctap/src/packet.rs	/^    Cbor = 0x10,$/;"	e	enum:CtapCommand
CborDecode	/home/pme/src/rust/ctap/src/error.rs	/^    CborDecode,$/;"	e	enum:FidoErrorKind
CborEncode	/home/pme/src/rust/ctap/src/error.rs	/^    CborEncode,$/;"	e	enum:FidoErrorKind
CborError	/home/pme/src/rust/ctap/src/error.rs	/^    CborError(CborErrorCode),$/;"	e	enum:FidoErrorKind
CborErrorCode	/home/pme/src/rust/ctap/src/error.rs	/^impl CborErrorCode {$/;"	c
CborErrorCode	/home/pme/src/rust/ctap/src/error.rs	/^impl Display for CborErrorCode {$/;"	c
CborErrorCode	/home/pme/src/rust/ctap/src/error.rs	/^impl From<u8> for CborErrorCode {$/;"	c
CborErrorCode	/home/pme/src/rust/ctap/src/error.rs	/^pub struct CborErrorCode(u8);$/;"	s
CborSelf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    CborSelf$/;"	e	enum:Tag
Cell	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Cell<T>$/;"	c
Cell	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for Cell<T>$/;"	c
ChaCha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    ChaCha20,$/;"	e	enum:SymmetricCipherSpec
ChaCha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl ChaCha20 {$/;"	c
ChaCha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Clone for ChaCha20 { fn clone(&self) -> ChaCha20 { *self } }$/;"	c
ChaCha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Decryptor for ChaCha20 {$/;"	c
ChaCha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Encryptor for ChaCha20 {$/;"	c
ChaCha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl SynchronousStreamCipher for ChaCha20 {$/;"	c
ChaCha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^pub struct ChaCha20 {$/;"	s
ChaCha20Poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadDecryptor for ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadEncryptor for ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^pub struct ChaCha20Poly1305 {$/;"	s
ChaChaRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl ChaChaRng {$/;"	c
ChaChaRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl CryptoRng for ChaChaRng {}$/;"	c
ChaChaRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for ChaChaRng {$/;"	c
ChaChaRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl SeedableRng for ChaChaRng {$/;"	c
ChaChaRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct ChaChaRng(rand_chacha::ChaChaRng);$/;"	s
ChaChaState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^struct ChaChaState {$/;"	s
ChannelBusy	/home/pme/src/rust/ctap/src/packet.rs	/^    ChannelBusy = 0x06,$/;"	e	enum:CtapError
Char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Char(char),$/;"	e	enum:Unexpected
Char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Char,$/;"	e	enum:Unsupported
CharVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Visitor<'de> for CharVisitor {$/;"	c
CharVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct CharVisitor;$/;"	s
CheckedAdd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedAdd: Sized + Add<Self, Output = Self> {$/;"	i
CheckedDiv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedDiv: Sized + Div<Self, Output = Self> {$/;"	i
CheckedMul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedMul: Sized + Mul<Self, Output = Self> {$/;"	i
CheckedNeg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedNeg: Sized {$/;"	i
CheckedRem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedRem: Sized + Rem<Self, Output = Self> {$/;"	i
CheckedShl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedShl: Sized + Shl<u32, Output = Self> {$/;"	i
CheckedShr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedShr: Sized + Shr<u32, Output = Self> {$/;"	i
CheckedSub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^pub trait CheckedSub: Sized + Sub<Self, Output = Self> {$/;"	i
ChiSquared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl ChiSquared {$/;"	c
ChiSquared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Distribution<f64> for ChiSquared {$/;"	c
ChiSquared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^pub struct ChiSquared {$/;"	s
ChiSquaredRepr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^enum ChiSquaredRepr {$/;"	g
ChunkHintedIterator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    impl<I: ExactSizeIterator + Iterator + Clone> Iterator for ChunkHintedIterator<I> {$/;"	c	module:test
ChunkHintedIterator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    struct ChunkHintedIterator<I: ExactSizeIterator + Iterator + Clone> {$/;"	s	module:test
Chunks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Chunks(LinkedList<String>)$/;"	e	enum:Text
Chunks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Chunks(LinkedList<Vec<u8>>)$/;"	e	enum:Bytes
CipherTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    trait CipherTest {$/;"	i	module:test
ClientPin	/home/pme/src/rust/ctap/src/cbor.rs	/^    ClientPin(ClientPinRequest<'a>),$/;"	e	enum:Request
ClientPin	/home/pme/src/rust/ctap/src/cbor.rs	/^    ClientPin(ClientPinResponse),$/;"	e	enum:Response
ClientPinRequest	/home/pme/src/rust/ctap/src/cbor.rs	/^impl<'a> ClientPinRequest<'a> {$/;"	c
ClientPinRequest	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct ClientPinRequest<'a> {$/;"	s
ClientPinResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^impl ClientPinResponse {$/;"	c
ClientPinResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct ClientPinResponse {$/;"	s
CommonOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^impl CommonOps {$/;"	c
CommonOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub struct CommonOps {$/;"	s
Compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/compat.rs	/^impl<E: Display> Display for Compat<E> {$/;"	c
Compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/compat.rs	/^impl<E> Compat<E> {$/;"	c
Compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/compat.rs	/^pub struct Compat<E> {$/;"	s
Config	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl Config {$/;"	c
Config	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub struct Config {$/;"	s
ContPacket	/home/pme/src/rust/ctap/src/packet.rs	/^impl ContPacket {$/;"	c
ContPacket	/home/pme/src/rust/ctap/src/packet.rs	/^pub struct ContPacket {$/;"	s
Container	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^impl<'a> Container<'a> {$/;"	c
Container	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^pub struct Container<'a> {$/;"	s
Container	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl Container {$/;"	c
Container	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub struct Container {$/;"	s
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Content(Content<'de>),$/;"	e	enum:content::TagOrContent
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagContentOtherField
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagOrContentField
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> Content<'de> {$/;"	c	module:content
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> Deserialize<'de> for Content<'de> {$/;"	c	module:content
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub enum Content<'de> {$/;"	g	module:content
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl Serialize for Content {$/;"	c	module:content
Content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub enum Content {$/;"	g	module:content
ContentDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E> {$/;"	c	module:content
ContentDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> de::IntoDeserializer<'de, E> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct ContentDeserializer<'de, E> {$/;"	s	module:content
ContentRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E> {$/;"	c	module:content
ContentRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> Deserializer<'de> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> de::IntoDeserializer<'de, E> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct ContentRefDeserializer<'a, 'de: 'a, E> {$/;"	s	module:content
ContentSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ContentSerializer<E> {$/;"	c	module:content
ContentSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> Serializer for ContentSerializer<E>$/;"	c	module:content
ContentSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct ContentSerializer<E> {$/;"	s	module:content
ContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> Visitor<'de> for ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct ContentVisitor<'de> {$/;"	s	module:content
Context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/context.rs	/^impl<D> From<D> for Context<D>$/;"	c
Context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^impl Context {$/;"	c
Context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub struct Context {$/;"	s
ContextSpecificConstructed0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    ContextSpecificConstructed0 = CONTEXT_SPECIFIC | CONSTRUCTED | 0,$/;"	e	enum:Tag
ContextSpecificConstructed1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    ContextSpecificConstructed1 = CONTEXT_SPECIFIC | CONSTRUCTED | 1,$/;"	e	enum:Tag
ContextSpecificConstructed3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    ContextSpecificConstructed3 = CONTEXT_SPECIFIC | CONSTRUCTED | 3,$/;"	e	enum:Tag
CoseKey	/home/pme/src/rust/ctap/src/cbor.rs	/^impl CoseKey {$/;"	c
CoseKey	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct CoseKey {$/;"	s
Counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^pub type Counter = [u32; 4];$/;"	t
Cow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, 'a, T: ?Sized> Deserialize<'de> for Cow<'a, T>$/;"	c
Cow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for Cow<'a, str>$/;"	c
CowBytesVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowBytesVisitor {$/;"	c	function:borrow_cow_bytes
CowBytesVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct CowBytesVisitor;$/;"	s	function:borrow_cow_bytes
CowStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'a, E> Clone for CowStrDeserializer<'a, E> {$/;"	c
CowStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct CowStrDeserializer<'a, E> {$/;"	s
CowStrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowStrVisitor {$/;"	c	function:borrow_cow_str
CowStrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct CowStrVisitor;$/;"	s	function:borrow_cow_str
CryptoRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^pub trait CryptoRng {}$/;"	i
CtapCommand	/home/pme/src/rust/ctap/src/packet.rs	/^impl CtapCommand {$/;"	c
CtapCommand	/home/pme/src/rust/ctap/src/packet.rs	/^pub enum CtapCommand {$/;"	g
CtapError	/home/pme/src/rust/ctap/src/packet.rs	/^pub enum CtapError {$/;"	g
Ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ctr,$/;"	e	enum:BlockModeSpec
CtrMode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> CtrMode<A> {$/;"	c
CtrMode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Decryptor for CtrMode<A> {$/;"	c
CtrMode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Encryptor for CtrMode<A> {$/;"	c
CtrMode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> SynchronousStreamCipher for CtrMode<A> {$/;"	c
CtrMode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrMode<A> {$/;"	s
CtrModeX8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> CtrModeX8<A> {$/;"	c
CtrModeX8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Decryptor for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Encryptor for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> SynchronousStreamCipher for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrModeX8<A> {$/;"	s
CtrTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct CtrTest {$/;"	s	module:test
CtrTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CtrTest {$/;"	c	module:test
CtrTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CtrTest {$/;"	s	module:test
Ctxt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^impl Ctxt {$/;"	c
Ctxt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^impl Drop for Ctxt {$/;"	c
Ctxt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^pub struct Ctxt {$/;"	s
Cursor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^impl ReadSlice for Cursor<Vec<u8>> {$/;"	c
Cursor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^impl<'r> ReadSlice for Cursor<&'r [u8]> {$/;"	c
Cursor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^impl<'r> Cursor<'r> {$/;"	c
Cursor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub struct Cursor<'r> {$/;"	s
Curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^pub struct Curve {$/;"	s
Curve25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    Curve25519,$/;"	e	enum:CurveID
CurveGen	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    impl CurveGen {$/;"	c	module:tests
CurveGen	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    impl Iterator for CurveGen {$/;"	c	module:tests
CurveGen	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    struct CurveGen {$/;"	s	module:tests
CurveID	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^pub enum CurveID {$/;"	g
Custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    Custom(Custom),$/;"	e	enum:Source
Custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^type Custom = NoSource;$/;"	t
D	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^impl<'a, T, D: Distribution<T>> Distribution<T> for &'a D {$/;"	c
Data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^impl<'a> Data<'a> {$/;"	c
Data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^pub enum Data<'a> {$/;"	g
DateTime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    DateTime,$/;"	e	enum:Tag
DeByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'r> DeRecord<'r> for DeByteRecord<'r> {$/;"	c
DeByteRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^struct DeByteRecord<'r> {$/;"	s
DeImplGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl<'a> DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl<'a> ToTokens for DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^struct DeImplGenerics<'a>(&'a Parameters);$/;"	s
DeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^trait DeRecord<'r> {$/;"	i
DeRecordWrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'a, 'de: 'a, T: DeRecord<'de>> Deserializer<'de>$/;"	c
DeRecordWrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'a, 'de: 'a, T: DeRecord<'de>> EnumAccess<'de>$/;"	c
DeRecordWrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'a, 'de: 'a, T: DeRecord<'de>> MapAccess<'de>$/;"	c
DeRecordWrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'a, 'de: 'a, T: DeRecord<'de>> SeqAccess<'de>$/;"	c
DeRecordWrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'a, 'de: 'a, T: DeRecord<'de>> VariantAccess<'de>$/;"	c
DeRecordWrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'r, T: DeRecord<'r>> DeRecord<'r> for DeRecordWrap<T> {$/;"	c
DeRecordWrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^struct DeRecordWrap<T>(T);$/;"	s
DeStringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl<'r> DeRecord<'r> for DeStringRecord<'r> {$/;"	c
DeStringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^struct DeStringRecord<'r> {$/;"	s
DeTypeGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl<'a> DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl<'a> ToTokens for DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^struct DeTypeGenerics<'a>(&'a Parameters);$/;"	s
DecPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> DecPadding<X> {$/;"	c
DecPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for DecPadding<X> {$/;"	c
DecPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct DecPadding<X> {$/;"	s
Decimal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Decimal,$/;"	e	enum:Tag
DecodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl Error for DecodeError {$/;"	c
DecodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl From<ReadSliceError> for DecodeError {$/;"	c
DecodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl From<Utf8Error> for DecodeError {$/;"	c
DecodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl From<io::Error> for DecodeError {$/;"	c
DecodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl From<string::FromUtf8Error> for DecodeError {$/;"	c
DecodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl fmt::Display for DecodeError {$/;"	c
DecodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub enum DecodeError {$/;"	g
DecodeResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub type DecodeResult<A> = Result<A, DecodeError>;$/;"	t
Decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<R: ReadBytesExt + ReadSlice> Decoder<R> {$/;"	c
Decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<R: ReadBytesExt + Skip> Decoder<R> {$/;"	c
Decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<R: ReadBytesExt> Decoder<R> {$/;"	c
Decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub struct Decoder<R> {$/;"	s
DecryptPin	/home/pme/src/rust/ctap/src/error.rs	/^    DecryptPin,$/;"	e	enum:FidoErrorKind
Decryption	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    Decryption$/;"	e	enum:KeyType
Decryption	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    Decryption$/;"	e	enum:KeyType
Decryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Decryptor {$/;"	i
Default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    Default,$/;"	e	enum:Default
Default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl Default {$/;"	c
Default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub enum Default {$/;"	g
DefaultExpression	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^impl DefaultExpression {$/;"	c
DefaultExpression	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^impl darling::FromMeta for DefaultExpression {$/;"	c
DefaultExpression	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^pub enum DefaultExpression {$/;"	g
Derive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^pub enum Derive {$/;"	g
Des	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Des,$/;"	e	enum:SymmetricCipherSpec
Deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    Deserialize {$/;"	e	enum:ErrorKind
Deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for ! {$/;"	c
Deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for () {$/;"	c
Deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait Deserialize<'de>: Sized {$/;"	i
Deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^    Deserialize,$/;"	e	enum:Derive
DeserializeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl DeserializeError {$/;"	c
DeserializeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl SerdeError for DeserializeError {$/;"	c
DeserializeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl StdError for DeserializeError {$/;"	c
DeserializeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl fmt::Display for DeserializeError {$/;"	c
DeserializeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^pub struct DeserializeError {$/;"	s
DeserializeErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl DeserializeErrorKind {$/;"	c
DeserializeErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^impl fmt::Display for DeserializeErrorKind {$/;"	c
DeserializeErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^pub enum DeserializeErrorKind {$/;"	g
DeserializeOwned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait DeserializeOwned: for<'de> Deserialize<'de> {}$/;"	i
DeserializeRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read, D: DeserializeOwned> DeserializeRecordsIntoIter<R, D> {$/;"	c
DeserializeRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read, D: DeserializeOwned> Iterator$/;"	c
DeserializeRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct DeserializeRecordsIntoIter<R, D> {$/;"	s
DeserializeRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<'r, R: io::Read, D: DeserializeOwned> DeserializeRecordsIter<'r, R, D> {$/;"	c
DeserializeRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<'r, R: io::Read, D: DeserializeOwned> Iterator$/;"	c
DeserializeRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct DeserializeRecordsIter<'r, R: 'r, D> {$/;"	s
DeserializeSeed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait DeserializeSeed<'de>: Sized {$/;"	i
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IntoDeserializer
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait Deserializer<'de>: Sized {$/;"	i
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = CowStrDeserializer<'a, E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = MapDeserializer<'de, <Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = NeverDeserializer<E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = SeqDeserializer<<Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = StringDeserializer<E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = U32Deserializer<E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Deserializer = UnitDeserializer<E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Deserializer = Self;$/;"	t	module:content
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    type Deserializer = <u32 as IntoDeserializer<'de, E>>::Deserializer;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    type Deserializer = BytesDeserializer<'a, E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IdentifierDeserializer
DevURandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        DevURandom,$/;"	e	enum:sysrand_or_urandom::Mechanism
DeviceInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl DeviceInfo {$/;"	c
DeviceInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl Into<HidDeviceInfo> for DeviceInfo {$/;"	c
DeviceInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl fmt::Debug for DeviceInfo {$/;"	c
DeviceInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^pub struct DeviceInfo {$/;"	s
DeviceInfo	/home/pme/src/rust/ctap/src/hid_common.rs	/^pub struct DeviceInfo {$/;"	s
DeviceUnsupported	/home/pme/src/rust/ctap/src/error.rs	/^    DeviceUnsupported,$/;"	e	enum:FidoErrorKind
DidNotWrite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    DidNotWrite,$/;"	e	enum:HeaderState
DidWrite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    DidWrite,$/;"	e	enum:HeaderState
Digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^impl AsRef<[u8]> for Digest {$/;"	c
Digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^impl Digest {$/;"	c
Digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^impl core::fmt::Debug for Digest {$/;"	c
Digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub struct Digest {$/;"	s
Digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^pub trait Digest {$/;"	i
DigestSpec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum DigestSpec {$/;"	g
Dirichlet	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^impl Dirichlet {$/;"	c
Dirichlet	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^impl Distribution<Vec<f64>> for Dirichlet {$/;"	c
Dirichlet	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^pub struct Dirichlet {$/;"	s
DistIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^impl<'a, D, R, T> Iterator for DistIter<'a, D, R, T>$/;"	c
DistIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^impl<'a, D, R, T> iter::FusedIterator for DistIter<'a, D, R, T>$/;"	c
DistIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^impl<'a, D, R, T> iter::TrustedLen for DistIter<'a, D, R, T>$/;"	c
DistIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^pub struct DistIter<'a, D: 'a, R: 'a, T> {$/;"	s
Distribution	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^pub trait Distribution<T> {$/;"	i
DoFAnythingElse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    DoFAnythingElse(Gamma),$/;"	e	enum:ChiSquaredRepr
DoFExactlyOne	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    DoFExactlyOne,$/;"	e	enum:ChiSquaredRepr
Document	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^impl AsRef<[u8]> for Document {$/;"	c
Document	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^pub struct Document {$/;"	s
DuplicateKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    DuplicateKey(Key),$/;"	e	enum:DecodeError
Duration	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl SampleUniform for Duration {$/;"	c
Duration	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for Duration {$/;"	c
Duration	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for Duration {$/;"	c
DurationVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:Duration::deserialize
DurationVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:SystemTime::deserialize
DurationVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:Duration::deserialize
DurationVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:SystemTime::deserialize
E	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^impl<E: StdError + Send + Sync + 'static> Fail for E {}$/;"	c
E	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl<E: Encoding> ProductEncoding for (R, E) {$/;"	c
E	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl<E: ReductionEncoding> ProductEncoding for (RInverse, E)$/;"	c
E	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl<E: ReductionEncoding> ProductEncoding for (Unencoded, E) {$/;"	c
ECDSA_P256_SHA256_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P256_SHA256_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P256_SHA256_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA256_ASN1_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P256_SHA256_ASN1_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_ASN1_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P256_SHA256_ASN1_SIGNING: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA256_FIXED	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P256_SHA256_FIXED,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_FIXED	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P256_SHA256_FIXED: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA256_FIXED_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P256_SHA256_FIXED_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_FIXED_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P256_SHA256_FIXED_SIGNING: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA384_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P256_SHA384_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA384_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P256_SHA384_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA256_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P384_SHA256_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA256_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P384_SHA256_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P384_SHA384_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_ASN1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P384_SHA384_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_ASN1_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P384_SHA384_ASN1_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_ASN1_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P384_SHA384_ASN1_SIGNING: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_FIXED	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P384_SHA384_FIXED,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_FIXED	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P384_SHA384_FIXED: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_FIXED_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P384_SHA384_FIXED_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_FIXED_SIGNING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P384_SHA384_FIXED_SIGNING: Algorithm = Algorithm {$/;"	v
EC_PUBLIC_KEY_P256_PKCS8_V1_TEMPLATE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^static EC_PUBLIC_KEY_P256_PKCS8_V1_TEMPLATE: pkcs8::Template = pkcs8::Template {$/;"	v
EC_PUBLIC_KEY_P384_PKCS8_V1_TEMPLATE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^static EC_PUBLIC_KEY_P384_PKCS8_V1_TEMPLATE: pkcs8::Template = pkcs8::Template {$/;"	v
ED25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^pub static ED25519: EdDSAParameters = EdDSAParameters {};$/;"	v
ENABLED	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^        static ENABLED: AtomicUsize = ATOMIC_USIZE_INIT;$/;"	v	method:InternalBacktrace::new
EQUAL	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static EQUAL: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_equal_limb
EQUAL	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static EQUAL: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_less_than_limb_constant_time
ERR_STR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust PBKDF2 format.";$/;"	v	function:pbkdf2_check
ERR_STR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust Scrypt format.";$/;"	v	function:scrypt_check
EVENS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static EVENS: &[&[Limb]] = &[$/;"	v	function:tests::test_limbs_are_even
Ebc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ebc,$/;"	e	enum:BlockModeSpec
EcbDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for EcbDecryptor<T, X> {$/;"	c
EcbDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> EcbDecryptor<T, X> {$/;"	c
EcbDecryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbDecryptor<T, X> {$/;"	s
EcbDecryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for EcbDecryptorProcessor<T> {$/;"	c
EcbDecryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbDecryptorProcessor<T> {$/;"	s
EcbEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> EcbEncryptor<T, X> {$/;"	c
EcbEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for EcbEncryptor<T, X> {$/;"	c
EcbEncryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbEncryptor<T, X> {$/;"	s
EcbEncryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for EcbEncryptorProcessor<T> {$/;"	c
EcbEncryptorProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbEncryptorProcessor<T> {$/;"	s
EcbTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for EcbTest {$/;"	c	module:test
EcbTest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct EcbTest {$/;"	s	module:test
EdDSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^impl core::fmt::Debug for EdDSAParameters {$/;"	c
EdDSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^impl private::Sealed for EdDSAParameters {}$/;"	c
EdDSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^impl signature::VerificationAlgorithm for EdDSAParameters {$/;"	c
EdDSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^pub struct EdDSAParameters;$/;"	s
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^impl Elem<T> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^impl<E: Encoding> Elem<E> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub struct Elem<E: Encoding> {$/;"	s
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^impl<M, E: Encoding> Elem<M, E> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^pub struct Elem<M, E: Encoding> {$/;"	s
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub type Elem<E> = elem::Elem<Q, E>;$/;"	t
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M, E: ReductionEncoding> Elem<M, E> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M, E> Clone for Elem<M, E> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M, E> Elem<M, E> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> Elem<M, R> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> Elem<M, Unencoded> {$/;"	c
Elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub struct Elem<M, E = Unencoded> {$/;"	s
Empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    Empty,$/;"	e	enum:FloatErrorKind
EncPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> EncPadding<X> {$/;"	c
EncPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for EncPadding<X> {$/;"	c
EncPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EncPadding<X> {$/;"	s
Encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/utf8.rs	/^impl Encode {$/;"	c
Encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/utf8.rs	/^pub struct Encode {$/;"	s
EncodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^impl Error for EncodeError {$/;"	c
EncodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^impl From<io::Error> for EncodeError {$/;"	c
EncodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^impl fmt::Display for EncodeError {$/;"	c
EncodeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^pub enum EncodeError {$/;"	g
EncodeResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^pub type EncodeResult = Result<(), EncodeError>;$/;"	t
EncodedPoint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub type EncodedPoint = [u8; ELEM_LEN];$/;"	t
Encoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^impl<W: WriteBytesExt> Encoder<W> {$/;"	c
Encoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^pub struct Encoder<W> {$/;"	s
Encoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^pub trait Encoding {}$/;"	i
Encoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub trait Encoding {}$/;"	i
EncounteredStructField	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    EncounteredStructField,$/;"	e	enum:HeaderState
EncryptPin	/home/pme/src/rust/ctap/src/error.rs	/^    EncryptPin,$/;"	e	enum:FidoErrorKind
Encryption	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    Encryption,$/;"	e	enum:KeyType
Encryption	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    Encryption,$/;"	e	enum:KeyType
Encryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Encryptor {$/;"	i
End	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        End,$/;"	e	enum:range::Field
EndOfInput	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct EndOfInput;$/;"	s
Engine256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256 {$/;"	c
Engine256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256 {$/;"	s
Engine256State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256State {$/;"	c
Engine256State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256State {$/;"	s
Engine512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512 {$/;"	c
Engine512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512 {$/;"	s
Engine512State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512State {$/;"	c
Engine512State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512State {$/;"	s
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl CryptoRng for EntropyRng {}$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl Default for EntropyRng {$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl EntropyRng {$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for EntropyRng {$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct EntropyRng(rngs::EntropyRng);$/;"	s
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^impl CryptoRng for EntropyRng {}$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^impl Default for EntropyRng {$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^impl EntropyRng {$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^impl RngCore for EntropyRng {$/;"	c
EntropyRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^pub struct EntropyRng {$/;"	s
EntropySource	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^trait EntropySource {$/;"	i
Enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Enum,$/;"	e	enum:Unexpected
Enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Enum,$/;"	e	enum:Unsupported
Enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    Enum(Vec<Variant<'a>>),$/;"	e	enum:Data
EnumAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait EnumAccess<'de>: Sized {$/;"	i
EnumDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> de::EnumAccess<'de> for EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct EnumDeserializer<'de, E>$/;"	s	module:content
EnumRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> de::EnumAccess<'de> for EnumRefDeserializer<'a, 'de, E>$/;"	c	module:content
EnumRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct EnumRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Eof	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    Eof,$/;"	e	enum:ReaderEofState
EphemeralPrivateKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^impl<'a> EphemeralPrivateKey {$/;"	c
EphemeralPrivateKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^pub struct EphemeralPrivateKey {$/;"	s
Err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Err,$/;"	e	enum:deserialize::Field
Err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    type Err = ();$/;"	t	implementation:RenameRule
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    type Error = DeserializeError;$/;"	t	implementation:DeRecordWrap
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl From<Error> for io::Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl From<io::Error> for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl StdError for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl fmt::Display for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^pub struct Error(Box<ErrorKind>);$/;"	s
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type Error = Error;$/;"	t	implementation:SeHeader
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type Error = Error;$/;"	t	implementation:SeRecord
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl SerdeError for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^impl AsRef<dyn Fail> for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^impl Debug for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^impl Display for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^impl Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^impl<F: Fail> From<F> for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^pub struct Error {$/;"	s
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^impl Debug for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^impl Display for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^impl Drop for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^impl Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^impl<F: Fail> From<F> for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^pub struct Error {$/;"	s
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^impl Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^impl From<syn::Error> for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^struct Error(TokenStream);$/;"	s
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    type Error = FromHexError;$/;"	t	implementation:Vec
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    type Error;$/;"	t	interface:FromHex
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^impl Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^impl From<Error> for io::Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^impl fmt::Display for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^impl stdError for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^pub struct Error {$/;"	s
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    Error(SymmetricCipherError)$/;"	e	enum:BlockEngineState
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Error = A::Error;$/;"	t
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:Deserializer
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:EnumAccess
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:MapAccess
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:SeqAccess
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:VariantAccess
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        type Error = A::Error;$/;"	t	module:private
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        type Error = E;$/;"	t	module:private
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Error = A::Error;$/;"	t
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Error = E;$/;"	t
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl Display for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl de::Error for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl error::Error for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct Error {$/;"	s
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Error = E;$/;"	t	function:missing_field
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    type Error = E;$/;"	t
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type Error = M::Error;$/;"	t	module:content
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type Error = M::Error;$/;"	t
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type Error = S::Error;$/;"	t
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl Display for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl error::Error for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^pub struct Error;$/;"	s
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type Error = fmt::Error;$/;"	t	implementation:Formatter
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^impl Error for fmt::Error {$/;"	c
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    type Error = Error;$/;"	t
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeMap
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeSeq
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStruct
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStructVariant
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTuple
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleStruct
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleVariant
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:Serializer
Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/std_error.rs	/^pub trait Error: Debug + Display {$/;"	i
Error	/home/pme/src/rust/ctap/src/packet.rs	/^    Error = 0x3f,$/;"	e	enum:CtapCommand
ErrorIfWrite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    ErrorIfWrite(Error),$/;"	e	enum:HeaderState
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^impl ErrorImpl {$/;"	c
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^impl<F: Fail> From<F> for ErrorImpl {$/;"	c
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^pub(crate) struct ErrorImpl {$/;"	s
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^impl ErrorImpl {$/;"	c
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^impl<F: Fail> From<F> for ErrorImpl {$/;"	c
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^pub(crate) struct ErrorImpl {$/;"	s
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^type ErrorImpl = ();$/;"	t
ErrorImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^type ErrorImpl = Box<str>;$/;"	t
ErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl ErrorKind {$/;"	c
ErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^pub enum ErrorKind {$/;"	g
ErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^impl ErrorKind {$/;"	c
ErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^pub enum ErrorKind {$/;"	g
ErrorMessage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error_message.rs	/^impl<D: Display + Debug + Sync + Send + 'static> Display for ErrorMessage<D> {$/;"	c
ErrorMessage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error_message.rs	/^impl<D: Display + Debug + Sync + Send + 'static> Fail for ErrorMessage<D> {$/;"	c
ErrorMessage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error_message.rs	/^struct ErrorMessage<D: Display + Debug + Sync + Send + 'static> {$/;"	s
Excluded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Excluded,$/;"	e	enum:deserialize::Field
Exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^impl Distribution<f64> for Exp {$/;"	c
Exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^impl Exp {$/;"	c
Exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^pub struct Exp {$/;"	s
Exp1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^impl Distribution<f64> for Exp1 {$/;"	c
Exp1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^pub struct Exp1;$/;"	s
Expected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait Expected {$/;"	i
ExpectedInMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl Expected for ExpectedInMap {$/;"	c
ExpectedInMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^struct ExpectedInMap(usize);$/;"	s
ExpectedInSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl Expected for ExpectedInSeq {$/;"	c
ExpectedInSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^struct ExpectedInSeq(usize);$/;"	s
Explicit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^    Explicit(String),$/;"	e	enum:DefaultExpression
Expr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^    Expr(TokenStream),$/;"	e	enum:Fragment
Expr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^impl ToTokens for Expr {$/;"	c
Expr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^pub struct Expr(pub Fragment);$/;"	s
ExtPoint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^impl ExtPoint {$/;"	c
ExtPoint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub struct ExtPoint {$/;"	s
External	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    External,$/;"	e	enum:TagType
ExternallyTagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:StructVariant
ExternallyTagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:TupleVariant
F	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^    type F;$/;"	t	interface:IntoFloat
F32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    F32(f32),$/;"	e	enum:Value
F32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        F32(f32),$/;"	e	enum:content::Content
F32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        F32(f32),$/;"	e	enum:content::Content
F64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    F64(f64),$/;"	e	enum:Value
F64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        F64(f64),$/;"	e	enum:content::Content
F64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        F64(f64),$/;"	e	enum:content::Content
FE_D	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D : Fe = Fe([-10913610,13857413,-15372611,6949391,114729,-8787816,-6275908,-3247719,-1/;"	v
FE_D2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D2 : Fe = Fe([-21827239,-5839606,-30745221,13898782,229458,15978800,-12551817,-6495438/;"	v
FE_ONE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ONE : Fe = Fe([1,0,0,0,0,0,0,0,0,0]);$/;"	v
FE_SQRTM1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_SQRTM1 : Fe = Fe([-32595792,-7943725,9377950,3500415,12389472,-272473,-25146209,-20056/;"	v
FE_ZERO	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ZERO : Fe = Fe([0,0,0,0,0,0,0,0,0,0]);$/;"	v
FORK_HANDLER_REGISTERED	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    static FORK_HANDLER_REGISTERED: AtomicBool = ATOMIC_BOOL_INIT;$/;"	v	module:fork
FRAME_INIT	/home/pme/src/rust/ctap/src/packet.rs	/^static FRAME_INIT: u8 = 0x80;$/;"	v
Fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/as_fail.rs	/^impl AsFail for dyn Fail {$/;"	c
Fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^impl dyn Fail {$/;"	c
Fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^pub trait Fail: Display + Debug + Send + Sync + 'static {$/;"	i
FailData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    type FailData;$/;"	t
FailData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    type FailData;$/;"	t
False	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    False = 0,$/;"	e	enum:LimbMask
FastMode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    FastMode,$/;"	e	enum:BlockEngineState
Fe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add for Fe {$/;"	c
Fe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Eq for Fe { }$/;"	c
Fe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Fe {$/;"	c
Fe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Mul for Fe {$/;"	c
Fe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl PartialEq for Fe {$/;"	c
Fe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub for Fe {$/;"	c
Fe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct Fe(pub [i32; 10]);$/;"	s
FidoAssertionRequest	/home/pme/src/rust/ctap/src/lib.rs	/^impl<'a, 'b> FidoAssertionRequest<'a, 'b> {$/;"	c
FidoAssertionRequest	/home/pme/src/rust/ctap/src/lib.rs	/^pub struct FidoAssertionRequest<'a, 'b> {$/;"	s
FidoAssertionRequestBuilder	/home/pme/src/rust/ctap/src/lib.rs	/^impl<'a, 'b> FidoAssertionRequestBuilder<'a, 'b> {$/;"	c
FidoCancelHandle	/home/pme/src/rust/ctap/src/lib.rs	/^impl FidoCancelHandle {$/;"	c
FidoCancelHandle	/home/pme/src/rust/ctap/src/lib.rs	/^pub struct FidoCancelHandle {$/;"	s
FidoCredential	/home/pme/src/rust/ctap/src/lib.rs	/^pub struct FidoCredential {$/;"	s
FidoCredentialRequest	/home/pme/src/rust/ctap/src/lib.rs	/^impl<'a> FidoCredentialRequest<'a> {$/;"	c
FidoCredentialRequest	/home/pme/src/rust/ctap/src/lib.rs	/^pub struct FidoCredentialRequest<'a> {$/;"	s
FidoDevice	/home/pme/src/rust/ctap/src/extensions/hmac.rs	/^impl HmacExtension for FidoDevice {$/;"	c
FidoDevice	/home/pme/src/rust/ctap/src/lib.rs	/^impl FidoDevice {$/;"	c
FidoDevice	/home/pme/src/rust/ctap/src/lib.rs	/^pub struct FidoDevice {$/;"	s
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^impl Display for FidoError {$/;"	c
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^impl Fail for FidoError {$/;"	c
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^impl FidoError {$/;"	c
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^impl From<Context<FidoErrorKind>> for FidoError {$/;"	c
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^impl From<DecodeError> for FidoError {$/;"	c
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^impl From<EncodeError> for FidoError {$/;"	c
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^impl From<FidoErrorKind> for FidoError {$/;"	c
FidoError	/home/pme/src/rust/ctap/src/error.rs	/^pub struct FidoError(Context<FidoErrorKind>);$/;"	s
FidoErrorKind	/home/pme/src/rust/ctap/src/error.rs	/^pub enum FidoErrorKind {$/;"	g
FidoResult	/home/pme/src/rust/ctap/src/error.rs	/^pub type FidoResult<T> = Result<T, FidoError>;$/;"	t
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl FlagVisibility for Field {$/;"	c
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct Field {$/;"	s
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        enum Field {$/;"	g	function:deserialize
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        enum Field {$/;"	g	method:Duration::deserialize
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        enum Field {$/;"	g	method:SystemTime::deserialize
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	function:deserialize
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:Duration::deserialize
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:SystemTime::deserialize
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    enum Field {$/;"	g	module:range
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    impl<'de> Deserialize<'de> for Field {$/;"	c	module:range
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^pub struct Field<'a> {$/;"	s
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    Field,$/;"	e	enum:Identifier
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl Field {$/;"	c
Field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub struct Field {$/;"	s
FieldIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl<'a> Iterator for FieldIter<'a> {$/;"	c
FieldIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct FieldIter<'a>(&'a Options, IntoIter<&'a Field>);$/;"	s
FieldLevelSetter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl FieldLevelSetter {$/;"	c
FieldLevelSetter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl From<FieldSetterMeta> for FieldLevelSetter {$/;"	c
FieldLevelSetter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct FieldLevelSetter {$/;"	s
FieldMeta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl FlagVisibility for FieldMeta {$/;"	c
FieldMeta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct FieldMeta {$/;"	s
FieldSetterMeta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^enum FieldSetterMeta {$/;"	g
FieldSetterMeta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl FromMeta for FieldSetterMeta {$/;"	c
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:deserialize::Field::deserialize
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:deserialize::Field::deserialize
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:range::Field::deserialize
FieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            struct FieldVisitor;$/;"	s	method:range::Field::deserialize
FieldWithDefaults	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl<'a> FieldWithDefaults<'a> {$/;"	c
FieldWithDefaults	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct FieldWithDefaults<'a> {$/;"	s
Fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    Fields,$/;"	e	enum:Trim
FileLines	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^type FileLines<'a> = std::io::Lines<std::io::BufReader<&'a std::fs::File>>;$/;"	t
FindTyParams	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^    impl<'ast> Visit<'ast> for FindTyParams<'ast> {$/;"	c	function:with_bound
FindTyParams	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^    struct FindTyParams<'ast> {$/;"	s	function:with_bound
Finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    Finished,$/;"	e	enum:BlockEngineState
First	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        type First = A;$/;"	t	implementation:private::B
First	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        type First;$/;"	t	interface:private::Pair
First	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub type First<T> = <T as Pair>::First;$/;"	t	module:private
FisherF	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Distribution<f64> for FisherF {$/;"	c
FisherF	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl FisherF {$/;"	c
FisherF	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^pub struct FisherF {$/;"	s
FixedBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait FixedBuffer {$/;"	i
FixedBuffer128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer128 { fn clone(&self) -> FixedBuffer128 { *self } }$/;"	c
FixedBuffer128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer128 {$/;"	c
FixedBuffer128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer128 {$/;"	s
FixedBuffer64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer64 { fn clone(&self) -> FixedBuffer64 { *self } }$/;"	c
FixedBuffer64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer64 {$/;"	c
FixedBuffer64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer64 {$/;"	s
FixedByteRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    impl private::Sealed for FixedByteRandom {}$/;"	c	module:rand
FixedByteRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    impl rand::SecureRandom for FixedByteRandom {$/;"	c	module:rand
FixedByteRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub struct FixedByteRandom {$/;"	s	module:rand
FixedSliceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    impl<'a> private::Sealed for FixedSliceRandom<'a> {}$/;"	c	module:rand
FixedSliceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    impl<'a> rand::SecureRandom for FixedSliceRandom<'a> {$/;"	c	module:rand
FixedSliceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub struct FixedSliceRandom<'a> {$/;"	s	module:rand
FixedSliceSequenceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    impl<'a> Drop for FixedSliceSequenceRandom<'a> {$/;"	c	module:rand
FixedSliceSequenceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    impl<'a> private::Sealed for FixedSliceSequenceRandom<'a> {}$/;"	c	module:rand
FixedSliceSequenceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    impl<'a> rand::SecureRandom for FixedSliceSequenceRandom<'a> {$/;"	c	module:rand
FixedSliceSequenceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub struct FixedSliceSequenceRandom<'a> {$/;"	s	module:rand
FlagVisibility	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^trait FlagVisibility {$/;"	i
FlatInternallyTaggedAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatInternallyTaggedAccess<'a, 'de, E>$/;"	c
FlatInternallyTaggedAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub struct FlatInternallyTaggedAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, E> FlatMapAccess<'a, 'de, E> {$/;"	c
FlatMapAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatMapAccess<'a, 'de, E>$/;"	c
FlatMapAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub struct FlatMapAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, E> Deserializer<'de> for FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, E> FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub struct FlatMapDeserializer<'a, 'de: 'a, E>($/;"	s
FlatMapSerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<'a, M> ser::SerializeMap for FlatMapSerializeMap<'a, M>$/;"	c
FlatMapSerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^pub struct FlatMapSerializeMap<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<'a, M> ser::SerializeStruct for FlatMapSerializeStruct<'a, M>$/;"	c
FlatMapSerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^pub struct FlatMapSerializeStruct<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStructVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<'a, M> FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<'a, M> ser::SerializeStructVariant for FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^pub struct FlatMapSerializeStructVariantAsMapValue<'a, M: 'a> {$/;"	s
FlatMapSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<'a, M> FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<'a, M> Serializer for FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^pub struct FlatMapSerializer<'a, M: 'a>(pub &'a mut M);$/;"	s
FlatStructAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, E> FlatStructAccess<'a, 'de, E> {$/;"	c
FlatStructAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatStructAccess<'a, 'de, E>$/;"	c
FlatStructAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub struct FlatStructAccess<'a, 'de: 'a, E> {$/;"	s
Float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^pub trait Float: Num + Copy + NumCast + PartialOrd + Neg<Output = Self> {$/;"	i
Float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^pub(crate) trait Float : Sized {$/;"	i
Float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Float(f64),$/;"	e	enum:Unexpected
Float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Float,$/;"	e	enum:Unsupported
Float16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Float16,$/;"	e	enum:Type
Float32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Float32,$/;"	e	enum:Type
Float64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Float64,$/;"	e	enum:Type
FloatAsSIMD	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^pub(crate) trait FloatAsSIMD : Sized {$/;"	i
FloatCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^pub trait FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy {$/;"	i
FloatErrorKind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub enum FloatErrorKind {$/;"	g
FloatSIMDUtils	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^pub(crate) trait FloatSIMDUtils {$/;"	i
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            Foo,$/;"	e	enum:tests::enum_label_simple_tagged::Label
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::option_empty_field
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::option_invalid_field
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::seq_in_struct
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::seq_in_struct_tail
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::with_header
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::with_header_empty
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::with_header_missing
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::with_header_missing_ok
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::with_header_no_fields
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::with_header_unknown
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo {$/;"	s	function:tests::without_header
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo(i32, bool);$/;"	s	function:tests::two_fields
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo;$/;"	s	function:tests::with_header_empty_ok
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Foo<'a, 'c> {$/;"	s	function:tests::borrowed
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            Foo(i32),$/;"	e	enum:tests::enum_newtypes::Wat
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            Foo,$/;"	e	enum:tests::enum_units::Wat
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        enum Foo {$/;"	g	function:tests::enum_struct_variant
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        enum Foo {$/;"	g	function:tests::tuple_variant
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers_inside_nested_tuple_seq
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers_inside_seq
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers_inside_tuple
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers_inside_tuple_scalar_after
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers_inside_tuple_scalar_before
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers_nested
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_headers_nested_seq
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo {$/;"	s	function:tests::struct_no_headers
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo(bool, i32, String);$/;"	s	function:tests::tuple_struct
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo(f64);$/;"	s	function:tests::struct_newtype
Foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Foo;$/;"	s	function:tests::struct_unit
Formatter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^impl<'a, 'b> Serializer for &'a mut fmt::Formatter<'b> {$/;"	c
Fortuna	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Fortuna {$/;"	c
Fortuna	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Rng for Fortuna {$/;"	c
Fortuna	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl<'a> SeedableRng<&'a [u8]> for Fortuna {$/;"	c
Fortuna	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^pub struct Fortuna {$/;"	s
FortunaGenerator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl FortunaGenerator {$/;"	c
FortunaGenerator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^struct FortunaGenerator {$/;"	s
Fragment	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^impl AsRef<TokenStream> for Fragment {$/;"	c
Fragment	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^pub enum Fragment {$/;"	g
FromEntropy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub trait FromEntropy: SeedableRng {$/;"	i
FromHex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub trait FromHex: Sized {$/;"	i
FromHexError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^impl fmt::Display for FromHexError {$/;"	c
FromHexError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^impl std::error::Error for FromHexError {}$/;"	c
FromHexError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^pub enum FromHexError {$/;"	g
FromPrimitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^pub trait FromPrimitive: Sized {$/;"	i
FromPrimitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^pub trait FromPrimitive: Sized {$/;"	i
FromStrRadixErr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    type FromStrRadixErr = T::FromStrRadixErr;$/;"	t
FromStrRadixErr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    type FromStrRadixErr;$/;"	t	interface:Num
FromUtf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl FromUtf8Error {$/;"	c
FromUtf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl StdError for FromUtf8Error {$/;"	c
FromUtf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl fmt::Display for FromUtf8Error {$/;"	c
FromUtf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^pub struct FromUtf8Error {$/;"	s
FromWideCharError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    FromWideCharError { wide_char: wchar_t },$/;"	e	enum:HidError
Funcs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^impl Funcs {$/;"	c
Funcs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^struct Funcs {$/;"	s
G	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	M
G	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	M
GE_PRECOMP_BASE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static GE_PRECOMP_BASE : [[GePrecomp; 8]; 32] = [$/;"	v
GFp_AES_encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^        fn GFp_AES_encrypt(in_: *const u8, out: *mut u8, key: *const AES_KEY);$/;"	f	module:tests
GFp_AES_set_encrypt_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^        fn GFp_AES_set_encrypt_key(key: *const u8, bits: c::uint,$/;"	f	module:tests
GFp_BN_mod_exp_mont_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn GFp_BN_mod_exp_mont_consttime($/;"	f
GFp_ChaCha20_ctr32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^    fn GFp_ChaCha20_ctr32(out: *mut u8, in_: *const u8, in_len: c::size_t,$/;"	f
GFp_SYS_GETRANDOM	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        static GFp_SYS_GETRANDOM: c::long;$/;"	v	module:sysrand_chunk
GFp_aes_gcm_init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^    fn GFp_aes_gcm_init(ctx_buf: *mut u8, ctx_buf_len: c::size_t,$/;"	f
GFp_bn_from_montgomery_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn GFp_bn_from_montgomery_in_place($/;"	f
GFp_bn_mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn GFp_bn_mul_mont($/;"	f
GFp_bn_mul_mont_check_num_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn GFp_bn_mul_mont_check_num_limbs(num_limbs: c::size_t) -> bssl::Result;$/;"	f
GFp_bn_neg_inv_mod_r_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn GFp_bn_neg_inv_mod_r_u64(n: u64) -> u64;$/;"	f
GFp_cpuid_setup	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/init.rs	/^            fn GFp_cpuid_setup();$/;"	f	function:init_once
GFp_memcmp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/constant_time.rs	/^    fn GFp_memcmp(a: *const u8, b: *const u8, len: c::size_t) -> c::int;$/;"	f
GFp_nistz256_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_add($/;"	f
GFp_nistz256_mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_mul_mont($/;"	f
GFp_nistz256_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_nistz256_neg(r: *mut Limb, a: *const Limb);$/;"	f	function:tests::p256_elem_neg_test
GFp_nistz256_point_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_point_add($/;"	f
GFp_nistz256_point_add_affine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_nistz256_point_add_affine($/;"	f	function:tests::p256_point_sum_mixed_test
GFp_nistz256_point_double	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_nistz256_point_double($/;"	f	function:tests::p256_point_double_test
GFp_nistz256_point_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_point_mul($/;"	f
GFp_nistz256_point_mul_base	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_point_mul_base($/;"	f
GFp_nistz256_sqr_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_sqr_mont($/;"	f
GFp_nistz384_point_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn GFp_nistz384_point_add($/;"	f
GFp_nistz384_point_double	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_nistz384_point_double($/;"	f	function:tests::p384_point_double_test
GFp_nistz384_point_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn GFp_nistz384_point_mul($/;"	f
GFp_p256_scalar_mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_p256_scalar_mul_mont($/;"	f
GFp_p256_scalar_sqr_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_p256_scalar_sqr_mont($/;"	f
GFp_p256_scalar_sqr_rep_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_p256_scalar_sqr_rep_mont(r: *mut Limb, a: *const Limb, rep: c::int);$/;"	f	function:tests::p256_scalar_square_test
GFp_p256_scalar_sqr_rep_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn GFp_p256_scalar_sqr_rep_mont($/;"	f
GFp_p384_elem_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn GFp_p384_elem_add($/;"	f
GFp_p384_elem_div_by_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_p384_elem_div_by_2(r: *mut Limb, a: *const Limb);$/;"	f	function:tests::p384_elem_div_by_2_test
GFp_p384_elem_mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn GFp_p384_elem_mul_mont($/;"	f
GFp_p384_elem_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_p384_elem_neg(r: *mut Limb, a: *const Limb);$/;"	f	function:tests::p384_elem_neg_test
GFp_p384_elem_sqr_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^unsafe extern "C" fn GFp_p384_elem_sqr_mont($/;"	f
GFp_p384_elem_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^            fn GFp_p384_elem_sub(r: *mut Limb, a: *const Limb, b: *const Limb);$/;"	f	function:tests::p384_elem_sub_test
GFp_p384_scalar_mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn GFp_p384_scalar_mul_mont($/;"	f
GFp_poly1305_blocks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    fn GFp_poly1305_blocks(state: &mut Opaque, input: *const u8, len: c::size_t,$/;"	f
GFp_poly1305_emit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    fn GFp_poly1305_emit(state: &mut Opaque, mac: &mut Tag, nonce: &Nonce);$/;"	f
GFp_poly1305_init_asm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    fn GFp_poly1305_init_asm(state: &mut Opaque, key: &KeyBytes,$/;"	f
GFp_sha256_block_data_order	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    fn GFp_sha256_block_data_order(state: &mut State, data: *const u8, num: c::size_t);$/;"	f
GFp_sha512_block_data_order	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    fn GFp_sha512_block_data_order(state: &mut State, data: *const u8, num: c::size_t);$/;"	f
GFp_x25519_fe_invert	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_invert(out: &mut Elem<T>, z: &Elem<T>);$/;"	f
GFp_x25519_fe_isnegative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_isnegative(elem: &Elem<T>) -> u8;$/;"	f
GFp_x25519_fe_mul_ttt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_mul_ttt(h: &mut Elem<T>, f: &Elem<T>, g: &Elem<T>);$/;"	f
GFp_x25519_fe_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_neg(f: &mut Elem<T>);$/;"	f
GFp_x25519_fe_tobytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_tobytes(bytes: &mut EncodedPoint, elem: &Elem<T>);$/;"	f
GFp_x25519_ge_double_scalarmult_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^    fn GFp_x25519_ge_double_scalarmult_vartime($/;"	f
GFp_x25519_ge_frombytes_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_ge_frombytes_vartime(h: &mut ExtPoint, s: &EncodedPoint) -> bssl::Result;$/;"	f
GFp_x25519_ge_scalarmult_base	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    fn GFp_x25519_ge_scalarmult_base(h: &mut ExtPoint, a: &Seed);$/;"	f
GFp_x25519_public_from_private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^    fn GFp_x25519_public_from_private(public_key_out: &mut PublicKey, private_key: &PrivateKey);$/;"	f
GFp_x25519_sc_mask	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    fn GFp_x25519_sc_mask(a: &mut Scalar);$/;"	f
GFp_x25519_sc_muladd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    fn GFp_x25519_sc_muladd(s: &mut Scalar, a: &Scalar, b: &Scalar, c: &Scalar);$/;"	f
GFp_x25519_sc_reduce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/digest.rs	/^    fn GFp_x25519_sc_reduce(s: &mut UnreducedScalar);$/;"	f
GFp_x25519_scalar_mult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^    fn GFp_x25519_scalar_mult($/;"	f
GOOD_POSITIVE_INTEGERS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    static GOOD_POSITIVE_INTEGERS: &'static [(&'static [u8], u8)] = &[$/;"	v	module:tests
GREATER	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static GREATER: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_less_than_limb_constant_time
Gamma	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Distribution<f64> for Gamma {$/;"	c
Gamma	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Gamma {$/;"	c
Gamma	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^pub struct Gamma {$/;"	s
GammaLargeShape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Distribution<f64> for GammaLargeShape {$/;"	c
GammaLargeShape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl GammaLargeShape {$/;"	c
GammaLargeShape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^struct GammaLargeShape {$/;"	s
GammaRepr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^enum GammaRepr {$/;"	g
GammaSmallShape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Distribution<f64> for GammaSmallShape {$/;"	c
GammaSmallShape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl GammaSmallShape {$/;"	c
GammaSmallShape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^struct GammaSmallShape {$/;"	s
GeCached	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeCached {$/;"	s
GeP1P1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP1P1 {$/;"	c
GeP1P1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP1P1 {$/;"	s
GeP2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP2 {$/;"	c
GeP2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP2 {$/;"	s
GeP3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GeCached> for GeP3 {$/;"	c
GeP3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GePrecomp> for GeP3 {$/;"	c
GeP3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP3 {$/;"	c
GeP3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GeCached> for GeP3 {$/;"	c
GeP3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GePrecomp> for GeP3 {$/;"	c
GeP3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP3 {$/;"	s
GePrecomp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GePrecomp {$/;"	c
GePrecomp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GePrecomp {$/;"	s
GeneralizedTime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    GeneralizedTime = 0x18,$/;"	e	enum:Tag
GenerateKey	/home/pme/src/rust/ctap/src/error.rs	/^    GenerateKey,$/;"	e	enum:FidoErrorKind
GenerateSecret	/home/pme/src/rust/ctap/src/error.rs	/^    GenerateSecret,$/;"	e	enum:FidoErrorKind
GenericDecoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<R: ReadBytesExt> GenericDecoder<R> {$/;"	c
GenericDecoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub struct GenericDecoder<R> {$/;"	s
GenericEncoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^impl<W: WriteBytesExt> GenericEncoder<W> {$/;"	c
GenericEncoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^pub struct GenericEncoder<W> {$/;"	s
GetAssertion	/home/pme/src/rust/ctap/src/cbor.rs	/^    GetAssertion(GetAssertionRequest<'a>),$/;"	e	enum:Request
GetAssertion	/home/pme/src/rust/ctap/src/cbor.rs	/^    GetAssertion(GetAssertionResponse),$/;"	e	enum:Response
GetAssertionRequest	/home/pme/src/rust/ctap/src/cbor.rs	/^impl<'a> GetAssertionRequest<'a> {$/;"	c
GetAssertionRequest	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct GetAssertionRequest<'a> {$/;"	s
GetAssertionResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^impl GetAssertionResponse {$/;"	c
GetAssertionResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct GetAssertionResponse {$/;"	s
GetInfo	/home/pme/src/rust/ctap/src/cbor.rs	/^    GetInfo(GetInfoResponse),$/;"	e	enum:Response
GetInfo	/home/pme/src/rust/ctap/src/cbor.rs	/^    GetInfo,$/;"	e	enum:Request
GetInfoResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^impl GetInfoResponse {$/;"	c
GetInfoResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct GetInfoResponse {$/;"	s
Gf128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl BitXor for Gf128 {$/;"	c
Gf128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Gf128 {$/;"	c
Gf128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^struct Gf128 { d: simd::u32x4 }$/;"	s
Gf2Ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf2Ops {$/;"	i
Gf4Ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf4Ops {$/;"	i
Gf8Ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf8Ops {$/;"	i
Ghash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for Ghash { fn clone(&self) -> Ghash { *self } }$/;"	c
Ghash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Ghash {$/;"	c
Ghash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Mac for Ghash {$/;"	c
Ghash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^pub struct Ghash {$/;"	s
GhashWithC	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for GhashWithC { fn clone(&self) -> GhashWithC { *self } }$/;"	c
GhashWithC	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl GhashWithC {$/;"	c
GhashWithC	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^pub struct GhashWithC {$/;"	s
H224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H224: [u32; STATE_LEN] = [$/;"	v
H256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H256: [u32; STATE_LEN] = [$/;"	v
H384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H384: [u64; STATE_LEN] = [$/;"	v
H512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512: [u64; STATE_LEN] = [$/;"	v
H512_TRUNC_224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_224: [u64; STATE_LEN] = [$/;"	v
H512_TRUNC_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_256: [u64; STATE_LEN] = [$/;"	v
HID_API_LOCK	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^static HID_API_LOCK: AtomicBool = AtomicBool::new(false);$/;"	v
HashMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, K, V, S, E> IntoDeserializer<'de, E> for HashMap<K, V, S>$/;"	c
HashSet	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, T, S, E> IntoDeserializer<'de, E> for HashSet<T, S>$/;"	c
Hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Hc128,$/;"	e	enum:SymmetricCipherSpec
Hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Clone for Hc128 { fn clone(&self) -> Hc128 { *self } }$/;"	c
Hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Decryptor for Hc128 {$/;"	c
Hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Encryptor for Hc128 {$/;"	c
Hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Hc128 {$/;"	c
Hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl SynchronousStreamCipher for Hc128 {$/;"	c
Hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^pub struct Hc128 {$/;"	s
Hc128Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl CryptoRng for Hc128Rng {}$/;"	c
Hc128Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for Hc128Rng {$/;"	c
Hc128Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl SeedableRng for Hc128Rng {$/;"	c
Hc128Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct Hc128Rng(rand_hc::Hc128Rng);$/;"	s
HeaderState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^enum HeaderState {$/;"	g
HeaderState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^enum HeaderState {$/;"	g
Headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    Headers,$/;"	e	enum:Trim
Headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^struct Headers {$/;"	s
HexStrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^    impl<'de, T> Visitor<'de> for HexStrVisitor<T>$/;"	c	function:deserialize
HexStrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^    struct HexStrVisitor<T>(PhantomData<T>);$/;"	s	function:deserialize
HidApi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl HidApi {$/;"	c
HidApi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^pub struct HidApi {$/;"	s
HidApiError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    HidApiError { message: String },$/;"	e	enum:HidError
HidApiErrorEmpty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    HidApiErrorEmpty,$/;"	e	enum:HidError
HidApiErrorEmptyWithCause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    HidApiErrorEmptyWithCause { cause: Box<dyn Error + Send + Sync> },$/;"	e	enum:HidError
HidApiLock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl Drop for HidApiLock {$/;"	c
HidApiLock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl HidApiLock {$/;"	c
HidApiLock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^struct HidApiLock;$/;"	s
HidDevice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^pub type HidDevice = c_void;$/;"	t
HidDevice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl Drop for HidDevice {$/;"	c
HidDevice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl HidDevice {$/;"	c
HidDevice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^pub struct HidDevice {$/;"	s
HidDevice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^unsafe impl Send for HidDevice {}$/;"	c
HidDeviceInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^pub struct HidDeviceInfo {$/;"	s
HidDeviceInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl HidDeviceInfo {$/;"	c
HidDeviceInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^pub struct HidDeviceInfo {$/;"	s
HidError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^impl Display for HidError {$/;"	c
HidError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^impl Error for HidError {$/;"	c
HidError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^pub enum HidError {$/;"	g
HidResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^pub type HidResult<T> = Result<T, HidError>;$/;"	t
Hmac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Hmac,$/;"	e	enum:MacSpec
Hmac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Hmac<D> {$/;"	c
Hmac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Mac for Hmac<D> {$/;"	c
Hmac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^pub struct Hmac<D> {$/;"	s
HmacExtension	/home/pme/src/rust/ctap/src/extensions/hmac.rs	/^pub trait HmacExtension {$/;"	i
I	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^impl<I> IteratorRandom for I where I: Iterator + Sized {}$/;"	c
I16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    I16(i16),$/;"	e	enum:Value
I16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        I16(i16),$/;"	e	enum:content::Content
I16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        I16(i16),$/;"	e	enum:content::Content
I32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    I32(i32),$/;"	e	enum:Value
I32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        I32(i32),$/;"	e	enum:content::Content
I32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        I32(i32),$/;"	e	enum:content::Content
I64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    I64(i64),$/;"	e	enum:Value
I64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        I64(i64),$/;"	e	enum:content::Content
I64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        I64(i64),$/;"	e	enum:content::Content
I8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    I8(i8),$/;"	e	enum:Value
I8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        I8(i8),$/;"	e	enum:content::Content
I8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        I8(i8),$/;"	e	enum:content::Content
INIT	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/init.rs	/^        static INIT: std::sync::Once = std::sync::ONCE_INIT;$/;"	v	function:init_once
INIT_LOGGER	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/lib.rs	/^static INIT_LOGGER: Once = ONCE_INIT;$/;"	v
IOError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    IOError,$/;"	e	enum:ReaderEofState
IV	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^static IV : [u64; 8] = [$/;"	v
IV	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^static IV : [u32; 8] = [$/;"	v
Ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^impl PartialEq<Symbol> for Ident {$/;"	c
Ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^impl<'a> PartialEq<Symbol> for &'a Ident {$/;"	c
Identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl Identifier {$/;"	c
Identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub enum Identifier {$/;"	g
IdentifierDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub trait IdentifierDeserializer<'de, E: Error> {$/;"	i
IgnoredAny	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^impl<'de> Deserialize<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^impl<'de> Visitor<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^pub struct IgnoredAny;$/;"	s
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^impl<Ok, Error> SerializeMap for Impossible<Ok, Error>$/;"	c
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^impl<Ok, Error> SerializeSeq for Impossible<Ok, Error>$/;"	c
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStructVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTuple for Impossible<Ok, Error>$/;"	c
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^pub struct Impossible<Ok, Error> {$/;"	s
InPlaceImplGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl<'a> ToTokens for InPlaceImplGenerics<'a> {$/;"	c
InPlaceImplGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^struct InPlaceImplGenerics<'a>(&'a Parameters);$/;"	s
InPlaceSeed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, 'de, T> DeserializeSeed<'de> for InPlaceSeed<'a, T>$/;"	c
InPlaceSeed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub struct InPlaceSeed<'a, T: 'a>(pub &'a mut T);$/;"	s
InPlaceTypeGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl<'a> ToTokens for InPlaceTypeGenerics<'a> {$/;"	c
InPlaceTypeGenerics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^struct InPlaceTypeGenerics<'a>(&'a Parameters);$/;"	s
InStructField	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    InStructField,$/;"	e	enum:HeaderState
Included	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Included,$/;"	e	enum:deserialize::Field
IncompleteSendError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    IncompleteSendError { sent: usize, all: usize },$/;"	e	enum:HidError
IndexVec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl From<Vec<u32>> for IndexVec {$/;"	c
IndexVec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl From<Vec<usize>> for IndexVec {$/;"	c
IndexVec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl IndexVec {$/;"	c
IndexVec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl PartialEq for IndexVec {$/;"	c
IndexVec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^pub enum IndexVec {$/;"	g
IndexVecIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl ExactSizeIterator for IndexVecIntoIter {}$/;"	c
IndexVecIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl Iterator for IndexVecIntoIter {$/;"	c
IndexVecIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^pub enum IndexVecIntoIter {$/;"	g
IndexVecIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl<'a> ExactSizeIterator for IndexVecIter<'a> {}$/;"	c
IndexVecIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^impl<'a> Iterator for IndexVecIter<'a> {$/;"	c
IndexVecIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^pub enum IndexVecIter<'a> {$/;"	g
Infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^        Infinity,$/;"	e	enum:tests::TestPoint
Init	/home/pme/src/rust/ctap/src/packet.rs	/^    Init = 0x06,$/;"	e	enum:CtapCommand
InitPacket	/home/pme/src/rust/ctap/src/packet.rs	/^impl InitPacket {$/;"	c
InitPacket	/home/pme/src/rust/ctap/src/packet.rs	/^pub struct InitPacket {$/;"	s
InitializationError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    InitializationError,$/;"	e	enum:HidError
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^struct Inner<F: ?Sized + Fail> {$/;"	s
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^            let inner: &'static mut Inner = mem::transmute(ptr);$/;"	v	method:ErrorImpl::from
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^struct Inner {$/;"	s
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^unsafe impl Send for Inner { }$/;"	c
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^unsafe impl Sync for Inner { }$/;"	c
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^            let inner: &'static mut Inner = mem::transmute(ptr);$/;"	v	method:Error::from
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^impl Inner {$/;"	c
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^struct Inner {$/;"	s
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^unsafe impl Send for Inner { }$/;"	c
Inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^unsafe impl Sync for Inner { }$/;"	c
InnerHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^struct InnerHeader {$/;"	s
InnerHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^struct InnerHeader {$/;"	s
InnerRaw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^struct InnerRaw<F> {$/;"	s
InnerRaw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^struct InnerRaw<F> {$/;"	s
Input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Input {$/;"	s	function:tests::flatten
Input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl <'a, 'b> PartialEq<&'b [u8]> for Input<'a> {$/;"	c
Input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl<'a, 'b> PartialEq<Input<'b>> for Input<'a> {$/;"	c
Input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl<'a> Input<'a> {$/;"	c
Input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct Input<'a> {$/;"	s
InsufficientData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^    InsufficientData$/;"	e	enum:ReadSliceError
Int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Int(Int),$/;"	e	enum:Key
Int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Int(Int),$/;"	e	enum:Value
Int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^impl Int {$/;"	c
Int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub enum Int {$/;"	g
Int16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Int16,$/;"	e	enum:Type
Int32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Int32,$/;"	e	enum:Type
Int64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Int64,$/;"	e	enum:Type
Int8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Int8,$/;"	e	enum:Type
IntOverflow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    IntOverflow(u64),$/;"	e	enum:DecodeError
Integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    Integer = 0x02,$/;"	e	enum:Tag
Integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Integer,$/;"	e	enum:Unsupported
Internal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    Internal { tag: String },$/;"	e	enum:TagType
InternalBacktrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^impl InternalBacktrace {$/;"	c
InternalBacktrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^impl fmt::Debug for InternalBacktrace {$/;"	c
InternalBacktrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^pub(super) struct InternalBacktrace {$/;"	s
InternallyTagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    InternallyTagged {$/;"	e	enum:StructVariant
InternallyTaggedUnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a> InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct InternallyTaggedUnitVisitor<'a> {$/;"	s	module:content
IntoDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait IntoDeserializer<'de, E: Error = value::Error> {$/;"	i
IntoDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for !$/;"	c
IntoDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for ()$/;"	c
IntoFloat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^pub(crate) trait IntoFloat {$/;"	i
IntoInnerError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl<W: std::any::Any> StdError for IntoInnerError<W> {$/;"	c
IntoInnerError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl<W> IntoInnerError<W> {$/;"	c
IntoInnerError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl<W> fmt::Debug for IntoInnerError<W> {$/;"	c
IntoInnerError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl<W> fmt::Display for IntoInnerError<W> {$/;"	c
IntoInnerError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^pub struct IntoInnerError<W> {$/;"	s
IntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    type IntoIter = ByteRecordIter<'r>;$/;"	t	implementation:ByteRecord
IntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    type IntoIter = StringRecordIter<'a>;$/;"	t	implementation:StringRecord
Inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^pub trait Inv {$/;"	i
Invalid	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    Invalid,$/;"	e	enum:FloatErrorKind
Invalid	/home/pme/src/rust/ctap/src/packet.rs	/^    Invalid = 0x00,$/;"	e	enum:CtapCommand
InvalidCmd	/home/pme/src/rust/ctap/src/packet.rs	/^    InvalidCmd = 0x01,$/;"	e	enum:CtapError
InvalidHexCharacter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^    InvalidHexCharacter { c: char, index: usize },$/;"	e	enum:FromHexError
InvalidKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    InvalidKey(Value),$/;"	e	enum:DecodeError
InvalidLen	/home/pme/src/rust/ctap/src/packet.rs	/^    InvalidLen = 0x03,$/;"	e	enum:CtapError
InvalidLength	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    InvalidLength,$/;"	e	enum:SymmetricCipherError
InvalidPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    InvalidPadding$/;"	e	enum:SymmetricCipherError
InvalidPar	/home/pme/src/rust/ctap/src/packet.rs	/^    InvalidPar = 0x02,$/;"	e	enum:CtapError
InvalidSeq	/home/pme/src/rust/ctap/src/packet.rs	/^    InvalidSeq = 0x04,$/;"	e	enum:CtapError
InvalidSequence	/home/pme/src/rust/ctap/src/error.rs	/^    InvalidSequence,$/;"	e	enum:FidoErrorKind
InvalidSimpleValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    InvalidSimpleValue(Simple),$/;"	e	enum:EncodeError
InvalidStringLength	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^    InvalidStringLength,$/;"	e	enum:FromHexError
InvalidTag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    InvalidTag(Value),$/;"	e	enum:DecodeError
InvalidUtf8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    InvalidUtf8(Utf8Error),$/;"	e	enum:DecodeError
InvalidUtf8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    InvalidUtf8(str::Utf8Error),$/;"	e	enum:DeserializeErrorKind
InvalidValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    InvalidValue(Value),$/;"	e	enum:EncodeError
InvalidZeroSizeData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    InvalidZeroSizeData,$/;"	e	enum:HidError
Io	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    Io(io::Error),$/;"	e	enum:ErrorKind
Io	/home/pme/src/rust/ctap/src/error.rs	/^    Io,$/;"	e	enum:FidoErrorKind
IoError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    IoError(io::Error),$/;"	e	enum:DecodeError
IoError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    IoError(io::Error),$/;"	e	enum:EncodeError
IoError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^    IoError(io::Error),$/;"	e	enum:ReadSliceError
IpAddr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::IpAddr {$/;"	c
IpAddr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for net::IpAddr {$/;"	c
IpAddrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            impl<'de> Visitor<'de> for IpAddrVisitor {$/;"	c	method:IpAddr::deserialize
IpAddrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            struct IpAddrVisitor;$/;"	s	method:IpAddr::deserialize
Ipv4Addr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for net::Ipv4Addr {$/;"	c
Ipv6Addr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for net::Ipv6Addr {$/;"	c
Isaac64Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl Isaac64Rng {$/;"	c
Isaac64Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for Isaac64Rng {$/;"	c
Isaac64Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl SeedableRng for Isaac64Rng {$/;"	c
Isaac64Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct Isaac64Rng(rand_isaac::Isaac64Rng);$/;"	s
IsaacRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl IsaacRng {$/;"	c
IsaacRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for IsaacRng {$/;"	c
IsaacRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl SeedableRng for IsaacRng {$/;"	c
IsaacRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct IsaacRng(rand_isaac::IsaacRng);$/;"	s
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    type Item = DecodeResult<String>;$/;"	t	implementation:TextIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    type Item = DecodeResult<Vec<u8>>;$/;"	t	implementation:BytesIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    type Item = &'r [u8];$/;"	t	implementation:ByteRecord
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    type Item = &'r [u8];$/;"	t	implementation:ByteRecordIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    type Item = Result<ByteRecord>;$/;"	t	implementation:ByteRecordsIntoIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    type Item = Result<ByteRecord>;$/;"	t	implementation:ByteRecordsIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    type Item = Result<D>;$/;"	t	implementation:DeserializeRecordsIntoIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    type Item = Result<D>;$/;"	t	implementation:DeserializeRecordsIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    type Item = Result<StringRecord>;$/;"	t	implementation:StringRecordsIntoIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    type Item = Result<StringRecord>;$/;"	t	implementation:StringRecordsIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    type Item = &'a str;$/;"	t	implementation:StringRecord
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    type Item = &'r str;$/;"	t	implementation:StringRecordIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    type Item = FieldWithDefaults<'a>;$/;"	t	implementation:FieldIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    type Item = &'f dyn Fail;$/;"	t	implementation:Causes
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    type Item = char;$/;"	t	implementation:BytesToHexChars
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    type Item = T;$/;"	t
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    type Item = <R as BlockRngCore>::Item;$/;"	t
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    type Item = usize;$/;"	t	implementation:IndexVecIntoIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    type Item = usize;$/;"	t	implementation:IndexVecIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        type Item = I::Item;$/;"	t	implementation:test::ChunkHintedIterator
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        type Item = I::Item;$/;"	t	implementation:test::UnhintedIterator
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        type Item = I::Item;$/;"	t	implementation:test::WindowHintedIterator
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    type Item = &'a T;$/;"	t	implementation:SliceChooseIter
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    type Item = T;$/;"	t	implementation:T
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    type Item;$/;"	t	interface:SliceRandom
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    type Item;$/;"	t	interface:BlockRngCore
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        type Item = Fe;$/;"	t	implementation:tests::CurveGen
Item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    type Item = T;$/;"	t
IteratorRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^pub trait IteratorRandom: Iterator + Sized {$/;"	i
Jitter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    Jitter(Jitter),$/;"	e	enum:Source
Jitter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^impl EntropySource for Jitter {$/;"	c
Jitter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^pub struct Jitter(rngs::JitterRng);$/;"	s
Jitter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^type Jitter = NoSource;$/;"	t
JitterRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl CryptoRng for JitterRng {}$/;"	c
JitterRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl JitterRng {$/;"	c
JitterRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for JitterRng {$/;"	c
JitterRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct JitterRng(rngs::JitterRng);$/;"	s
KdfSpec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum KdfSpec {$/;"	g
KebabCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    KebabCase,$/;"	e	enum:RenameRule
Keccak224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak224,$/;"	e	enum:Sha3Mode
Keccak256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak256,$/;"	e	enum:Sha3Mode
Keccak384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak384,$/;"	e	enum:Sha3Mode
Keccak512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak512,$/;"	e	enum:Sha3Mode
Keepalive	/home/pme/src/rust/ctap/src/packet.rs	/^    Keepalive = 0x3b,$/;"	e	enum:CtapCommand
Kernel	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<R: ReadBytesExt + ReadSlice> Kernel<R> {$/;"	c
Kernel	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<R: ReadBytesExt> Kernel<R> {$/;"	c
Kernel	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub struct Kernel<R> {$/;"	s
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^impl Key {$/;"	c
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub enum Key {$/;"	g
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^impl Key {$/;"	c
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^struct Key {$/;"	s
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^impl Key {$/;"	c
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^struct Key {$/;"	s
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^pub type Key = [u32; KEY_LEN_IN_BYTES \/ 4];$/;"	t
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^impl Key {$/;"	c
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^impl signature::KeyPairImpl for Key {$/;"	c
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^pub struct Key {$/;"	s
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^impl Key {$/;"	c
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^pub struct Key {$/;"	s
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^impl Key {$/;"	c
Key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^pub struct Key {$/;"	s
KeyAndNonceBytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^type KeyAndNonceBytes = [u8; 2 * BLOCK_LEN];$/;"	t
KeyBytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^type KeyBytes = [u8; BLOCK_LEN];$/;"	t
KeyPair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^impl<'a> KeyPair {$/;"	c
KeyPair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^pub struct KeyPair {$/;"	s
KeyPair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^pub struct KeyPair {$/;"	s
KeyPair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^impl KeyPair {$/;"	c
KeyPair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^pub struct KeyPair {$/;"	s
KeyPair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^impl KeyPair {$/;"	c
KeyPair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub struct KeyPair {$/;"	s
KeyPairImpl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub(crate) trait KeyPairImpl: core::fmt::Debug + Send + 'static {$/;"	i
KeySize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub enum KeySize {$/;"	g
KeySize128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize128,$/;"	e	enum:KeySize
KeySize192	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize192,$/;"	e	enum:KeySize
KeySize256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize256$/;"	e	enum:KeySize
KeyType	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^enum KeyType {$/;"	g
KeyType	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^enum KeyType {$/;"	g
KeyType	/home/pme/src/rust/ctap/src/error.rs	/^    KeyType,$/;"	e	enum:FidoErrorKind
L	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^static L: [u8; 32] =$/;"	v
LE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub type LE = LittleEndian;$/;"	t
LESSER	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static LESSER: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_less_than_limb_constant_time
LIMBS_add_mod	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn LIMBS_add_mod($/;"	f
LIMBS_add_mod	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn LIMBS_add_mod($/;"	f
LIMBS_are_even	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn LIMBS_are_even(a: *const Limb, num_limbs: c::size_t) -> LimbMask;$/;"	f
LIMBS_are_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn LIMBS_are_zero(a: *const Limb, num_limbs: c::size_t) -> LimbMask;$/;"	f
LIMBS_equal_limb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn LIMBS_equal_limb(a: *const Limb, b: Limb, num_limbs: c::size_t) -> LimbMask;$/;"	f
LIMBS_less_than	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn LIMBS_less_than(a: *const Limb, b: *const Limb, num_limbs: c::size_t) -> LimbMask;$/;"	f
LIMBS_less_than_limb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn LIMBS_less_than_limb(a: *const Limb, b: Limb, num_limbs: c::size_t) -> LimbMask;$/;"	f
LIMBS_reduce_once	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn LIMBS_reduce_once(r: *mut Limb, m: *const Limb, num_limbs: c::size_t);$/;"	f
LIMBS_shl_mod	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn LIMBS_shl_mod($/;"	f
LIMBS_sub_mod	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn LIMBS_sub_mod($/;"	f
LIMB_shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn LIMB_shl(a: Limb, shift: c::size_t) -> Limb;$/;"	f
LONG_ITEM_ENCODING	/home/pme/src/rust/ctap/src/hid_linux.rs	/^static LONG_ITEM_ENCODING: u8 = 0xfe;$/;"	v
LONG_ITEM_ENCODING	/home/pme/src/rust/ctap/src/hid_macwin.rs	/^static LONG_ITEM_ENCODING: u8 = 0xfe;$/;"	v
Label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        enum Label {$/;"	g	function:tests::enum_label_simple_tagged
Large	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    Large(GammaLargeShape),$/;"	e	enum:GammaRepr
Large	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    Large {$/;"	e	enum:UniformDurationMode
LastInput	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    LastInput,$/;"	e	enum:BlockEngineState
LastInput2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    LastInput2,$/;"	e	enum:BlockEngineState
Limb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub type Limb = u32;$/;"	t
Limb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub type Limb = u64;$/;"	t
LimbMask	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub enum LimbMask {$/;"	g
LittleEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    impl Sealed for super::LittleEndian {}$/;"	c	module:private
LittleEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^impl ByteOrder for LittleEndian {$/;"	c
LittleEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^impl Default for LittleEndian {$/;"	c
LittleEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub enum LittleEndian {}$/;"	g
Lock	/home/pme/src/rust/ctap/src/packet.rs	/^    Lock = 0x04,$/;"	e	enum:CtapCommand
LockRequired	/home/pme/src/rust/ctap/src/packet.rs	/^    LockRequired = 0x0A,$/;"	e	enum:CtapError
LogNormal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^impl Distribution<f64> for LogNormal {$/;"	c
LogNormal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^impl LogNormal {$/;"	c
LogNormal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^pub struct LogNormal {$/;"	s
Longhand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    Longhand(FieldLevelSetter),$/;"	e	enum:FieldSetterMeta
LowerCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    LowerCase,$/;"	e	enum:RenameRule
M	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^                unsafe impl NotMuchSmallerModulus<MM> for M {}$/;"	c	function:tests::test_elem_reduced
M	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^                unsafe impl SmallerModulus<MM> for M {}$/;"	c	function:tests::test_elem_reduced
M	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    struct M {}$/;"	s	module:tests
MM	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^                struct MM {}$/;"	s	function:tests::test_elem_reduced
Mac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^pub trait Mac {$/;"	i
MacResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl Eq for MacResult { }$/;"	c
MacResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl MacResult {$/;"	c
MacResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl PartialEq for MacResult {$/;"	c
MacResult	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^pub struct MacResult {$/;"	s
MacSpec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum MacSpec {$/;"	g
MakeCredential	/home/pme/src/rust/ctap/src/cbor.rs	/^    MakeCredential(MakeCredentialRequest<'a>),$/;"	e	enum:Request
MakeCredential	/home/pme/src/rust/ctap/src/cbor.rs	/^    MakeCredential(MakeCredentialResponse),$/;"	e	enum:Response
MakeCredentialRequest	/home/pme/src/rust/ctap/src/cbor.rs	/^impl<'a> MakeCredentialRequest<'a> {$/;"	c
MakeCredentialRequest	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct MakeCredentialRequest<'a> {$/;"	s
MakeCredentialResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^impl MakeCredentialResponse {$/;"	c
MakeCredentialResponse	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct MakeCredentialResponse {$/;"	s
Map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Map(BTreeMap<Key, Value>),$/;"	e	enum:Value
Map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Map,$/;"	e	enum:Unexpected
Map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Map(Vec<(Content<'de>, Content<'de>)>),$/;"	e	enum:content::Content
Map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Map(Vec<(Content, Content)>),$/;"	e	enum:content::Content
MapAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait MapAccess<'de> {$/;"	i
MapAccessDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for MapAccessDeserializer<A>$/;"	c
MapAccessDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, A> de::EnumAccess<'de> for MapAccessDeserializer<A>$/;"	c
MapAccessDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<A> MapAccessDeserializer<A> {$/;"	c
MapAccessDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct MapAccessDeserializer<A> {$/;"	s
MapAsEnum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    impl<'de, A> VariantAccess<'de> for MapAsEnum<A>$/;"	c	module:private
MapAsEnum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub struct MapAsEnum<A> {$/;"	s	module:private
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, E> Clone for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, E> Debug for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, E> MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, E> de::Deserializer<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, E> de::MapAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, E> de::SeqAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct MapDeserializer<'de, I, E>$/;"	s
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> de::MapAccess<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct MapDeserializer<'de, E>$/;"	s	module:content
MapRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a, 'de, E> MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> de::MapAccess<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct MapRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Mark	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct Mark {$/;"	s
MarkWriteAndFlush	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^        impl MarkWriteAndFlush {$/;"	c	function:tests::full_buffer_should_not_flush_underlying
MarkWriteAndFlush	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^        impl Write for MarkWriteAndFlush {$/;"	c	function:tests::full_buffer_should_not_flush_underlying
MarkWriteAndFlush	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^        struct MarkWriteAndFlush(Vec<u8>);$/;"	s	function:tests::full_buffer_should_not_flush_underlying
Mask	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    type Mask;$/;"	t	interface:FloatSIMDUtils
Match	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^impl ToTokens for Match {$/;"	c
Match	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^pub struct Match(pub Fragment);$/;"	s
MaybeResolved	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^struct MaybeResolved {$/;"	s
MaybeResolved	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^unsafe impl Send for MaybeResolved {}$/;"	c
MaybeResolved	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^unsafe impl Sync for MaybeResolved {}$/;"	c
Md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Md5,$/;"	e	enum:DigestSpec
Md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Digest for Md5 {$/;"	c
Md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Md5 {$/;"	c
Md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^pub struct Md5 {$/;"	s
Md5State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Md5State {$/;"	c
Md5State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^struct Md5State {$/;"	s
Mechanism	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    enum Mechanism {$/;"	g	module:sysrand_or_urandom
Medium	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    Medium {$/;"	e	enum:UniformDurationMode
Message	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    Message(String),$/;"	e	enum:DeserializeErrorKind
Mime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Mime,$/;"	e	enum:Tag
MissingFieldDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>$/;"	c	function:missing_field
MissingFieldDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);$/;"	s	function:missing_field
Modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^struct Modulus {$/;"	s
Modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl core::fmt::Debug for Modulus<super::N> {$/;"	c
Modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> Modulus<M> {$/;"	c
Modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub struct Modulus<M> {$/;"	s
Msg	/home/pme/src/rust/ctap/src/packet.rs	/^    Msg = 0x03,$/;"	e	enum:CtapCommand
MsgTimeout	/home/pme/src/rust/ctap/src/packet.rs	/^    MsgTimeout = 0x05,$/;"	e	enum:CtapError
MulAdd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^pub trait MulAdd<A = Self, B = Self> {$/;"	i
MulAddAssign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^pub trait MulAddAssign<A = Self, B = Self> {$/;"	i
Mutex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for Mutex<T>$/;"	c
MyF32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        impl SampleUniform for MyF32 {$/;"	c	function:tests::test_custom_uniform
MyF32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        struct MyF32 {$/;"	s	function:tests::test_custom_uniform
N	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub enum N {}$/;"	g
N	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^                struct N {}$/;"	s	function:tests::test_elem_reduced_once
N	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^pub enum N {}$/;"	g
N0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl From<u64> for N0 {$/;"	c
N0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^struct N0([limb::Limb; 2]);$/;"	s
NA	/home/pme/src/rust/ctap/src/packet.rs	/^    NA = 0x0B,$/;"	e	enum:CtapError
NONZEROES	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    static NONZEROES: &[&[Limb]] = &[$/;"	v	module:tests
N_RR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^        static N_RR: Scalar<Unencoded> = Scalar {$/;"	v	function:p256_scalar_inv_to_mont::to_mont
N_RR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^        static N_RR: Scalar<Unencoded> = Scalar {$/;"	v	function:p384_scalar_inv_to_mont::to_mont
Name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl Name {$/;"	c
Name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub struct Name {$/;"	s
Nanos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Nanos,$/;"	e	enum:Duration::deserialize::Field
Nanos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Nanos,$/;"	e	enum:SystemTime::deserialize::Field
NativeEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub type NativeEndian = BigEndian;$/;"	t
NativeEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub type NativeEndian = LittleEndian;$/;"	t
Necessary	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    Necessary,$/;"	e	enum:QuoteStyle
NeedInput	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    NeedInput,$/;"	e	enum:BlockEngineState
NeedOutput	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    NeedOutput,$/;"	e	enum:BlockEngineState
Neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Neg(u64),$/;"	e	enum:Int
NegativeBignum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    NegativeBignum,$/;"	e	enum:Tag
NegativeWeight	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    NegativeWeight,$/;"	e	enum:WeightedError
Nested	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        struct Nested {$/;"	s	function:tests::struct_headers_nested
NetworkEndian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^pub type NetworkEndian = BigEndian;$/;"	t
Never	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    Never,$/;"	e	enum:QuoteStyle
NeverDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for NeverDeserializer<E>$/;"	c
NeverDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct NeverDeserializer<E> {$/;"	s
Newtype	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Newtype(Box<Content<'de>>),$/;"	e	enum:content::Content
Newtype	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    Newtype,$/;"	e	enum:Style
NewtypeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    NewtypeStruct,$/;"	e	enum:Unexpected
NewtypeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        NewtypeStruct(&'static str, Box<Content>),$/;"	e	enum:content::Content
NewtypeVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    NewtypeVariant,$/;"	e	enum:Unexpected
NewtypeVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        NewtypeVariant(&'static str, u32, &'static str, Box<Content>),$/;"	e	enum:content::Content
No	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    No,$/;"	e	enum:AllowZero
No	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    No,$/;"	e	enum:Untagged
No	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    No,$/;"	e	enum:Identifier
NoItem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    NoItem,$/;"	e	enum:WeightedError
NoPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    NoPadding,$/;"	e	enum:BlodeModePaddingSpec
NoPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for NoPadding {$/;"	c
NoPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct NoPadding;$/;"	s
NoSource	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^impl EntropySource for NoSource {$/;"	c
NoSource	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^struct NoSource;$/;"	s
NonNumeric	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    NonNumeric,$/;"	e	enum:QuoteStyle
Nonce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^type Nonce = [u32; BLOCK_LEN \/ 4];$/;"	t
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    None,$/;"	e	enum:Trim
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    None,$/;"	e	enum:HeaderState
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    None,$/;"	e	enum:WcharString
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    None,$/;"	e	enum:Source
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        None,$/;"	e	enum:content::Content
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        None,$/;"	e	enum:content::Content
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    None,$/;"	e	enum:Default
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    None,$/;"	e	enum:TagType
None	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    None,$/;"	e	enum:RenameRule
Nonnegative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl Nonnegative {$/;"	c
Nonnegative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub struct Nonnegative {$/;"	s
Normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^impl Distribution<f64> for Normal {$/;"	c
Normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^impl Normal {$/;"	c
Normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^pub struct Normal {$/;"	s
NotEof	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    NotEof,$/;"	e	enum:ReaderEofState
NotMuchSmallerModulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub unsafe trait NotMuchSmallerModulus<L>: SmallerModulus<L> {}$/;"	i
NotReady	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    NotReady,$/;"	e	enum:ErrorKind
Null	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Null,$/;"	e	enum:Type
Null	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Null,$/;"	e	enum:Value
Null	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    Null = 0x05,$/;"	e	enum:Tag
Num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub trait Num: PartialEq + Zero + One + NumOps {$/;"	i
NumAssign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub trait NumAssign: Num + NumAssignOps {}$/;"	i
NumAssignOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub trait NumAssignOps<Rhs = Self>:$/;"	i
NumAssignRef	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub trait NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self> {}$/;"	i
NumCast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^pub trait NumCast: Sized + ToPrimitive {$/;"	i
NumOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub trait NumOps<Rhs = Self, Output = Self>:$/;"	i
NumRef	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub trait NumRef: Num + for<'r> NumOps<&'r Self> {}$/;"	i
Number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            Number(i64),$/;"	e	enum:tests::enum_untagged::Boolish
ODDS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static ODDS: &[&[Limb]] = &[$/;"	v	function:tests::test_limbs_are_even
OID	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    OID = 0x06,$/;"	e	enum:Tag
ONE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^static ONE: Elem<Unencoded> = Elem {$/;"	v
Object	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Object,$/;"	e	enum:Type
OctetString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    OctetString = 0x04,$/;"	e	enum:Tag
OddLength	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^    OddLength,$/;"	e	enum:FromHexError
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type Ok = ();$/;"	t	implementation:SeHeader
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type Ok = ();$/;"	t	implementation:SeRecord
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Ok,$/;"	e	enum:deserialize::Field
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type Ok = Content;$/;"	t	module:content
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type Ok = M::Ok;$/;"	t	module:content
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type Ok = ();$/;"	t
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type Ok = S::Ok;$/;"	t
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type Ok = ();$/;"	t	implementation:Formatter
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    type Ok = Ok;$/;"	t
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeMap
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeSeq
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStruct
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStructVariant
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTuple
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleStruct
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleVariant
Ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:Serializer
One	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^pub trait One: Sized + Mul<Self, Output = Self> {$/;"	i
One	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    One(Exp),$/;"	e	enum:GammaRepr
One	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M, E> AsRef<Elem<M, E>> for One<M, E> {$/;"	c
One	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> One<M, RR> {$/;"	c
One	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub struct One<M, E>(Elem<M, E>);$/;"	s
OneOf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl Display for OneOf {$/;"	c
OneOf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^struct OneOf {$/;"	s
Opaque	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^struct Opaque([u8; OPAQUE_LEN]);$/;"	s
Open01	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^pub struct Open01;$/;"	s
OpenClosed01	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^pub struct OpenClosed01;$/;"	s
OpenHidDeviceError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    OpenHidDeviceError,$/;"	e	enum:HidError
OpenHidDeviceWithDeviceInfoError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    OpenHidDeviceWithDeviceInfoError { device_info: Box<HidDeviceInfo> },$/;"	e	enum:HidError
OpeningKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^impl OpeningKey {$/;"	c
OpeningKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^pub struct OpeningKey {$/;"	s
OpeningKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^impl OpeningKey {$/;"	c
OpeningKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^pub struct OpeningKey {$/;"	s
Option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Option<T>$/;"	c
Option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Option,$/;"	e	enum:Unexpected
Option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for Option<T>$/;"	c
OptionVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for OptionVisitor<T>$/;"	c
OptionVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct OptionVisitor<T> {$/;"	s
Optional	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Optional,$/;"	e	enum:Unsupported
Options	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl FlagVisibility for Options {$/;"	c
Options	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl Options {$/;"	c
Options	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct Options {$/;"	s
OptionsInfo	/home/pme/src/rust/ctap/src/cbor.rs	/^impl Default for OptionsInfo {$/;"	c
OptionsInfo	/home/pme/src/rust/ctap/src/cbor.rs	/^impl OptionsInfo {$/;"	c
OptionsInfo	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct OptionsInfo {$/;"	s
Os	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    Os(Os),$/;"	e	enum:Source
Os	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^impl EntropySource for Os {$/;"	c
Os	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^pub struct Os(rngs::OsRng);$/;"	s
Os	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^type Os = NoSource;$/;"	t
OsRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl CryptoRng for OsRng {}$/;"	c
OsRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl OsRng {$/;"	c
OsRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for OsRng {$/;"	c
OsRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct OsRng(rngs::OsRng);$/;"	s
OsStr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for OsStr {$/;"	c
OsString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for OsString {$/;"	c
OsString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for OsString {$/;"	c
OsStringVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Visitor<'de> for OsStringVisitor {$/;"	c
OsStringVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct OsStringVisitor;$/;"	s
Other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    Other(Box<Error + Send + Sync>)$/;"	e	enum:DecodeError
Other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    Other(Box<Error + Send + Sync>)$/;"	e	enum:EncodeError
Other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Other(&'a str),$/;"	e	enum:Unexpected
Other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Other,$/;"	e	enum:content::TagContentOtherField
Other	/home/pme/src/rust/ctap/src/packet.rs	/^    Other = 0x7F,$/;"	e	enum:CtapError
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    type Output = [u8];$/;"	t	implementation:ByteRecord
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    type Output = str;$/;"	t	implementation:StringRecord
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^    type Output = f32;$/;"	t	implementation:f32
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^    type Output = f64;$/;"	t	implementation:f64
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^    type Output;$/;"	t	interface:Inv
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    type Output = Self;$/;"	t	implementation:f32
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    type Output = Self;$/;"	t	implementation:f64
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    type Output;$/;"	t	interface:MulAdd
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^    type Output;$/;"	t	interface:Pow
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    type Output;$/;"	t	interface:WideningMultiply
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = <(RInverse, RR) as ProductEncoding>::Output;$/;"	t	implementation:RInverse
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = <(Unencoded, RR) as ProductEncoding>::Output;$/;"	t	implementation:Unencoded
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = <<E as ReductionEncoding>::Output as ReductionEncoding>::Output;$/;"	t
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = E::Output;$/;"	t	implementation:E
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = E;$/;"	t	implementation:E
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = R;$/;"	t	implementation:RR
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = RInverse;$/;"	t	implementation:Unencoded
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output = Unencoded;$/;"	t	implementation:R
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output: Encoding;$/;"	t	interface:ProductEncoding
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^    type Output: Encoding;$/;"	t	interface:ReductionEncoding
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^type Output = [u64; MAX_OUTPUT_LEN \/ 8];$/;"	t
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    type Output = u32x4;$/;"	t	implementation:u32x4
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = Fe;$/;"	t	implementation:Fe
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = GeP1P1;$/;"	t	implementation:GeP3
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    type Output = Gf128;$/;"	t	implementation:Gf128
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u32x4;$/;"	t	implementation:fake::u32x4
Output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u64x2;$/;"	t	implementation:fake::u64x2
OverflowingAdd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^pub trait OverflowingAdd: Sized + Add<Self, Output = Self> {$/;"	i
OverflowingMul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^pub trait OverflowingMul: Sized + Mul<Self, Output = Self> {$/;"	i
OverflowingSub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^pub trait OverflowingSub: Sized + Sub<Self, Output = Self> {$/;"	i
OwnedReadBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedReadBuffer {$/;"	c
OwnedReadBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl ReadBuffer for OwnedReadBuffer {$/;"	c
OwnedReadBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedReadBuffer {$/;"	s
OwnedWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedWriteBuffer {$/;"	c
OwnedWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl WriteBuffer for OwnedWriteBuffer {$/;"	c
OwnedWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedWriteBuffer {$/;"	s
P	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^enum P {}$/;"	g
P	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl Prime for P {}$/;"	c
P	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::NotMuchSmallerModulus<N> for P {}$/;"	c
P	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<N> for P {}$/;"	c
P256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    P256,$/;"	e	enum:CurveID
P256Key	/home/pme/src/rust/ctap/src/cbor.rs	/^impl P256Key {$/;"	c
P256Key	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct P256Key {$/;"	s
P384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    P384,$/;"	e	enum:CurveID
P384_GENERATOR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    static P384_GENERATOR: (Elem<R>, Elem<R>) = ($/;"	v	function:p384_point_mul_base_impl
PADDING	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305.rs	/^        static PADDING: [u8; 16] = [0u8; 16];$/;"	v	function:poly1305_update_padded_16
PKCS1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl ::private::Sealed for PKCS1 {}$/;"	c
PKCS1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl RSAEncoding for PKCS1 {$/;"	c
PKCS1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl RSAPadding for PKCS1 {$/;"	c
PKCS1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl RSAVerification for PKCS1 {$/;"	c
PKCS1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^pub struct PKCS1 {$/;"	s
PKCS8_TEMPLATE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^static PKCS8_TEMPLATE: pkcs8::Template = pkcs8::Template {$/;"	v
PRIVATE_KEY_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^pub static PRIVATE_KEY_OPS: PrivateKeyOps = PrivateKeyOps {$/;"	v
PRIVATE_KEY_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^pub static PRIVATE_KEY_OPS: PrivateKeyOps = PrivateKeyOps {$/;"	v
PRIVATE_SCALAR_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^pub static PRIVATE_SCALAR_OPS: PrivateScalarOps = PrivateScalarOps {$/;"	v
PRIVATE_SCALAR_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^pub static PRIVATE_SCALAR_OPS: PrivateScalarOps = PrivateScalarOps {$/;"	v
PSS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl ::private::Sealed for PSS {}$/;"	c
PSS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl RSAEncoding for PSS {$/;"	c
PSS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl RSAPadding for PSS {$/;"	c
PSS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl RSAVerification for PSS {$/;"	c
PSS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^pub struct PSS {$/;"	s
PSSMetrics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^impl PSSMetrics {$/;"	c
PSSMetrics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^struct PSSMetrics {$/;"	s
PUBLIC_KEY_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^pub static PUBLIC_KEY_OPS: PublicKeyOps = PublicKeyOps {$/;"	v
PUBLIC_KEY_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^pub static PUBLIC_KEY_OPS: PublicKeyOps = PublicKeyOps {$/;"	v
PUBLIC_SCALAR_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^pub static PUBLIC_SCALAR_OPS: PublicScalarOps = PublicScalarOps {$/;"	v
PUBLIC_SCALAR_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^pub static PUBLIC_SCALAR_OPS: PublicScalarOps = PublicScalarOps {$/;"	v
Pad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    Pad = 1,$/;"	e	enum:Pad
Pad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^enum Pad {$/;"	g
PaddingProcessor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub trait PaddingProcessor {$/;"	i
Pair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub trait Pair {$/;"	i	module:private
PairDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, A, B, E> de::Deserializer<'de> for PairDeserializer<A, B, E>$/;"	c
PairDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^struct PairDeserializer<A, B, E>(A, B, PhantomData<E>);$/;"	s
PairVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, A, B, E> de::SeqAccess<'de> for PairVisitor<A, B, E>$/;"	c
PairVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^struct PairVisitor<A, B, E>(Option<A>, Option<B>, PhantomData<E>);$/;"	s
Parameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^impl Parameters {$/;"	c
Parameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^struct Parameters {$/;"	s
Parameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^impl Parameters {$/;"	c
Parameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^struct Parameters {$/;"	s
Pareto	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^impl Distribution<f64> for Pareto {$/;"	c
Pareto	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^impl Pareto {$/;"	c
Pareto	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^pub struct Pareto {$/;"	s
ParseBool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    ParseBool(str::ParseBoolError),$/;"	e	enum:DeserializeErrorKind
ParseCtap	/home/pme/src/rust/ctap/src/error.rs	/^    ParseCtap,$/;"	e	enum:FidoErrorKind
ParseFloat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    ParseFloat(num::ParseFloatError),$/;"	e	enum:DeserializeErrorKind
ParseFloatError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl fmt::Display for ParseFloatError {$/;"	c
ParseFloatError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub struct ParseFloatError {$/;"	s
ParseInt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    ParseInt(num::ParseIntError),$/;"	e	enum:DeserializeErrorKind
ParsePublic	/home/pme/src/rust/ctap/src/error.rs	/^    ParsePublic,$/;"	e	enum:FidoErrorKind
PartialModulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<'a, M> PartialModulus<'a, M> {$/;"	c
PartialModulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^struct PartialModulus<'a, M> {$/;"	s
PascalCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    PascalCase,$/;"	e	enum:RenameRule
Path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a Path {$/;"	c
Path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for Path {$/;"	c
Path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    Path(syn::ExprPath),$/;"	e	enum:Default
Path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^impl PartialEq<Symbol> for Path {$/;"	c
Path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^impl<'a> PartialEq<Symbol> for &'a Path {$/;"	c
PathBuf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for PathBuf {$/;"	c
PathBuf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for PathBuf {$/;"	c
PathBufVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Visitor<'de> for PathBufVisitor {$/;"	c
PathBufVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct PathBufVisitor;$/;"	s
PathVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'a> Visitor<'a> for PathVisitor {$/;"	c
PathVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct PathVisitor;$/;"	s
Pbkdf2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Pbkdf2,$/;"	e	enum:KdfSpec
PhantomData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for PhantomData<T> {$/;"	c
PhantomData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<'de, T> DeserializeSeed<'de> for PhantomData<T>$/;"	c
PhantomData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for PhantomData<T> {$/;"	c
PhantomDataVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T: ?Sized> Visitor<'de> for PhantomDataVisitor<T> {$/;"	c
PhantomDataVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct PhantomDataVisitor<T: ?Sized> {$/;"	s
PinRequired	/home/pme/src/rust/ctap/src/error.rs	/^    PinRequired,$/;"	e	enum:FidoErrorKind
PinToken	/home/pme/src/rust/ctap/src/crypto.rs	/^impl PinToken {$/;"	c
PinToken	/home/pme/src/rust/ctap/src/crypto.rs	/^pub struct PinToken(hmac::SigningKey);$/;"	s
Ping	/home/pme/src/rust/ctap/src/packet.rs	/^    Ping = 0x01,$/;"	e	enum:CtapCommand
Pkcs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Pkcs,$/;"	e	enum:BlodeModePaddingSpec
PkcsPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for PkcsPadding {$/;"	c
PkcsPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct PkcsPadding;$/;"	s
Point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^impl Point {$/;"	c
Point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub struct Point {$/;"	s
Point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^impl Point {$/;"	c
Point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub struct Point {$/;"	s
Poisson	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^impl Distribution<u64> for Poisson {$/;"	c
Poisson	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^impl Poisson {$/;"	c
Poisson	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^pub struct Poisson {$/;"	s
Poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^impl Mac for Poly1305 {$/;"	c
Poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^impl Poly1305 {$/;"	c
Poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^pub struct Poly1305 {$/;"	s
Pool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Pool {$/;"	c
Pool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^struct Pool {$/;"	s
Pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Pos(u64)$/;"	e	enum:Int
Position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^impl Position {$/;"	c
Position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^pub struct Position {$/;"	s
Pow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^pub trait Pow<RHS> {$/;"	i
Prefix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^type Prefix = [u8; PREFIX_LEN];$/;"	t
PrimInt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^pub trait PrimInt:$/;"	i
Prime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub unsafe trait Prime {}$/;"	i
PrivateExponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M: Prime> PrivateExponent<M> {$/;"	c
PrivateExponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl<M> PrivateExponent<M> {$/;"	c
PrivateExponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub struct PrivateExponent<M> {$/;"	s
PrivateKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^type PrivateKey = [u8; PRIVATE_KEY_LEN];$/;"	t
PrivateKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^impl PrivateKey {$/;"	c
PrivateKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^pub struct PrivateKey {$/;"	s
PrivateKeyOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^impl PrivateKeyOps {$/;"	c
PrivateKeyOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub struct PrivateKeyOps {$/;"	s
PrivatePrime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^impl<M: Prime + Clone> PrivatePrime<M> {$/;"	c
PrivatePrime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^struct PrivatePrime<M: Prime> {$/;"	s
PrivateScalarOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub struct PrivateScalarOps {$/;"	s
ProductEncoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^pub trait ProductEncoding {$/;"	i
Properties	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Properties {$/;"	s	function:tests::flatten
PublicExponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^impl PublicExponent {$/;"	c
PublicExponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub struct PublicExponent(u64);$/;"	s
PublicKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^type PublicKey = [u8; PUBLIC_KEY_LEN];$/;"	t
PublicKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^type PublicKey = [u8; PUBLIC_KEY_LEN];$/;"	t
PublicKeyCredentialDescriptor	/home/pme/src/rust/ctap/src/cbor.rs	/^impl PublicKeyCredentialDescriptor {$/;"	c
PublicKeyCredentialDescriptor	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct PublicKeyCredentialDescriptor {$/;"	s
PublicKeyCredentialRpEntity	/home/pme/src/rust/ctap/src/cbor.rs	/^impl<'a> PublicKeyCredentialRpEntity<'a> {$/;"	c
PublicKeyCredentialRpEntity	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct PublicKeyCredentialRpEntity<'a> {$/;"	s
PublicKeyCredentialUserEntity	/home/pme/src/rust/ctap/src/cbor.rs	/^impl<'a> PublicKeyCredentialUserEntity<'a> {$/;"	c
PublicKeyCredentialUserEntity	/home/pme/src/rust/ctap/src/cbor.rs	/^pub struct PublicKeyCredentialUserEntity<'a> {$/;"	s
PublicKeyOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^impl PublicKeyOps {$/;"	c
PublicKeyOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub struct PublicKeyOps {$/;"	s
PublicScalarOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^impl PublicScalarOps {$/;"	c
PublicScalarOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub struct PublicScalarOps {$/;"	s
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub enum Q {}$/;"	g
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^enum Q {}$/;"	g
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl Prime for Q {}$/;"	c
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::NotMuchSmallerModulus<QQ> for Q {}$/;"	c
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::SlightlySmallerModulus<P> for Q {}$/;"	c
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<N> for Q {}$/;"	c
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<P> for Q {}$/;"	c
Q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<QQ> for Q {}$/;"	c
QQ	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^                struct QQ {}$/;"	s	function:tests::test_elem_reduced_once
QQ	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^                unsafe impl SlightlySmallerModulus<N> for QQ {}$/;"	c	function:tests::test_elem_reduced_once
QQ	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^                unsafe impl SmallerModulus<N> for QQ {}$/;"	c	function:tests::test_elem_reduced_once
QQ	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^enum QQ {}$/;"	g
QQ	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::NotMuchSmallerModulus<N> for QQ {}$/;"	c
QQ	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::SlightlySmallerModulus<N> for QQ {}$/;"	c
QQ	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<N> for QQ {}$/;"	c
QuoteStyle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^impl Default for QuoteStyle {$/;"	c
QuoteStyle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^impl QuoteStyle {$/;"	c
QuoteStyle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^pub enum QuoteStyle {$/;"	g
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^impl<R: io::Read + ?Sized> ReadBytesExt for R {}$/;"	c
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^impl<R: RngCore + ?Sized> Rng for R {}$/;"	c
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^impl<R: SeedableRng> FromEntropy for R {$/;"	c
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^impl<'a, R: CryptoRng + ?Sized> CryptoRng for &'a mut R {}$/;"	c
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^impl<'a, R: RngCore + ?Sized> RngCore for &'a mut R {$/;"	c
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl Encoding for R {}$/;"	c
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl ReductionEncoding for R {$/;"	c
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^pub enum R {}$/;"	g
R	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static R: usize = 10;$/;"	v
RANDOM_PATH	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        static RANDOM_PATH: &str = "\/dev\/urandom";$/;"	v	function:urandom::fill
RANDOM_PATH	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        static RANDOM_PATH: &str = "rand:";$/;"	v	function:urandom::fill
RC	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static RC: [u64; 11 \/* R + 1 *\/] = [$/;"	v
RCON	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^static RCON: [u32; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];$/;"	v
REMAINING_WINDOWS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    static REMAINING_WINDOWS: [(u8, u8); 26] = [$/;"	v	function:p256_scalar_inv_to_mont
REMAINING_WINDOWS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    static REMAINING_WINDOWS: [(u8, u8); 39] = [$/;"	v	function:p384_scalar_inv_to_mont
REPORT_DESCRIPTOR_KEY_MASK	/home/pme/src/rust/ctap/src/hid_linux.rs	/^static REPORT_DESCRIPTOR_KEY_MASK: u8 = 0xfc;$/;"	v
REPORT_DESCRIPTOR_KEY_MASK	/home/pme/src/rust/ctap/src/hid_macwin.rs	/^static REPORT_DESCRIPTOR_KEY_MASK: u8 = 0xfc;$/;"	v
REPORT_SIZE	/home/pme/src/rust/ctap/src/hid_linux.rs	/^static REPORT_SIZE: u8 = 0x74;$/;"	v
REPORT_SIZE	/home/pme/src/rust/ctap/src/hid_macwin.rs	/^static REPORT_SIZE: u8 = 0x74;$/;"	v
RESEEDING_RNG_FORK_COUNTER	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    static RESEEDING_RNG_FORK_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;$/;"	v	module:fork
RInverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl Encoding for RInverse {}$/;"	c
RInverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl ProductEncoding for (RR, RInverse) {$/;"	c
RInverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^pub enum RInverse {}$/;"	g
RR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl Encoding for RR {}$/;"	c
RR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl ReductionEncoding for RR {$/;"	c
RR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^pub enum RR {}$/;"	g
RSAEncoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^pub trait RSAEncoding: RSAPadding {$/;"	i
RSAPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^pub trait RSAPadding: 'static + Sync + ::private::Sealed {$/;"	i
RSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^pub struct RSAParameters {$/;"	s
RSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^impl core::fmt::Debug for RSAParameters {$/;"	c
RSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^impl private::Sealed for RSAParameters {}$/;"	c
RSAParameters	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^impl signature::VerificationAlgorithm for RSAParameters {$/;"	c
RSAParametersID	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^enum RSAParametersID {$/;"	g
RSAVerification	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^pub trait RSAVerification: RSAPadding {$/;"	i
RSA_PKCS1_2048_8192_SHA1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PKCS1_2048_8192_SHA1,$/;"	e	enum:RSAParametersID
RSA_PKCS1_2048_8192_SHA256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PKCS1_2048_8192_SHA256,$/;"	e	enum:RSAParametersID
RSA_PKCS1_2048_8192_SHA384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PKCS1_2048_8192_SHA384,$/;"	e	enum:RSAParametersID
RSA_PKCS1_2048_8192_SHA512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PKCS1_2048_8192_SHA512,$/;"	e	enum:RSAParametersID
RSA_PKCS1_3072_8192_SHA384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PKCS1_3072_8192_SHA384,$/;"	e	enum:RSAParametersID
RSA_PSS_2048_8192_SHA256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PSS_2048_8192_SHA256,$/;"	e	enum:RSAParametersID
RSA_PSS_2048_8192_SHA384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PSS_2048_8192_SHA384,$/;"	e	enum:RSAParametersID
RSA_PSS_2048_8192_SHA512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    RSA_PSS_2048_8192_SHA512,$/;"	e	enum:RSAParametersID
Range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> RangeExt<T> for Range<T> where$/;"	c
Range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for Range<Idx>$/;"	c
Range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<Idx> Serialize for Range<Idx>$/;"	c
RangeExt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^pub trait RangeExt<T> {$/;"	i
RangeInclusive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for RangeInclusive<Idx>$/;"	c
RangeInclusive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<Idx> Serialize for RangeInclusive<Idx>$/;"	c
RangeVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    impl<'de, Idx> Visitor<'de> for RangeVisitor<Idx>$/;"	c	module:range
RangeVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    pub struct RangeVisitor<Idx> {$/;"	s	module:range
Raw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    Raw(Vec<wchar_t>),$/;"	e	enum:WcharString
Rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Rc4,$/;"	e	enum:SymmetricCipherSpec
Rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Clone for Rc4 { fn clone(&self) -> Rc4 { *self } }$/;"	c
Rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Decryptor for Rc4 {$/;"	c
Rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Encryptor for Rc4 {$/;"	c
Rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Rc4 {$/;"	c
Rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl SynchronousStreamCipher for Rc4 {$/;"	c
Rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^pub struct Rc4 {$/;"	s
RcWeak	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for RcWeak<T>$/;"	c
RcWeak	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for RcWeak<T>$/;"	c
ReadBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub trait ReadBuffer {$/;"	i
ReadBytesExt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^pub trait ReadBytesExt: io::Read {$/;"	i
ReadPacket	/home/pme/src/rust/ctap/src/error.rs	/^    ReadPacket,$/;"	e	enum:FidoErrorKind
ReadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl<R: Read> ReadRng<R> {$/;"	c
ReadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl<R: Read> RngCore for ReadRng<R> {$/;"	c
ReadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct ReadRng<R>(rngs::adapter::ReadRng<R>);$/;"	s
ReadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^impl<R: Read> ReadRng<R> {$/;"	c
ReadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^impl<R: Read> RngCore for ReadRng<R> {$/;"	c
ReadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^pub struct ReadRng<R> {$/;"	s
ReadSlice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^pub trait ReadSlice {$/;"	i
ReadSliceError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^impl Error for ReadSliceError {$/;"	c
ReadSliceError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^impl fmt::Display for ReadSliceError {$/;"	c
ReadSliceError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^pub enum ReadSliceError {$/;"	g
Reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl Reader<Reader<File>> {$/;"	c
Reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read + io::Seek> Reader<R> {$/;"	c
Reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read> Reader<R> {$/;"	c
Reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct Reader<R> {$/;"	s
Reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl<'a> Reader<'a> {$/;"	c
Reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct Reader<'a> {$/;"	s
ReaderBuilder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl Default for ReaderBuilder {$/;"	c
ReaderBuilder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl ReaderBuilder {$/;"	c
ReaderBuilder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct ReaderBuilder {$/;"	s
ReaderEofState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^enum ReaderEofState {$/;"	g
ReaderState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl ReaderState {$/;"	c
ReaderState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^struct ReaderState {$/;"	s
Real	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^pub trait Real: Num + Copy + NumCast + PartialOrd + Neg<Output = Self> {$/;"	i
ReductionEncoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^pub trait ReductionEncoding {$/;"	i
RefCell	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for RefCell<T>$/;"	c
RefNum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub trait RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base> {}$/;"	i
RefReadBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> ReadBuffer for RefReadBuffer<'a> {$/;"	c
RefReadBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefReadBuffer<'a> {$/;"	c
RefReadBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefReadBuffer<'a> {$/;"	s
RefWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefWriteBuffer<'a> {$/;"	c
RefWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for RefWriteBuffer<'a> {$/;"	c
RefWriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefWriteBuffer<'a> {$/;"	s
Regex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Regex,$/;"	e	enum:Tag
RenameAllRules	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub struct RenameAllRules {$/;"	s
RenameRule	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^impl FromStr for RenameRule {$/;"	c
RenameRule	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^impl RenameRule {$/;"	c
RenameRule	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^pub enum RenameRule {$/;"	g
Request	/home/pme/src/rust/ctap/src/cbor.rs	/^impl<'a> Request<'a> {$/;"	c
Request	/home/pme/src/rust/ctap/src/cbor.rs	/^pub enum Request<'a> {$/;"	g
ReseedingCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr> BlockRngCore for ReseedingCore<R, Rsdr>$/;"	c
ReseedingCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr> Clone for ReseedingCore<R, Rsdr>$/;"	c
ReseedingCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr> CryptoRng for ReseedingCore<R, Rsdr>$/;"	c
ReseedingCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr> ReseedingCore<R, Rsdr>$/;"	c
ReseedingCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^struct ReseedingCore<R, Rsdr> {$/;"	s
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl<R, Rsdr: RngCore> RngCore for ReseedingRng<R, Rsdr>$/;"	c
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl<R, Rsdr> CryptoRng for ReseedingRng<R, Rsdr>$/;"	c
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl<R, Rsdr> ReseedingRng<R, Rsdr>$/;"	c
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct ReseedingRng<R, Rsdr>(rngs::adapter::ReseedingRng<R, Rsdr>)$/;"	s
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr: RngCore> RngCore for ReseedingRng<R, Rsdr>$/;"	c
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr> Clone for ReseedingRng<R, Rsdr>$/;"	c
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr> CryptoRng for ReseedingRng<R, Rsdr>$/;"	c
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^impl<R, Rsdr> ReseedingRng<R, Rsdr>$/;"	c
ReseedingRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^pub struct ReseedingRng<R, Rsdr>(BlockRng<ReseedingCore<R, Rsdr>>)$/;"	s
Reserved	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Reserved { major: u8, info: u8 },$/;"	e	enum:Type
Reserved	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Reserved(u8)$/;"	e	enum:Simple
Response	/home/pme/src/rust/ctap/src/cbor.rs	/^pub enum Response {$/;"	g
Result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^pub type Result<T> = result::Result<T, Error>;$/;"	t
Result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^impl<T, E> ResultExt<T, E> for Result<T, E>$/;"	c
Result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^impl From<Result> for ::std::result::Result<(), error::Unspecified> {$/;"	c
Result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^pub struct Result(c::int);$/;"	s
Result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T, E> Deserialize<'de> for Result<T, E>$/;"	c
Result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T, E> Serialize for Result<T, E>$/;"	c
ResultExt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^pub trait ResultExt<T, E> {$/;"	i
ResultVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de, T, E> Visitor<'de> for ResultVisitor<T, E>$/;"	c	function:deserialize
ResultVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        struct ResultVisitor<T, E>(PhantomData<Result<T, E>>);$/;"	s	function:deserialize
Results	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    type Results = <R as BlockRngCore>::Results;$/;"	t
Results	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;$/;"	t	interface:BlockRngCore
Reverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for Reverse<T>$/;"	c
Ripemd160	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ripemd160,$/;"	e	enum:DigestSpec
Ripemd160	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Digest for Ripemd160 {$/;"	c
Ripemd160	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Ripemd160 {$/;"	c
Ripemd160	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^pub struct Ripemd160 {$/;"	s
Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub trait Rng: RngCore {$/;"	i
Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^type Rng = ::rand_pcg::Pcg32;$/;"	t
Rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^type Rng = ::rand_pcg::Pcg64Mcg;$/;"	t
RngCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^impl std::io::Read for RngCore {$/;"	c
RngCore	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^pub trait RngCore {$/;"	i
RoundSetupInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^type RoundSetupInfo = (u8, fn(&[u8], KeyType, &mut [u8]));$/;"	t
Row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Row {$/;"	s	function:tests::enum_label_simple_tagged
Row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Row {$/;"	s	function:tests::enum_untagged
Row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Row {$/;"	s	function:tests::flatten
Row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^        struct Row {$/;"	s	function:tests::partially_invalid_utf8
Row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^        struct Row {$/;"	s	function:tests::serialize_no_headers
Row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^        struct Row {$/;"	s	function:tests::serialize_with_headers
RtlGenRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        fn RtlGenRandom($/;"	f	module:sysrand_chunk
RwLock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for RwLock<T>$/;"	c
S12	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S12:u32x4 = u32x4(12, 12, 12, 12);$/;"	v
S16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S16:u32x4 = u32x4(16, 16, 16, 16);$/;"	v
S32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S32:u32x4 = u32x4(32, 32, 32, 32);$/;"	v
S7	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S7:u32x4 = u32x4(7, 7, 7, 7);$/;"	v
S8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S8:u32x4 = u32x4(8, 8, 8, 8);$/;"	v
SCALAR_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^pub static SCALAR_OPS: ScalarOps = ScalarOps {$/;"	v
SCALAR_OPS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^pub static SCALAR_OPS: ScalarOps = ScalarOps {$/;"	v
SHA1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    SHA1,$/;"	e	enum:AlgorithmID
SHA1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub static SHA1: Algorithm = Algorithm {$/;"	v
SHA256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    SHA256,$/;"	e	enum:AlgorithmID
SHA256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub static SHA256: Algorithm = Algorithm {$/;"	v
SHA384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    SHA384,$/;"	e	enum:AlgorithmID
SHA384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub static SHA384: Algorithm = Algorithm {$/;"	v
SHA512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    SHA512,$/;"	e	enum:AlgorithmID
SHA512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub static SHA512: Algorithm = Algorithm {$/;"	v
SHA512_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    SHA512_256,$/;"	e	enum:AlgorithmID
SHA512_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub static SHA512_256: Algorithm = Algorithm {$/;"	v
SIGMA	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^static SIGMA : [[usize; 16]; 12] = [$/;"	v
SIGMA	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^static SIGMA : [[usize; 16]; 10] = [$/;"	v
SUPPORTED_SUITE_B_ALGS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^    static SUPPORTED_SUITE_B_ALGS: [($/;"	v	module:tests
Salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Salsa20,$/;"	e	enum:SymmetricCipherSpec
Salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Clone for Salsa20 { fn clone(&self) -> Salsa20 { *self } }$/;"	c
Salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Decryptor for Salsa20 {$/;"	c
Salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Encryptor for Salsa20 {$/;"	c
Salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Salsa20 {$/;"	c
Salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl SynchronousStreamCipher for Salsa20 {$/;"	c
Salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^pub struct Salsa20 {$/;"	s
SalsaState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^struct SalsaState {$/;"	s
SampleBorrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^pub trait SampleBorrow<Borrowed> {$/;"	i
SampleUniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^pub trait SampleUniform: Sized {$/;"	i
Sampler	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^            type Sampler = UniformMyF32;$/;"	t	implementation:tests::test_custom_uniform::MyF32
Sampler	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    type Sampler = UniformDuration;$/;"	t	implementation:Duration
Sampler	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    type Sampler: UniformSampler<X = Self>;$/;"	t	interface:SampleUniform
Saturating	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^pub trait Saturating {$/;"	i
SaturatingAdd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^pub trait SaturatingAdd: Sized + Add<Self, Output = Self> {$/;"	i
SaturatingMul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^pub trait SaturatingMul: Sized + Mul<Self, Output = Self> {$/;"	i
SaturatingSub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^pub trait SaturatingSub: Sized + Sub<Self, Output = Self> {$/;"	i
Scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub type Scalar = [u8; SCALAR_LEN];$/;"	t
Scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub type Scalar<E = Unencoded> = elem::Elem<N, E>;$/;"	t
ScalarOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^impl ScalarOps {$/;"	c
ScalarOps	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub struct ScalarOps {$/;"	s
ScreamingKebabCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    ScreamingKebabCase,$/;"	e	enum:RenameRule
ScreamingSnakeCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    ScreamingSnakeCase,$/;"	e	enum:RenameRule
Scrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Scrypt,$/;"	e	enum:KdfSpec
ScryptParams	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^impl ScryptParams {$/;"	c
ScryptParams	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub struct ScryptParams {$/;"	s
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeMap for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeSeq for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeStruct for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeStructVariant for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeTuple for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeTupleStruct for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeTupleVariant for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> Serializer for &'a mut SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'w, W: io::Write> SeHeader<'w, W> {$/;"	c
SeHeader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^struct SeHeader<'w, W: 'w + io::Write> {$/;"	s
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeMap for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeSeq for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeStruct for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeStructVariant for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeTuple for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeTupleStruct for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> SerializeTupleVariant for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^impl<'a, 'w, W: io::Write> Serializer for &'a mut SeRecord<'w, W> {$/;"	c
SeRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^struct SeRecord<'w, W: 'w + io::Write> {$/;"	s
Sealed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    pub trait Sealed{}$/;"	i	module:private
Sealed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^    pub trait Sealed {}$/;"	i	module:private
SealingKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^impl SealingKey {$/;"	c
SealingKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^pub struct SealingKey {$/;"	s
SealingKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^impl SealingKey {$/;"	c
SealingKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^pub struct SealingKey {$/;"	s
SecRandomCopyBytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        fn SecRandomCopyBytes($/;"	f	module:darwin
SecRandomRef	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        static kSecRandomDefault: &'static SecRandomRef;$/;"	v	module:darwin
SecRandomRef	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    struct SecRandomRef([u8; 0]);$/;"	s	module:darwin
Second	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        type Second = B;$/;"	t	implementation:private::B
Second	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        type Second;$/;"	t	interface:private::Pair
Second	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub type Second<T> = <T as Pair>::Second;$/;"	t	module:private
Secs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Secs,$/;"	e	enum:Duration::deserialize::Field
Secs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Secs,$/;"	e	enum:SystemTime::deserialize::Field
SecureRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^pub trait SecureRandom: private::Sealed {$/;"	i
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    type Seed = <::rand_xorshift::XorShiftRng as SeedableRng>::Seed;$/;"	t	implementation:XorShiftRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    type Seed = <rand_chacha::ChaChaRng as SeedableRng>::Seed;$/;"	t	implementation:ChaChaRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    type Seed = <rand_hc::Hc128Rng as SeedableRng>::Seed;$/;"	t	implementation:Hc128Rng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    type Seed = <rand_isaac::Isaac64Rng as SeedableRng>::Seed;$/;"	t	implementation:Isaac64Rng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    type Seed = <rand_isaac::IsaacRng as SeedableRng>::Seed;$/;"	t	implementation:IsaacRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    type Seed = <rngs::StdRng as SeedableRng>::Seed;$/;"	t	implementation:StdRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^    type Seed = <Rng as SeedableRng>::Seed;$/;"	t	implementation:SmallRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    type Seed = <Hc128Rng as SeedableRng>::Seed;$/;"	t	implementation:StdRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    type Seed = R::Seed;$/;"	t	implementation:BlockRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    type Seed = R::Seed;$/;"	t	implementation:BlockRng64
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^            type Seed = [u8; 8];$/;"	t	implementation:test::test_seed_from_u64::SeedableNum
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    type Seed: Sized + Default + AsMut<[u8]>;$/;"	t	interface:SeedableRng
Seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^type Seed = [u8; SEED_LEN];$/;"	t
SeedStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    impl<'de, V> DeserializeSeed<'de> for SeedStructVariant<V>$/;"	c	module:private
SeedStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    struct SeedStructVariant<V> {$/;"	s	module:private
SeedTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    impl<'de, V> DeserializeSeed<'de> for SeedTupleVariant<V>$/;"	c	module:private
SeedTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    struct SeedTupleVariant<V> {$/;"	s	module:private
SeedableNum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^        impl SeedableRng for SeedableNum {$/;"	c	function:test::test_seed_from_u64
SeedableNum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^        struct SeedableNum(u64);$/;"	s	function:test::test_seed_from_u64
SeedableRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^pub trait SeedableRng: Sized {$/;"	i
Seek	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    Seek,$/;"	e	enum:ErrorKind
Seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Seq,$/;"	e	enum:Unexpected
Seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Seq(Vec<Content<'de>>),$/;"	e	enum:content::Content
Seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Seq(Vec<Content>),$/;"	e	enum:content::Content
SeqAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait SeqAccess<'de> {$/;"	i
SeqAccessDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for SeqAccessDeserializer<A>$/;"	c
SeqAccessDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<A> SeqAccessDeserializer<A> {$/;"	c
SeqAccessDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct SeqAccessDeserializer<A> {$/;"	s
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, T, E> de::Deserializer<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, I, T, E> de::SeqAccess<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<I, E> SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct SeqDeserializer<I, E> {$/;"	s
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> de::SeqAccess<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct SeqDeserializer<'de, E>$/;"	s	module:content
SeqRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a, 'de, E> SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> de::SeqAccess<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct SeqRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Sequence	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    Sequence = CONSTRUCTED | 0x10, \/\/ 0x30$/;"	e	enum:Tag
Sequence	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Sequence,$/;"	e	enum:Unsupported
SerAndDe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^type SerAndDe<T> = (Option<T>, Option<T>);$/;"	t
Serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    Serialize(String),$/;"	e	enum:ErrorKind
Serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for ! {$/;"	c
Serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for () {$/;"	c
Serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait Serialize {$/;"	i
Serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^    Serialize,$/;"	e	enum:Derive
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeMap = Self;$/;"	t	implementation:SeHeader
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeMap = Self;$/;"	t	implementation:SeRecord
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type SerializeMap = SerializeMap<E>;$/;"	t	module:content
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ser::SerializeMap for SerializeMap<E>$/;"	c	module:content
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeMap<E> {$/;"	s	module:content
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeMap = FlatMapSerializeMap<'a, M>;$/;"	t
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeMap = S::SerializeMap;$/;"	t
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type SerializeMap = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type SerializeMap: SerializeMap<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait SerializeMap {$/;"	i
SerializeMap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    SerializeMap,$/;"	e	enum:StructTrait
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeSeq = Self;$/;"	t	implementation:SeHeader
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeSeq = Self;$/;"	t	implementation:SeRecord
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type SerializeSeq = SerializeSeq<E>;$/;"	t	module:content
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ser::SerializeSeq for SerializeSeq<E>$/;"	c	module:content
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeSeq<E> {$/;"	s	module:content
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeSeq = Impossible<S::Ok, S::Error>;$/;"	t
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeSeq = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type SerializeSeq = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type SerializeSeq: SerializeSeq<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeSeq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait SerializeSeq {$/;"	i
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeStruct = Self;$/;"	t	implementation:SeHeader
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeStruct = Self;$/;"	t	implementation:SeRecord
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type SerializeStruct = SerializeStruct<E>;$/;"	t	module:content
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ser::SerializeStruct for SerializeStruct<E>$/;"	c	module:content
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeStruct<E> {$/;"	s	module:content
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeStruct = FlatMapSerializeStruct<'a, M>;$/;"	t
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeStruct = S::SerializeStruct;$/;"	t
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type SerializeStruct = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type SerializeStruct: SerializeStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait SerializeStruct {$/;"	i
SerializeStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    SerializeStruct,$/;"	e	enum:StructTrait
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeStructVariant = Self;$/;"	t	implementation:SeHeader
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeStructVariant = Self;$/;"	t	implementation:SeRecord
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type SerializeStructVariant = SerializeStructVariant<E>;$/;"	t	module:content
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ser::SerializeStructVariant for SerializeStructVariant<E>$/;"	c	module:content
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeStructVariant<E> {$/;"	s	module:content
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeStructVariant = FlatMapSerializeStructVariantAsMapValue<'a, M>;$/;"	t
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeStructVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeStructVariant = SerializeStructVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type SerializeStructVariant = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type SerializeStructVariant: SerializeStructVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait SerializeStructVariant {$/;"	i
SerializeStructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    SerializeStructVariant,$/;"	e	enum:StructTrait
SerializeStructVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<M> SerializeStructVariantAsMapValue<M> {$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<M> ser::SerializeStructVariant for SerializeStructVariantAsMapValue<M>$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeStructVariantAsMapValue<M> {$/;"	s	module:content
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeTuple = Self;$/;"	t	implementation:SeHeader
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeTuple = Self;$/;"	t	implementation:SeRecord
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type SerializeTuple = SerializeTuple<E>;$/;"	t	module:content
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ser::SerializeTuple for SerializeTuple<E>$/;"	c	module:content
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeTuple<E> {$/;"	s	module:content
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeTuple = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeTuple = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type SerializeTuple = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type SerializeTuple: SerializeTuple<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait SerializeTuple {$/;"	i
SerializeTuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    SerializeTuple,$/;"	e	enum:TupleTrait
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeTupleStruct = Self;$/;"	t	implementation:SeHeader
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeTupleStruct = Self;$/;"	t	implementation:SeRecord
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type SerializeTupleStruct = SerializeTupleStruct<E>;$/;"	t	module:content
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ser::SerializeTupleStruct for SerializeTupleStruct<E>$/;"	c	module:content
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeTupleStruct<E> {$/;"	s	module:content
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type SerializeTupleStruct = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type SerializeTupleStruct: SerializeTupleStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait SerializeTupleStruct {$/;"	i
SerializeTupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    SerializeTupleStruct,$/;"	e	enum:TupleTrait
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeTupleVariant = Self;$/;"	t	implementation:SeHeader
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    type SerializeTupleVariant = Self;$/;"	t	implementation:SeRecord
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        type SerializeTupleVariant = SerializeTupleVariant<E>;$/;"	t	module:content
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<E> ser::SerializeTupleVariant for SerializeTupleVariant<E>$/;"	c	module:content
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeTupleVariant<E> {$/;"	s	module:content
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type SerializeTupleVariant = SerializeTupleVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    type SerializeTupleVariant = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    type SerializeTupleVariant: SerializeTupleVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait SerializeTupleVariant {$/;"	i
SerializeTupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    SerializeTupleVariant,$/;"	e	enum:TupleTrait
SerializeTupleVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<M> SerializeTupleVariantAsMapValue<M> {$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    impl<M> ser::SerializeTupleVariant for SerializeTupleVariantAsMapValue<M>$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    pub struct SerializeTupleVariantAsMapValue<M> {$/;"	s	module:content
Serializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^pub trait Serializer: Sized {$/;"	i
SetBlockingModeError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    SetBlockingModeError { mode: &'static str },$/;"	e	enum:HidError
Sha1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha1,$/;"	e	enum:DigestSpec
Sha1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^impl Digest for Sha1 {$/;"	c
Sha1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^impl Sha1 {$/;"	c
Sha1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub struct Sha1 {$/;"	s
Sha224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha224,$/;"	e	enum:DigestSpec
Sha224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha224 {$/;"	c
Sha224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha224 {$/;"	c
Sha224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha224 {$/;"	s
Sha256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha256,$/;"	e	enum:DigestSpec
Sha256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha256 {$/;"	c
Sha256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha256 {$/;"	c
Sha256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha256 {$/;"	s
Sha3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Clone for Sha3 {$/;"	c
Sha3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Copy for Sha3 {$/;"	c
Sha3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Digest for Sha3 {$/;"	c
Sha3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3 {$/;"	c
Sha3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^pub struct Sha3 {$/;"	s
Sha384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha384,$/;"	e	enum:DigestSpec
Sha384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha384 {$/;"	c
Sha384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha384 {$/;"	c
Sha384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha384 {$/;"	s
Sha3Mode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3Mode {$/;"	c
Sha3Mode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^pub enum Sha3Mode {$/;"	g
Sha3_224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_224,$/;"	e	enum:Sha3Mode
Sha3_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_256,$/;"	e	enum:Sha3Mode
Sha3_384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_384,$/;"	e	enum:Sha3Mode
Sha3_512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_512,$/;"	e	enum:Sha3Mode
Sha512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha512,$/;"	e	enum:DigestSpec
Sha512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512 {$/;"	c
Sha512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512 {$/;"	c
Sha512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512 {$/;"	s
Sha512Trunc224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc224 {$/;"	c
Sha512Trunc224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc224 {$/;"	c
Sha512Trunc224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc224 {$/;"	s
Sha512Trunc256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc256 {$/;"	c
Sha512Trunc256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc256 {$/;"	c
Sha512Trunc256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc256 {$/;"	s
Shake128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Shake128,$/;"	e	enum:Sha3Mode
Shake256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Shake256,$/;"	e	enum:Sha3Mode
SharedSecret	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^type SharedSecret = [u8; SHARED_SECRET_LEN];$/;"	t
SharedSecret	/home/pme/src/rust/ctap/src/crypto.rs	/^impl SharedSecret {$/;"	c
SharedSecret	/home/pme/src/rust/ctap/src/crypto.rs	/^pub struct SharedSecret {$/;"	s
Shorthand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    Shorthand,$/;"	e	enum:FieldSetterMeta
Signature	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^impl AsRef<[u8]> for Signature {$/;"	c
Signature	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub struct Signature(digest::Digest);$/;"	s
Signature	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature_impl.rs	/^impl AsRef<[u8]> for Signature {$/;"	c
Signature	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature_impl.rs	/^pub struct Signature {$/;"	s
Signed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^pub trait Signed: Sized + Num + Neg<Output = Self> {$/;"	i
Signed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Signed(i64),$/;"	e	enum:Unexpected
SigningAlgorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub trait SigningAlgorithm: core::fmt::Debug + Sync + 'static + private::Sealed {$/;"	i
SigningContext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^impl SigningContext {$/;"	c
SigningContext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub struct SigningContext {$/;"	s
SigningContext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^impl SigningContext {$/;"	c
SigningContext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^pub struct SigningContext {$/;"	s
SigningKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^impl SigningKey {$/;"	c
SigningKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub struct SigningKey {$/;"	s
SigningState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^impl SigningState {$/;"	c
SigningState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^pub struct SigningState {$/;"	s
SimdExt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^pub trait SimdExt {$/;"	i
Simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Simple(Simple),$/;"	e	enum:Value
Simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub enum Simple {$/;"	g
Skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/skip.rs	/^pub trait Skip {$/;"	i
Slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    impl<'a> Slice<'a> {$/;"	c	module:no_panic
Slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub struct Slice<'a> {$/;"	s	module:no_panic
SliceChooseIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^impl<'a, S: Index<usize, Output = T> + ?Sized + 'a, T: 'a> ExactSizeIterator$/;"	c
SliceChooseIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^impl<'a, S: Index<usize, Output = T> + ?Sized + 'a, T: 'a> Iterator for SliceChooseIter<'a, S, T/;"	c
SliceChooseIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^pub struct SliceChooseIter<'a, S: ?Sized + 'a, T: 'a> {$/;"	s
SliceRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^pub trait SliceRandom {$/;"	i
SlightlySmallerModulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub unsafe trait SlightlySmallerModulus<L>: SmallerModulus<L> {}$/;"	i
Small	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    Small(GammaSmallShape)$/;"	e	enum:GammaRepr
Small	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    Small {$/;"	e	enum:UniformDurationMode
SmallRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^impl RngCore for SmallRng {$/;"	c
SmallRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^impl SeedableRng for SmallRng {$/;"	c
SmallRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^pub struct SmallRng(Rng);$/;"	s
SmallerModulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub unsafe trait SmallerModulus<L> {}$/;"	i
SnakeCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    SnakeCase,$/;"	e	enum:RenameRule
SocketAddr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::SocketAddr {$/;"	c
SocketAddr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for net::SocketAddr {$/;"	c
SocketAddrV4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV4 {$/;"	c
SocketAddrV6	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV6 {$/;"	c
SocketAddrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            impl<'de> Visitor<'de> for SocketAddrVisitor {$/;"	c	method:SocketAddr::deserialize
SocketAddrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            struct SocketAddrVisitor;$/;"	s	method:SocketAddr::deserialize
Some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Some(Box<Content<'de>>),$/;"	e	enum:content::Content
Some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Some(Box<Content>),$/;"	e	enum:content::Content
Sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sosemanuk,$/;"	e	enum:SymmetricCipherSpec
Sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Clone for Sosemanuk { fn clone(&self) -> Sosemanuk { *self } }$/;"	c
Sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Decryptor for Sosemanuk {$/;"	c
Sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Encryptor for Sosemanuk {$/;"	c
Sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Sosemanuk {$/;"	c
Sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl SynchronousStreamCipher for Sosemanuk {$/;"	c
Sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^pub struct Sosemanuk {$/;"	s
Source	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^enum Source {$/;"	g
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^impl Distribution<u128> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^impl Distribution<u16> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^impl Distribution<u32> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^impl Distribution<u64> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^impl Distribution<u8> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^impl Distribution<usize> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^pub struct Standard;$/;"	s
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^impl Distribution<()> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^impl Distribution<bool> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^impl Distribution<char> for Standard {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^impl<T> Distribution<Option<T>> for Standard where Standard: Distribution<T> {$/;"	c
Standard	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^impl<T> Distribution<Wrapping<T>> for Standard where Standard: Distribution<T> {$/;"	c
StandardNormal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^impl Distribution<f64> for StandardNormal {$/;"	c
StandardNormal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^pub struct StandardNormal;$/;"	s
StandardPadding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait StandardPadding {$/;"	i
Start	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        Start,$/;"	e	enum:range::Field
State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^type State = [u64; MAX_CHAINING_LEN \/ 8];$/;"	t
State	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/sha1.rs	/^pub type State = [u64; super::MAX_CHAINING_LEN \/ 8];$/;"	t
Static	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    Static,$/;"	e	enum:BorrowedLifetimes
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl CryptoRng for StdRng {}$/;"	c
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for StdRng {$/;"	c
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl SeedableRng for StdRng {$/;"	c
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct StdRng(rngs::StdRng);$/;"	s
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^impl CryptoRng for StdRng {}$/;"	c
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^impl RngCore for StdRng {$/;"	c
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^impl SeedableRng for StdRng {$/;"	c
StdRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^pub struct StdRng(Hc128Rng);$/;"	s
StepRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^impl RngCore for StepRng {$/;"	c
StepRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^impl StepRng {$/;"	c
StepRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^pub struct StepRng {$/;"	s
StepUp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> Iterator for StepUp<T> where$/;"	c
StepUp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^pub struct StepUp<T> {$/;"	s
Stmts	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^impl ToTokens for Stmts {$/;"	c
Stmts	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^pub struct Stmts(pub Fragment);$/;"	s
Str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Str(&'a str),$/;"	e	enum:Unexpected
Str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Str(&'de str),$/;"	e	enum:content::Content
StrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'de, 'a, E> Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'a> Visitor<'a> for StrVisitor {$/;"	c
StrVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct StrVisitor;$/;"	s
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            String(String),$/;"	e	enum:tests::enum_untagged::Boolish
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    String(String),$/;"	e	enum:WcharString
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for String {$/;"	c
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for String$/;"	c
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    String,$/;"	e	enum:Unsupported
String	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for String {$/;"	c
StringDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<E> Clone for StringDeserializer<E> {$/;"	c
StringDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct StringDeserializer<E> {$/;"	s
StringInPlaceVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'a, 'de> Visitor<'de> for StringInPlaceVisitor<'a> {$/;"	c
StringInPlaceVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct StringInPlaceVisitor<'a>(&'a mut String);$/;"	s
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl Default for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl PartialEq for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl fmt::Debug for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl ops::Index<usize> for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<'a, T: AsRef<[u8]>> PartialEq<Vec<T>> for &'a StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<'a, T: AsRef<[u8]>> PartialEq<[T]> for &'a StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<'a, T: AsRef<str>> From<&'a [T]> for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<'a> IntoIterator for &'a StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<T: AsRef<[u8]>> PartialEq<Vec<T>> for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<T: AsRef<[u8]>> PartialEq<[T]> for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<T: AsRef<str>> Extend<T> for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<T: AsRef<str>> From<Vec<T>> for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<T: AsRef<str>> FromIterator<T> for StringRecord {$/;"	c
StringRecord	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^pub struct StringRecord(ByteRecord);$/;"	s
StringRecordIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<'r> DoubleEndedIterator for StringRecordIter<'r> {$/;"	c
StringRecordIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^impl<'r> Iterator for StringRecordIter<'r> {$/;"	c
StringRecordIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^pub struct StringRecordIter<'r>(ByteRecordIter<'r>);$/;"	s
StringRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read> Iterator for StringRecordsIntoIter<R> {$/;"	c
StringRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<R: io::Read> StringRecordsIntoIter<R> {$/;"	c
StringRecordsIntoIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct StringRecordsIntoIter<R> {$/;"	s
StringRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<'r, R: io::Read> Iterator for StringRecordsIter<'r, R> {$/;"	c
StringRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^impl<'r, R: io::Read> StringRecordsIter<'r, R> {$/;"	c
StringRecordsIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^pub struct StringRecordsIter<'r, R: 'r> {$/;"	s
StringVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Visitor<'de> for StringVisitor {$/;"	c
StringVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct StringVisitor;$/;"	s
Struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Struct(&'static str, Vec<(&'static str, Content)>),$/;"	e	enum:content::Content
Struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    Struct(Style, Vec<Field<'a>>),$/;"	e	enum:Data
Struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    Struct,$/;"	e	enum:Style
StructLevelSetter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^impl StructLevelSetter {$/;"	c
StructLevelSetter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^pub struct StructLevelSetter {$/;"	s
StructTrait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^enum StructTrait {$/;"	g
StructTrait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^impl StructTrait {$/;"	c
StructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    StructVariant,$/;"	e	enum:Unexpected
StructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        StructVariant($/;"	e	enum:content::Content
StructVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^enum StructVariant<'a> {$/;"	g
StudentT	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl Distribution<f64> for StudentT {$/;"	c
StudentT	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^impl StudentT {$/;"	c
StudentT	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^pub struct StudentT {$/;"	s
Style	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^pub enum Style {$/;"	g
Symbol	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^impl Display for Symbol {$/;"	c
Symbol	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^pub struct Symbol(&'static str);$/;"	s
SymmetricCipherError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub enum SymmetricCipherError {$/;"	g
SymmetricCipherSpec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum SymmetricCipherSpec {$/;"	g
SyncFailure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^impl<E: Error + Send + 'static> Fail for SyncFailure<E> {}$/;"	c
SyncFailure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^impl<E: Error + Send + 'static> SyncFailure<E> {$/;"	c
SyncFailure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^impl<T> Debug for SyncFailure<T>$/;"	c
SyncFailure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^impl<T> Display for SyncFailure<T>$/;"	c
SyncFailure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^pub struct SyncFailure<T> {$/;"	s
SynchronousStreamCipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait SynchronousStreamCipher {$/;"	i
Sysrand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        Sysrand,$/;"	e	enum:sysrand_or_urandom::Mechanism
SystemRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^impl SecureRandom for SystemRandom {$/;"	c
SystemRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^impl SystemRandom {$/;"	c
SystemRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^impl private::Sealed for SystemRandom {}$/;"	c
SystemRandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^pub struct SystemRandom;$/;"	s
SystemTime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for SystemTime {$/;"	c
SystemTime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for SystemTime {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/as_fail.rs	/^impl<T> AsFail for T$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^impl<T: AsRef<[u8]>> ToHex for T {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl<T, Base> RefNum<Base> for T where T: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base> {}$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl<T, Rhs, Output> NumOps<Rhs, Output> for T where$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl<T, Rhs> NumAssignOps<Rhs> for T where$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl<T> NumAssign for T where T: Num + NumAssignOps {}$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl<T> NumAssignRef for T where T: NumAssign + for<'r> NumAssignOps<&'r T> {}$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl<T> NumRef for T where T: Num + for<'r> NumOps<&'r T> {}$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^impl<T: Float> Real for T {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^impl<T> SliceRandom for [T] {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^impl Encoding for T {}$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub struct T;$/;"	s
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T: FixedBuffer> StandardPadding for T {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T> WriteExt for T where T: io::Write {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for [T; 0] {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<'de, T> Expected for T$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<T> DeserializeOwned for T where T: for<'de> Deserialize<'de> {}$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for [T; 0] {$/;"	c
T	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for [T]$/;"	c
TESTS	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    static TESTS: [(&'static str, &'static str); 18] = [$/;"	v	module:test
Tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^impl Tag {$/;"	c
Tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^pub enum Tag {$/;"	g
Tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^pub enum Tag {$/;"	g
Tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^pub type Tag = [u8; TAG_LEN];$/;"	t
Tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagContentOtherField
Tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContent
Tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContentField
TagContentOtherField	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub enum TagContentOtherField {$/;"	g	module:content
TagContentOtherFieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct TagContentOtherFieldVisitor {$/;"	s	module:content
TagOrContent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub enum TagOrContent<'de> {$/;"	g	module:content
TagOrContentField	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub enum TagOrContentField {$/;"	g	module:content
TagOrContentFieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct TagOrContentFieldVisitor {$/;"	s	module:content
TagOrContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct TagOrContentVisitor<'de> {$/;"	s	module:content
TagType	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub enum TagType {$/;"	g
Tagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Tagged,$/;"	e	enum:Type
Tagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Tagged(Tag, Box<Value>),$/;"	e	enum:Value
TaggedContent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct TaggedContent<'de, T> {$/;"	s	module:content
TaggedContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, T> DeserializeSeed<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, T> TaggedContentVisitor<'de, T> {$/;"	c	module:content
TaggedContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, T> Visitor<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct TaggedContentVisitor<'de, T> {$/;"	s	module:content
TaggedSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<S> Serializer for TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl<S> TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^struct TaggedSerializer<S> {$/;"	s
Target	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    type Target = [limb::Limb];$/;"	t	implementation:BoxedLimbs
Template	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^impl Template {$/;"	c
Template	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^pub(crate) struct Template {$/;"	s
Terminator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^impl Default for Terminator {$/;"	c
Terminator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^impl Terminator {$/;"	c
Terminator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^pub enum Terminator {$/;"	g
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct Test {$/;"	s	module:test
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    struct Test {$/;"	s	module:test
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test {$/;"	s	function:test::test_bcrypt_hash
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test{$/;"	s	function:test::test_openbsd_vectors
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    struct Test {$/;"	s	module:digest_tests
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    struct Test {$/;"	s	module:digest_tests
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    struct Test {$/;"	s	module:test
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    struct Test {$/;"	s	module:test
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    struct Test {$/;"	s	module:test
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    struct Test {$/;"	s	module:test
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    struct Test {$/;"	s	module:test
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    struct Test {$/;"	s	module:tests
TestCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^impl TestCase {$/;"	c
TestCase	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub struct TestCase {$/;"	s
TestData	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct TestData {$/;"	s	module:test
TestPoint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    enum TestPoint {$/;"	g	module:tests
TestRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    impl<R: RngCore> RngCore for TestRng<R> {$/;"	c	module:test
TestRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    pub struct TestRng<R> { inner: R }$/;"	s	module:test
TestVector	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    struct TestVector {$/;"	s	module:test
TestVector	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^        struct TestVector {$/;"	s	function:test::test_chacha20_256_tls_vectors
TestVector	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^        struct TestVector {$/;"	s	function:test::test_chacha20_256_tls_vectors_96_nonce
TestVector	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  struct TestVector {$/;"	s	module:test
TestVector	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    struct TestVector<D: Digest>{$/;"	s	module:test
Text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Text,$/;"	e	enum:Type
Text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Text(String),$/;"	e	enum:Text
Text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Text(Text)$/;"	e	enum:Key
Text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Text(Text),$/;"	e	enum:Value
Text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub enum Text {$/;"	g
TextIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^impl<'r, R: 'r + ReadBytesExt> Iterator for TextIter<'r, R> {$/;"	c
TextIter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub struct TextIter<'r, R: 'r> {$/;"	s
ThreadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl CryptoRng for ThreadRng {}$/;"	c
ThreadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for ThreadRng {$/;"	c
ThreadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct ThreadRng(rngs::ThreadRng);$/;"	s
ThreadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^impl CryptoRng for ThreadRng {}$/;"	c
ThreadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^impl Default for ThreadRng {$/;"	c
ThreadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^impl RngCore for ThreadRng {$/;"	c
ThreadRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^pub struct ThreadRng {$/;"	s
Timeout	/home/pme/src/rust/ctap/src/error.rs	/^    Timeout,$/;"	e	enum:FidoErrorKind
Timestamp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Timestamp,$/;"	e	enum:Tag
ToBase16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    ToBase16,$/;"	e	enum:Tag
ToBase64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    ToBase64,$/;"	e	enum:Tag
ToBase64Url	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    ToBase64Url,$/;"	e	enum:Tag
ToHex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub trait ToHex {$/;"	i
ToPrimitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^pub trait ToPrimitive {$/;"	i
TooLong	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    TooLong { max: usize, actual: u64 },$/;"	e	enum:DecodeError
TooNested	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    TooNested,$/;"	e	enum:DecodeError
Trait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^    Trait,$/;"	e	enum:DefaultExpression
TraitObject	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^struct TraitObject {$/;"	s
TraitObject	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^struct TraitObject {$/;"	s
Transient	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    Transient,$/;"	e	enum:ErrorKind
Triangular	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^impl Distribution<f64> for Triangular {$/;"	c
Triangular	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^impl Triangular {$/;"	c
Triangular	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^pub struct Triangular {$/;"	s
Trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^impl Default for Trim {$/;"	c
Trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^impl Trim {$/;"	c
Trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^pub enum Trim {$/;"	g
True	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    True = 0xffff_ffff,$/;"	e	enum:LimbMask
True	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    True = 0xffff_ffff_ffff_ffff,$/;"	e	enum:LimbMask
Tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Tuple(Vec<Content>),$/;"	e	enum:content::Content
Tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Tuple,$/;"	e	enum:Unsupported
Tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    Tuple,$/;"	e	enum:Style
TupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        TupleStruct(&'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    TupleStruct,$/;"	e	enum:Unsupported
TupleTrait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^enum TupleTrait {$/;"	g
TupleTrait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^impl TupleTrait {$/;"	c
TupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    TupleVariant,$/;"	e	enum:Unexpected
TupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        TupleVariant(&'static str, u32, &'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^enum TupleVariant {$/;"	g
Type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^impl Type {$/;"	c
Type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^pub enum Type {$/;"	g
TypeInfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub type TypeInfo = (Type, u8);$/;"	t
U16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    U16(u16),$/;"	e	enum:Value
U16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        U16(u16),$/;"	e	enum:content::Content
U16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        U16(u16),$/;"	e	enum:content::Content
U32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    U32(u32),$/;"	e	enum:Value
U32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    #[doc(hidden)] U32(Vec<u32>),$/;"	e	enum:IndexVec
U32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    #[doc(hidden)] U32(slice::Iter<'a, u32>),$/;"	e	enum:IndexVecIter
U32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    #[doc(hidden)] U32(vec::IntoIter<u32>),$/;"	e	enum:IndexVecIntoIter
U32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct U32Deserializer<E> {$/;"	s
U64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    U64(u64),$/;"	e	enum:Value
U64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        U64(u64),$/;"	e	enum:content::Content
U64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        U64(u64),$/;"	e	enum:content::Content
U8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    U8(u8),$/;"	e	enum:Value
U8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        U8(u8),$/;"	e	enum:content::Content
U8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        U8(u8),$/;"	e	enum:content::Content
UInt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    type UInt;$/;"	t	interface:FloatSIMDUtils
UInt16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    UInt16,$/;"	e	enum:Type
UInt32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    UInt32,$/;"	e	enum:Type
UInt64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    UInt64,$/;"	e	enum:Type
UInt8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    UInt8,$/;"	e	enum:Type
UNEQUAL	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^        static UNEQUAL: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_equal_limb
UPPERCASE	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    UPPERCASE,$/;"	e	enum:RenameRule
USAGE	/home/pme/src/rust/ctap/src/hid_linux.rs	/^static USAGE: u8 = 0x08;$/;"	v
USAGE	/home/pme/src/rust/ctap/src/hid_macwin.rs	/^static USAGE: u8 = 0x08;$/;"	v
USAGE_PAGE	/home/pme/src/rust/ctap/src/hid_linux.rs	/^static USAGE_PAGE: u8 = 0x04;$/;"	v
USAGE_PAGE	/home/pme/src/rust/ctap/src/hid_macwin.rs	/^static USAGE_PAGE: u8 = 0x04;$/;"	v
USize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    #[doc(hidden)] USize(Vec<usize>),$/;"	e	enum:IndexVec
USize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    #[doc(hidden)] USize(slice::Iter<'a, usize>),$/;"	e	enum:IndexVecIter
USize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    #[doc(hidden)] USize(vec::IntoIter<usize>),$/;"	e	enum:IndexVecIntoIter
UTCTime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    UTCTime = 0x17,$/;"	e	enum:Tag
Unassigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Unassigned { major: u8, info: u8 }$/;"	e	enum:Type
Unassigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Unassigned(u64),$/;"	e	enum:Tag
Unassigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Unassigned(u8),$/;"	e	enum:Simple
Unavailable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    Unavailable,$/;"	e	enum:ErrorKind
Unbounded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            Unbounded,$/;"	e	enum:deserialize::Field
Undefined	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Undefined,$/;"	e	enum:Type
Undefined	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    Undefined$/;"	e	enum:Value
Underlying	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^            type Underlying = c::int;$/;"	t	function:tests::result::size_and_alignment
Unencoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl Encoding for Unencoded {}$/;"	c
Unencoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl ProductEncoding for (RR, Unencoded) {$/;"	c
Unencoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^impl ReductionEncoding for Unencoded {$/;"	c
Unencoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/montgomery.rs	/^pub enum Unencoded {}$/;"	g
UnequalLengths	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    UnequalLengths {$/;"	e	enum:ErrorKind
Unexpected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    Unexpected,$/;"	e	enum:ErrorKind
Unexpected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<'a> fmt::Display for Unexpected<'a> {$/;"	c
Unexpected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub enum Unexpected<'a> {$/;"	g
UnexpectedBreak	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    UnexpectedBreak,$/;"	e	enum:DecodeError
UnexpectedEOF	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    UnexpectedEOF,$/;"	e	enum:DecodeError
UnexpectedEOF	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    UnexpectedEOF,$/;"	e	enum:EncodeError
UnexpectedEndOfRow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    UnexpectedEndOfRow,$/;"	e	enum:DeserializeErrorKind
UnexpectedType	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    UnexpectedType { datatype: Type, info: u8 },$/;"	e	enum:DecodeError
UnhintedIterator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    impl<I: Iterator + Clone> Iterator for UnhintedIterator<I> {$/;"	c	module:test
UnhintedIterator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    struct UnhintedIterator<I: Iterator + Clone> {$/;"	s	module:test
Uniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl<X: SampleUniform> Distribution<X> for Uniform<X> {$/;"	c
Uniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl<X: SampleUniform> From<::core::ops::Range<X>> for Uniform<X> {$/;"	c
Uniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl<X: SampleUniform> From<::core::ops::RangeInclusive<X>> for Uniform<X> {$/;"	c
Uniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl<X: SampleUniform> Uniform<X> {$/;"	c
Uniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^pub struct Uniform<X: SampleUniform> {$/;"	s
UniformDuration	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^impl UniformSampler for UniformDuration {$/;"	c
UniformDuration	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^pub struct UniformDuration {$/;"	s
UniformDurationMode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^enum UniformDurationMode {$/;"	g
UniformFloat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^pub struct UniformFloat<X> {$/;"	s
UniformInt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^pub struct UniformInt<X> {$/;"	s
UniformMyF32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        impl UniformSampler for UniformMyF32 {$/;"	c	function:tests::test_custom_uniform
UniformMyF32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        struct UniformMyF32 {$/;"	s	function:tests::test_custom_uniform
UniformSampler	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^pub trait UniformSampler: Sized {$/;"	i
Unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Unit,$/;"	e	enum:Unexpected
Unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    Unit,$/;"	e	enum:Unsupported
Unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    Unit,$/;"	e	enum:Style
UnitCircle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^impl Distribution<[f64; 2]> for UnitCircle {$/;"	c
UnitCircle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^impl UnitCircle {$/;"	c
UnitCircle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^pub struct UnitCircle;$/;"	s
UnitDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for UnitDeserializer<E>$/;"	c
UnitDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^pub struct UnitDeserializer<E> {$/;"	s
UnitOnly	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    impl<'de, E> de::VariantAccess<'de> for UnitOnly<E>$/;"	c	module:private
UnitOnly	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub struct UnitOnly<E> {$/;"	s	module:private
UnitSphereSurface	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^impl Distribution<[f64; 3]> for UnitSphereSurface {$/;"	c
UnitSphereSurface	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^impl UnitSphereSurface {$/;"	c
UnitSphereSurface	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^pub struct UnitSphereSurface;$/;"	s
UnitStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        UnitStruct(&'static str),$/;"	e	enum:content::Content
UnitStruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    UnitStruct,$/;"	e	enum:Unsupported
UnitVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    UnitVariant,$/;"	e	enum:Unexpected
UnitVariant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        UnitVariant(&'static str, u32, &'static str),$/;"	e	enum:content::Content
UnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Visitor<'de> for UnitVisitor {$/;"	c
UnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^struct UnitVisitor;$/;"	s
Unknown	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Unknown { major: u8, info: u8 },$/;"	e	enum:Type
UnreducedScalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^pub type UnreducedScalar = [u8; UNREDUCED_SCALAR_LEN];$/;"	t
Unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^pub trait Unsigned: Num {}$/;"	i
Unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    Unsigned(u64),$/;"	e	enum:Unexpected
Unspecified	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^impl From<untrusted::EndOfInput> for Unspecified {$/;"	c
Unspecified	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^impl core::fmt::Display for Unspecified {$/;"	c
Unspecified	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^impl std::error::Error for Unspecified {$/;"	c
Unspecified	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^pub struct Unspecified;$/;"	s
Unsupported	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    Unsupported(String),$/;"	e	enum:DeserializeErrorKind
Unsupported	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^enum Unsupported {$/;"	g
Unsupported	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^impl Display for Unsupported {$/;"	c
Untagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^enum Untagged {$/;"	g
Untagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    Untagged,$/;"	e	enum:StructVariant
Untagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    Untagged,$/;"	e	enum:TupleVariant
UntaggedUnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'a> UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct UntaggedUnitVisitor<'a> {$/;"	s	module:content
Uri	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    Uri,$/;"	e	enum:Tag
Utf8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    Utf8 {$/;"	e	enum:ErrorKind
Utf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl StdError for Utf8Error {}$/;"	c
Utf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl Utf8Error {$/;"	c
Utf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^impl fmt::Display for Utf8Error {$/;"	c
Utf8Error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^pub struct Utf8Error {$/;"	s
V1Only	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    V1Only,$/;"	e	enum:Version
V1OrV2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    V1OrV2,$/;"	e	enum:Version
V2Only	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    V2Only,$/;"	e	enum:Version
VTable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    type VTable;$/;"	t
VTable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    type VTable;$/;"	t
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub enum Value {$/;"	g
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^        type Value = T;$/;"	t	function:deserialize
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    type Value = IgnoredAny;$/;"	t	implementation:IgnoredAny
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:deserialize::Field::deserialize::FieldVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                type Value = Field;$/;"	t	implementation:range::Field::deserialize::FieldVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                type Value = net::IpAddr;$/;"	t	implementation:IpAddr::deserialize::IpAddrVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                type Value = net::SocketAddr;$/;"	t	implementation:SocketAddr::deserialize::SocketAddrVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            type Value = ();$/;"	t	function:deserialize_in_place
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            type Value = Bound<T>;$/;"	t	function:deserialize
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:Duration::deserialize::DurationVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:SystemTime::deserialize::DurationVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            type Value = Result<T, E>;$/;"	t	function:deserialize
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            type Value = Vec<T>;$/;"	t	function:deserialize
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        type Value = (Idx, Idx);$/;"	t	module:range
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = &'a Path;$/;"	t	implementation:PathVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = &'a [u8];$/;"	t	implementation:BytesVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = &'a str;$/;"	t	implementation:StrVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:StringInPlaceVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:UnitVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = CString;$/;"	t	implementation:CStringVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = Option<T>;$/;"	t
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = OsString;$/;"	t	implementation:OsStringVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = PathBuf;$/;"	t	implementation:PathBufVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = PhantomData<T>;$/;"	t	implementation:PhantomDataVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = String;$/;"	t	implementation:StringVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = [T; 0];$/;"	t	implementation:ArrayVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = bool;$/;"	t	implementation:BoolVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    type Value = char;$/;"	t	implementation:CharVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Value = T;$/;"	t
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Value;$/;"	t	interface:DeserializeSeed
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Value;$/;"	t	interface:Visitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        type Value = V::Value;$/;"	t	module:private
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::InternallyTaggedUnitVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::UntaggedUnitVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = Content<'de>;$/;"	t	implementation:content::ContentVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = Cow<'a, [u8]>;$/;"	t	implementation:borrow_cow_bytes::CowBytesVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = Cow<'a, str>;$/;"	t	implementation:borrow_cow_str::CowStrVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = TagContentOtherField;$/;"	t	implementation:content::TagContentOtherFieldVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = TagOrContent<'de>;$/;"	t	implementation:content::TagOrContentVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = TagOrContentField;$/;"	t	implementation:content::TagOrContentFieldVisitor
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Value = TaggedContent<'de, T>;$/;"	t	module:content
Value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    type Value = ();$/;"	t
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    type Variant = Self;$/;"	t	implementation:DeRecordWrap
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    type Variant: VariantAccess<'de, Error = Self::Error>;$/;"	t	interface:EnumAccess
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Variant = private::MapAsEnum<A>;$/;"	t
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    type Variant = private::UnitOnly<E>;$/;"	t
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Variant = VariantDeserializer<'de, Self::Error>;$/;"	t	module:content
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type Variant = VariantRefDeserializer<'a, 'de, Self::Error>;$/;"	t	module:content
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^pub struct Variant<'a> {$/;"	s
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    Variant,$/;"	e	enum:Identifier
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl Variant {$/;"	c
Variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub struct Variant {$/;"	s
VariantAccess	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait VariantAccess<'de>: Sized {$/;"	i
VariantDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, E> de::VariantAccess<'de> for VariantDeserializer<'de, E>$/;"	c	module:content
VariantDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub struct VariantDeserializer<'de, E>$/;"	s	module:content
VariantRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    impl<'de, 'a, E> de::VariantAccess<'de> for VariantRefDeserializer<'a, 'de, E>$/;"	c	module:content
VariantRefDeserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    struct VariantRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Vec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^impl FromHex for Vec<u8> {$/;"	c
Vec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Vec<T>$/;"	c
Vec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for Vec<T>$/;"	c
VecAttr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^impl<'c, T> VecAttr<'c, T> {$/;"	c
VecAttr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^struct VecAttr<'c, T> {$/;"	s
VecInPlaceVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'a, 'de, T> Visitor<'de> for VecInPlaceVisitor<'a, T>$/;"	c	function:deserialize_in_place
VecInPlaceVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        struct VecInPlaceVisitor<'a, T: 'a>(&'a mut Vec<T>);$/;"	s	function:deserialize_in_place
VecVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for VecVisitor<T>$/;"	c	function:deserialize
VecVisitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        struct VecVisitor<T> {$/;"	s	function:deserialize
VerificationAlgorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub trait VerificationAlgorithm: core::fmt::Debug + Sync + private::Sealed {$/;"	i
VerificationKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^impl VerificationKey {$/;"	c
VerificationKey	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub struct VerificationKey {$/;"	s
VerifySignature	/home/pme/src/rust/ctap/src/error.rs	/^    VerifySignature,$/;"	e	enum:FidoErrorKind
Version	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^pub(crate) enum Version {$/;"	g
Visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub trait Visitor<'de>: Sized {$/;"	i
Void	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^enum Void {}$/;"	g
W	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^impl<W: io::Write + ?Sized> WriteBytesExt for W {}$/;"	c
W32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/sha1.rs	/^type W32 = Wrapping<u32>;$/;"	t
Wat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        enum Wat {$/;"	g	function:tests::enum_newtypes
Wat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^        enum Wat {$/;"	g	function:tests::enum_units
WcharString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^enum WcharString {$/;"	g
WcharString	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^impl Into<Option<String>> for WcharString {$/;"	c
Weibull	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^impl Distribution<f64> for Weibull {$/;"	c
Weibull	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^impl Weibull {$/;"	c
Weibull	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^pub struct Weibull {$/;"	s
Weighted	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^pub struct Weighted<T> {$/;"	s
WeightedChoice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^impl<'a, T: Clone> Distribution<T> for WeightedChoice<'a, T> {$/;"	c
WeightedChoice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^impl<'a, T: Clone> WeightedChoice<'a, T> {$/;"	c
WeightedChoice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^pub struct WeightedChoice<'a, T:'a> {$/;"	s
WeightedError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^impl ::std::error::Error for WeightedError {$/;"	c
WeightedError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^impl WeightedError {$/;"	c
WeightedError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^impl fmt::Display for WeightedError {$/;"	c
WeightedError	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^pub enum WeightedError {$/;"	g
WeightedIndex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^impl<X: SampleUniform + PartialOrd> WeightedIndex<X> {$/;"	c
WeightedIndex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^impl<X> Distribution<usize> for WeightedIndex<X> where$/;"	c
WeightedIndex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^pub struct WeightedIndex<X: SampleUniform + PartialOrd> {$/;"	s
Whirlpool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Whirlpool,$/;"	e	enum:DigestSpec
Whirlpool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Digest for Whirlpool {$/;"	c
Whirlpool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Whirlpool {$/;"	c
Whirlpool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^pub struct Whirlpool {$/;"	s
Wi128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    impl Arbitrary for Wi128<i128> {$/;"	c	module:test
Wi128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    impl Arbitrary for Wi128<u128> {$/;"	c	module:test
Wi128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    impl<T: Clone> Wi128<T> {$/;"	c	module:test
Wi128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    impl<T: PartialEq> PartialEq<T> for Wi128<T> {$/;"	c	module:test
Wi128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    pub struct Wi128<T>(pub T);$/;"	s	module:test
WideningMultiply	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^pub trait WideningMultiply<RHS = Self> {$/;"	i
Width	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^struct Width<M> {$/;"	s
WindowHintedIterator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    impl<I: ExactSizeIterator + Iterator + Clone> Iterator for WindowHintedIterator<I> {$/;"	c	module:test
WindowHintedIterator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    struct WindowHintedIterator<I: ExactSizeIterator + Iterator + Clone> {$/;"	s	module:test
Wink	/home/pme/src/rust/ctap/src/packet.rs	/^    Wink = 0x08,$/;"	e	enum:CtapCommand
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^impl<T: Bounded> Bounded for Wrapping<T> {$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^impl<T: FromPrimitive> FromPrimitive for Wrapping<T> {$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^impl<T: NumCast> NumCast for Wrapping<T> {$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^impl<T: ToPrimitive> ToPrimitive for Wrapping<T> {$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^impl<T: One> One for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^impl<T: Zero> Zero for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^impl<T: Num> Num for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^impl<T: WrappingAdd> WrappingAdd for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^impl<T: WrappingMul> WrappingMul for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^impl<T: WrappingNeg> WrappingNeg for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^impl<T: WrappingShl> WrappingShl for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^impl<T: WrappingShr> WrappingShr for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^impl<T: WrappingSub> WrappingSub for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^impl<T: Signed> Signed for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^impl<T: Unsigned> Unsigned for Wrapping<T> where Wrapping<T>: Num {}$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Wrapping<T>$/;"	c
Wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl<T> Serialize for Wrapping<T>$/;"	c
WrappingAdd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^pub trait WrappingAdd: Sized + Add<Self, Output = Self> {$/;"	i
WrappingMul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^pub trait WrappingMul: Sized + Mul<Self, Output = Self> {$/;"	i
WrappingNeg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^pub trait WrappingNeg: Sized {$/;"	i
WrappingShl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^pub trait WrappingShl: Sized + Shl<usize, Output = Self> {$/;"	i
WrappingShr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^pub trait WrappingShr: Sized + Shr<usize, Output = Self> {$/;"	i
WrappingSub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^pub trait WrappingSub: Sized + Sub<Self, Output = Self> {$/;"	i
Write	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    Write,$/;"	e	enum:HeaderState
Write	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    Write,$/;"	e	enum:HeaderState
WriteBuffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub trait WriteBuffer {$/;"	i
WriteBytesExt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^pub trait WriteBytesExt: io::Write {$/;"	i
WriteExt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait WriteExt {$/;"	i
WritePacket	/home/pme/src/rust/ctap/src/error.rs	/^    WritePacket,$/;"	e	enum:FidoErrorKind
Writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^impl Writer<File> {$/;"	c
Writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^impl<W: io::Write> Drop for Writer<W> {$/;"	c
Writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^impl<W: io::Write> Writer<W> {$/;"	c
Writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^pub struct Writer<W: io::Write> {$/;"	s
WriterBuilder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^impl Default for WriterBuilder {$/;"	c
WriterBuilder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^impl WriterBuilder {$/;"	c
WriterBuilder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^pub struct WriterBuilder {$/;"	s
WriterState	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^struct WriterState {$/;"	s
X	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            X { a: bool, b: i32, c: String },$/;"	e	enum:tests::enum_struct_variant::Foo
X	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            X(bool, i32, String),$/;"	e	enum:tests::tuple_variant::Foo
X	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^            type X = MyF32;$/;"	t	implementation:tests::test_custom_uniform::UniformMyF32
X	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    type X = Duration;$/;"	t	implementation:UniformDuration
X	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    type X;$/;"	t	interface:UniformSampler
X25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^pub static X25519: agreement::Algorithm = agreement::Algorithm {$/;"	v
XSalsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    XSalsa20,$/;"	e	enum:SymmetricCipherSpec
XorShiftRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl RngCore for XorShiftRng {$/;"	c
XorShiftRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^impl SeedableRng for XorShiftRng {$/;"	c
XorShiftRng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^pub struct XorShiftRng(::rand_xorshift::XorShiftRng);$/;"	s
Yes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    Yes,$/;"	e	enum:AllowZero
Yes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    Yes,$/;"	e	enum:Untagged
ZEROES	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    static ZEROES: &[&[Limb]] = &[$/;"	v	module:tests
ZERO_INTEGER	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    static ZERO_INTEGER: &'static [u8] = &[0x02, 0x01, 0x00];$/;"	v	module:tests
ZIG_EXP_F	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/ziggurat_tables.rs	/^pub static ZIG_EXP_F: [f64; 257] =$/;"	v
ZIG_EXP_X	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/ziggurat_tables.rs	/^pub static ZIG_EXP_X: [f64; 257] =$/;"	v
ZIG_NORM_F	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/ziggurat_tables.rs	/^pub static ZIG_NORM_F: [f64; 257] =$/;"	v
ZIG_NORM_X	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/ziggurat_tables.rs	/^pub static ZIG_NORM_X: [f64; 257] =$/;"	v
Zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^pub trait Zero: Sized + Add<Self, Output = Self> {$/;"	i
ZigTable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/ziggurat_tables.rs	/^pub type ZigTable = &'static [f64; 257];$/;"	t
__Nonexhaustive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    __Nonexhaustive,$/;"	e	enum:ErrorKind
__Nonexhaustive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    __Nonexhaustive,$/;"	e	enum:QuoteStyle
__Nonexhaustive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    __Nonexhaustive,$/;"	e	enum:Terminator
__Nonexhaustive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    __Nonexhaustive,$/;"	e	enum:Trim
__Nonexhaustive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    __Nonexhaustive,$/;"	e	enum:ErrorKind
__private_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/macros.rs	/^macro_rules! __private_deserialize {$/;"	M
__private_get_type_id__	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn __private_get_type_id__(&self) -> TypeId {$/;"	P	interface:Fail
__private_serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/macros.rs	/^macro_rules! __private_serialize {$/;"	M
__private_visit_untagged_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn __private_visit_untagged_option<D>(self, deserializer: D) -> Result<Self::Value, ()>$/;"	f
__private_visit_untagged_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn __private_visit_untagged_option<D>(self, _: D) -> Result<Self::Value, ()>$/;"	P	interface:Visitor
__serialize_unimplemented	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/macros.rs	/^macro_rules! __serialize_unimplemented {$/;"	M
__serialize_unimplemented_helper	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/macros.rs	/^macro_rules! __serialize_unimplemented_helper {$/;"	M
__serialize_unimplemented_method	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/macros.rs	/^macro_rules! __serialize_unimplemented_method {$/;"	M
_epoch	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-0.7.3/src/lib.rs	/^mod _epoch {$/;"	n
_failure__stringify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/macros.rs	/^macro_rules! _failure__stringify {$/;"	M
_hid_device	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    _hid_device: *mut ffi::HidDevice,$/;"	m	struct:HidDevice
_lock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    _lock: Arc<HidApiLock>,$/;"	m	struct:HidApi
_lock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    _lock: ManuallyDrop<Arc<HidApiLock>>,$/;"	m	struct:HidDevice
_marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatInternallyTaggedAccess
_marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatMapAccess
_marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatStructAccess
_phantom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    _phantom: ::core::marker::PhantomData<T>,$/;"	m	struct:SliceChooseIter
_priv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    _priv: PhantomData<D>,$/;"	m	struct:DeserializeRecordsIntoIter
_priv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    _priv: PhantomData<D>,$/;"	m	struct:DeserializeRecordsIter
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            a: &'a str,$/;"	m	struct:tests::borrowed::Foo
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            a: Option<i32>,$/;"	m	struct:tests::option_empty_field::Foo
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            a: Option<i32>,$/;"	m	struct:tests::option_invalid_field::Foo
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^    a: u64,$/;"	m	struct:StepRng
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub a: Elem<R>, \/\/ Must be -3 mod q$/;"	m	struct:CommonOps
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  a: u32x4,$/;"	m	struct:ChaChaState
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  a: u32x4,$/;"	m	struct:SalsaState
a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<'a> Display for Expected + 'a {$/;"	c
a_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    a_len: usize,$/;"	m	struct:Ghash
a_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    a_len: usize,$/;"	m	struct:GhashWithC
aad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                aad: Vec<u8>,$/;"	m	struct:test::TestVector
aad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    aad: Vec<u8>,$/;"	m	struct:test::TestVector
aaguid	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub aaguid: [u8; 16],$/;"	m	struct:AttestedCredentialData
aaguid	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub aaguid: [u8; 16],$/;"	m	struct:GetInfoResponse
aaguid	/home/pme/src/rust/ctap/src/lib.rs	/^    aaguid: [u8; 16],$/;"	m	struct:FidoDevice
aaguid	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn aaguid(&self) -> &[u8] {$/;"	P	implementation:FidoDevice
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn abs(self) -> Self {$/;"	P	implementation:f32
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn abs(self) -> Self {$/;"	P	implementation:f64
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn abs(self) -> Self {$/;"	P	interface:FloatCore
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn abs(self) -> Self;$/;"	P	interface:Float
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn abs(self) -> Self;$/;"	P	interface:Real
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn abs(&self) -> Self {$/;"	f
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn abs(&self) -> Self;$/;"	P	interface:Signed
abs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^pub fn abs<T: Signed>(value: T) -> T {$/;"	f
abs_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn abs_sub(self, other: Self) -> Self {$/;"	P	implementation:f32
abs_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn abs_sub(self, other: Self) -> Self {$/;"	P	implementation:f64
abs_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn abs_sub(self, other: Self) -> Self;$/;"	P	interface:Float
abs_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn abs_sub(self, other: Self) -> Self;$/;"	P	interface:Real
abs_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn abs_sub(&self, other: &Self) -> Self {$/;"	f
abs_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn abs_sub(&self, other: &Self) -> Self;$/;"	P	interface:Signed
abs_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^pub fn abs_sub<T: Signed>(x: T, y: T) -> T {$/;"	f
acos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn acos(self) -> Self {$/;"	P	implementation:f32
acos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn acos(self) -> Self {$/;"	P	implementation:f64
acos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn acos(self) -> Self;$/;"	P	interface:Float
acos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn acos(self) -> Self;$/;"	P	interface:Real
acosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn acosh(self) -> Self {$/;"	P	implementation:f32
acosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn acosh(self) -> Self {$/;"	P	implementation:f64
acosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn acosh(self) -> Self;$/;"	P	interface:Float
acosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn acosh(self) -> Self;$/;"	P	interface:Real
acquire	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    fn acquire() -> HidResult<HidApiLock> {$/;"	P	implementation:HidApiLock
adapter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mod.rs	/^pub mod adapter;$/;"	n
add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn add(&mut self, pos: usize) {$/;"	P	implementation:Bounds
add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GeCached) -> GeP1P1 {$/;"	P	implementation:GeP3
add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	P	implementation:GeP3
add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u64x2) -> u64x2 {$/;"	P	implementation:fake::u64x2
add_bytes_to_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits(bits: u64, bytes: u64) -> u64 {$/;"	f
add_bytes_to_bits_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits_tuple$/;"	f
add_ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn add_ctr(ctr: &mut [u8], mut ammount: u8) {$/;"	f
add_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn add_input(st: &mut Sha1, msg: &[u8]) {$/;"	f
add_random_event	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn add_random_event(&mut self, s: u8, i: usize, e: &[u8]) {$/;"	P	implementation:Fortuna
add_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn add_record(&mut self, record: &ByteRecord) -> Result<()> {$/;"	P	implementation:ReaderState
add_rotate_xor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! add_rotate_xor {$/;"	M
add_round_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Bs8State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs8State
add_round_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Self) -> Self;$/;"	P	interface:AesOps
adjacent_fixed_arrays	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn adjacent_fixed_arrays() {$/;"	f	module:tests
advance_state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn advance_state(&mut self) {$/;"	P	implementation:Sosemanuk
aead	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod aead;$/;"	n
aead	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aead;$/;"	n
aes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes;$/;"	n
aes_cbc_no_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding() {$/;"	f	module:test
aes_cbc_no_padding_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding_tests() -> Vec<CbcTest> {$/;"	f	module:test
aes_cbc_pkcs_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding() {$/;"	f	module:test
aes_cbc_pkcs_padding_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_cbc_pkcs_padding_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_cbc_pkcs_padding_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding_tests() -> Vec<CbcTest> {$/;"	f	module:test
aes_ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr() {$/;"	f	module:test
aes_ctr_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ctr_box	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_box() {$/;"	f	module:test
aes_ctr_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f	module:test
aes_ctr_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f	module:test
aes_ctr_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_x8() {$/;"	f	module:test
aes_ctr_x8_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_x8_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ecb_no_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding() {$/;"	f	module:test
aes_ecb_no_padding_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ecb_no_padding_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ecb_no_padding_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding_tests() -> Vec<EcbTest> {$/;"	f	module:test
aes_ecb_pkcs_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding() {$/;"	f	module:test
aes_ecb_pkcs_padding_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding_tests() -> Vec<EcbTest> {$/;"	f	module:test
aes_gcm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^mod aes_gcm;$/;"	n
aes_gcm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes_gcm;$/;"	n
aes_gcm_decrypt_fail_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_fail_test() {$/;"	f	module:test
aes_gcm_decrypt_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_test() {$/;"	f	module:test
aes_gcm_init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^fn aes_gcm_init(ctx_buf: &mut [u8], key: &[u8])$/;"	f
aes_gcm_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_test() {$/;"	f	module:test
aes_safe_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_safe_x8_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_x8_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aesni;$/;"	n
aesni_128_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_128_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_192_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_192_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_256_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_256_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aesni_bench(bh: &mut Bencher, key_size: KeySize) {$/;"	f	module:bench
aessafe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aessafe;$/;"	n
affine_from_jacobian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn affine_from_jacobian($/;"	f
agree_ephemeral	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^pub fn agree_ephemeral<F, R, E>($/;"	f
agreement	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^        &'static agreement::Algorithm,$/;"	v	module:tests
agreement	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod agreement;$/;"	n
alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^    alg: &'static Algorithm,$/;"	m	struct:EphemeralPrivateKey
alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    alg: &'static Algorithm,$/;"	m	struct:Key
alg_id_range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    pub alg_id_range: core::ops::Range<usize>,$/;"	m	struct:Template
alg_id_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    fn alg_id_value(&self) -> &[u8] { &self.bytes[self.alg_id_range.start..self.alg_id_range.end/;"	P	implementation:Template
algo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: A,$/;"	m	struct:CtrMode
algo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: A,$/;"	m	struct:CtrModeX8
algo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T$/;"	m	struct:EcbDecryptorProcessor
algo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T$/;"	m	struct:EcbEncryptorProcessor
algo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T,$/;"	m	struct:CbcDecryptorProcessor
algo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T,$/;"	m	struct:CbcEncryptorProcessor
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    algorithm: &'static Algorithm,$/;"	m	struct:Key
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    fn algorithm(&self) -> &'static Algorithm { self.algorithm }$/;"	P	implementation:Key
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.key.algorithm() }$/;"	P	implementation:OpeningKey
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.key.algorithm() }$/;"	P	implementation:SealingKey
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.alg }$/;"	P	implementation:EphemeralPrivateKey
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    algorithm: &'static Algorithm,$/;"	m	struct:Digest
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub algorithm: &'static Algorithm,$/;"	m	struct:Context
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.algorithm }$/;"	P	implementation:Context
algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.algorithm }$/;"	P	implementation:Digest
algorithm	/home/pme/src/rust/ctap/src/cbor.rs	/^    algorithm: i32,$/;"	m	struct:CoseKey
aliases	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Field
aliases	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Variant
all	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn all(self) -> bool { self }$/;"	P	implementation:bool
all	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn all(self) -> bool;$/;"	P	interface:BoolAsSIMD
all_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub fn all_fields(&'a self) -> Box<Iterator<Item = &'a Field<'a>> + 'a> {$/;"	P	implementation:Data
all_finite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn all_finite(self) -> bool;$/;"	P	interface:FloatSIMDUtils
all_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn all_le(self, other: Self) -> bool;$/;"	P	interface:FloatSIMDUtils
all_lt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn all_lt(self, other: Self) -> bool;$/;"	P	interface:FloatSIMDUtils
all_type_params	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^        all_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
allow_list	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub allow_list: &'a [PublicKeyCredentialDescriptor],$/;"	m	struct:GetAssertionRequest
allow_transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn allow_transparent(field: &Field, derive: Derive) -> bool {$/;"	f
alpha	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    alpha: Vec<f64>,$/;"	m	struct:Dirichlet
always_enabled_if_failure_is_set_to_yes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    fn always_enabled_if_failure_is_set_to_yes() {$/;"	f	module:tests
ammount	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    ammount: T$/;"	m	struct:StepUp
any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn any(self) -> bool { self }$/;"	P	implementation:bool
any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn any(self) -> bool;$/;"	P	interface:BoolAsSIMD
apply_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_key(&mut self) {$/;"	P	implementation:Blake2b
apply_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_key(&mut self) {$/;"	P	implementation:Blake2s
apply_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_param(&mut self) {$/;"	P	implementation:Blake2b
apply_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_param(&mut self) {$/;"	P	implementation:Blake2s
apply_to_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    pub fn apply_to_field(&self, field: &str) -> String {$/;"	P	implementation:RenameRule
apply_to_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    pub fn apply_to_variant(&self, variant: &str) -> String {$/;"	P	implementation:RenameRule
arbitrary	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^        fn arbitrary<G: Gen>(gen: &mut G) -> Wi128<i128> {$/;"	P	implementation:test::Wi128
arbitrary	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^        fn arbitrary<G: Gen>(gen: &mut G) -> Wi128<u128> {$/;"	P	implementation:test::Wi128
arithmetic	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod arithmetic;$/;"	n
array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn array() {$/;"	f	module:tests
array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn array(&mut self) -> DecodeResult<usize> {$/;"	P	implementation:Decoder
array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn array() {$/;"	f	module:tests
array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn array(&mut self, len: usize) -> EncodeResult {$/;"	P	implementation:Encoder
array_begin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn array_begin(&mut self) -> DecodeResult<()> {$/;"	P	implementation:Decoder
array_begin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn array_begin(&mut self) -> EncodeResult {$/;"	P	implementation:Encoder
array_end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn array_end(&mut self) -> EncodeResult {$/;"	P	implementation:Encoder
array_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^macro_rules! array_impl {$/;"	M
array_impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! array_impls {$/;"	M
array_impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! array_impls {$/;"	M
array_of_array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn array_of_array() {$/;"	f	module:tests
as_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn as_(self) -> T;$/;"	P	interface:AsPrimitive
as_backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    pub(super) fn as_backtrace(&self) -> Option<&Backtrace> {$/;"	P	implementation:InternalBacktrace
as_build_method	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn as_build_method<'a>(&'a self) -> BuildMethod<'a> {$/;"	P	implementation:Options
as_builder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn as_builder<'a>(&'a self) -> Builder<'a> {$/;"	P	implementation:Options
as_builder_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn as_builder_field(&'a self) -> BuilderField<'a> {$/;"	P	implementation:FieldWithDefaults
as_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn as_byte_record(&self) -> &ByteRecord {$/;"	P	implementation:StringRecord
as_byte_slice_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn as_byte_slice_mut(&mut self) -> &mut [u8] {$/;"	P	implementation:u8
as_byte_slice_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn as_byte_slice_mut(&mut self) -> &mut [u8];$/;"	P	interface:AsByteSliceMut
as_expressed_vis	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn as_expressed_vis(&self) -> Option<Visibility> {$/;"	P	interface:FlagVisibility
as_fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/as_fail.rs	/^    fn as_fail(&self) -> &dyn Fail {$/;"	P	implementation:Fail
as_fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/as_fail.rs	/^    fn as_fail(&self) -> &dyn Fail {$/;"	f
as_fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/as_fail.rs	/^    fn as_fail(&self) -> &dyn Fail;$/;"	P	interface:AsFail
as_fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn as_fail(&self) -> &dyn Fail {$/;"	P	implementation:Error
as_fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^mod as_fail;$/;"	n
as_initializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn as_initializer(&'a self) -> Initializer<'a> {$/;"	P	implementation:FieldWithDefaults
as_partial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn as_partial(&self) -> PartialModulus<M> {$/;"	P	implementation:Modulus
as_parts	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub(crate) fn as_parts(&mut self) -> (&mut Vec<u8>, &mut Vec<usize>) {$/;"	P	implementation:ByteRecord
as_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    fn as_ref(&self) -> &dyn Fail {$/;"	P	implementation:Error
as_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    fn as_ref(&self) -> &[u8] {$/;"	P	implementation:Digest
as_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    fn as_ref(&self) -> &[u8] { self.0.as_ref() }$/;"	P	implementation:Signature
as_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    fn as_ref(&self) -> &[u8] { &self.bytes[..self.len] }$/;"	P	implementation:Document
as_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn as_ref(&self) -> &Elem<M, E> { &self.0 }$/;"	P	implementation:One
as_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature_impl.rs	/^    fn as_ref(&self) -> &[u8] { &self.value[..self.len] }$/;"	P	implementation:Signature
as_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^    fn as_ref(&self) -> &TokenStream {$/;"	P	implementation:Fragment
as_setter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn as_setter(&'a self) -> Setter<'a> {$/;"	P	implementation:FieldWithDefaults
as_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn as_slice(&self) -> &[u8] {$/;"	P	implementation:ByteRecord
as_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn as_slice(&self) -> &str {$/;"	P	implementation:StringRecord
as_slice_less_safe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn as_slice_less_safe(&self) -> &'a [u8] { self.bytes }$/;"	P	implementation:no_panic::Slice
as_slice_less_safe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn as_slice_less_safe(&self) -> &'a [u8] {$/;"	P	implementation:Input
as_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/utf8.rs	/^    pub fn as_str(&self) -> &str {$/;"	P	implementation:Encode
as_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub fn as_str(&self) -> Option<&str> {$/;"	P	implementation:content::Content
as_usize_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^    pub fn as_usize_bits(&self) -> usize { self.0 }$/;"	P	implementation:BitLength
as_usize_bytes_rounded_up	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^    pub fn as_usize_bytes_rounded_up(&self) -> usize {$/;"	P	implementation:BitLength
as_wrapping_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn as_wrapping_mut<T>(src: &mut [T]) -> &mut [core::num::Wrapping<T>] {$/;"	f	module:slice
ascii	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn ascii(&mut self) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
asin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn asin(self) -> Self {$/;"	P	implementation:f32
asin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn asin(self) -> Self {$/;"	P	implementation:f64
asin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn asin(self) -> Self;$/;"	P	interface:Float
asin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn asin(self) -> Self;$/;"	P	interface:Real
asinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn asinh(self) -> Self {$/;"	P	implementation:f32
asinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn asinh(self) -> Self {$/;"	P	implementation:f64
asinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn asinh(self) -> Self;$/;"	P	interface:Float
asinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn asinh(self) -> Self;$/;"	P	interface:Real
assert_almost_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^    macro_rules! assert_almost_eq {$/;"	M	module:tests
assert_almost_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^    macro_rules! assert_almost_eq {$/;"	M	module:tests
assert_elem_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn assert_elem_eq<M, E>(a: &Elem<M, E>, b: &Elem<M, E>) {$/;"	f	module:tests
assert_elems_are_equal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn assert_elems_are_equal(ops: &CommonOps, a: &Elem<R>, b: &Elem<R>) {$/;"	f	module:tests
assert_error_is_just_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    fn assert_error_is_just_data() {$/;"	f	module:test
assert_error_is_just_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn assert_error_is_just_data() {$/;"	f	module:test
assert_is_one_word	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    fn assert_is_one_word() {$/;"	f	module:test
assert_is_one_word	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn assert_is_one_word() {$/;"	f	module:test
assert_just_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    fn assert_just_data<T: Send + Sync + 'static>() { }$/;"	f	module:test
assert_just_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^        fn assert_just_data<T: Send + Sync + 'static>() { }$/;"	f	function:test::assert_error_is_just_data
assert_opaque_alignment	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^fn assert_opaque_alignment(state: &Opaque) {$/;"	f
assert_point_actual_equals_expected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn assert_point_actual_equals_expected($/;"	f	module:tests
associated_type_usage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^        associated_type_usage: Vec<&'ast syn::TypePath>,$/;"	m	struct:with_bound::FindTyParams
ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^pub mod ast;$/;"	n
at	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn at(&self, i: usize) -> Cursor<'r> {$/;"	P	implementation:Cursor
at_end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn at_end(&self) -> bool { self.i == self.input.len() }$/;"	P	implementation:Reader
at_most_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn at_most_one(mut self) -> Result<Option<T>, ()> {$/;"	P	implementation:VecAttr
atan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atan(self) -> Self {$/;"	P	implementation:f32
atan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atan(self) -> Self {$/;"	P	implementation:f64
atan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atan(self) -> Self;$/;"	P	interface:Float
atan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn atan(self) -> Self;$/;"	P	interface:Real
atan2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atan2(self, other: Self) -> Self {$/;"	P	implementation:f32
atan2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atan2(self, other: Self) -> Self {$/;"	P	implementation:f64
atan2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atan2(self, other: Self) -> Self;$/;"	P	interface:Float
atan2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn atan2(self, other: Self) -> Self;$/;"	P	interface:Real
atanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atanh(self) -> Self {$/;"	P	implementation:f32
atanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atanh(self) -> Self {$/;"	P	implementation:f64
atanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn atanh(self) -> Self;$/;"	P	interface:Float
atanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn atanh(self) -> Self;$/;"	P	interface:Real
atomic_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! atomic_impl {$/;"	M
atomic_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! atomic_impl {$/;"	M
attested_credential_data	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub attested_credential_data: AttestedCredentialData,$/;"	m	struct:AuthenticatorData
attr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^pub mod attr;$/;"	n
attributes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    attributes: Vec<(String, String, bool)>,$/;"	m	struct:TestCase
attrs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    attrs: Vec<Attribute>,$/;"	m	struct:Field
attrs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    attrs: Vec<Attribute>,$/;"	m	struct:Options
attrs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub attrs: attr::Container,$/;"	m	struct:Container
attrs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub attrs: attr::Field,$/;"	m	struct:Field
attrs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub attrs: attr::Variant,$/;"	m	struct:Variant
auth	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub fn auth(&self, data: &[u8]) -> [u8; 16] {$/;"	P	implementation:PinToken
auth_data	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub auth_data: AuthenticatorData,$/;"	m	struct:GetAssertionResponse
auth_data	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub auth_data: AuthenticatorData,$/;"	m	struct:MakeCredentialResponse
auth_data_bytes	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub auth_data_bytes: Vec<u8>,$/;"	m	struct:GetAssertionResponse
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn b(s: &str) -> &[u8] {$/;"	f	module:tests
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            b: Option<i32>,$/;"	m	struct:tests::option_invalid_field::Foo
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            b: String,$/;"	m	struct:tests::option_empty_field::Foo
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            b: i32,$/;"	m	struct:tests::borrowed::Foo
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn b<'a, T: AsRef<[u8]> + ?Sized>(bytes: &'a T) -> &'a [u8] {$/;"	f	module:tests
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn b(s: &str) -> &[u8] {$/;"	f	module:tests
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub b: Elem<R>,$/;"	m	struct:CommonOps
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  b: u32x4,$/;"	m	struct:ChaChaState
b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  b: u32x4,$/;"	m	struct:SalsaState
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    backtrace: Option<MaybeResolved>,$/;"	m	struct:InternalBacktrace
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    backtrace: UnsafeCell<Backtrace>,$/;"	m	struct:MaybeResolved
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^    backtrace: Backtrace,$/;"	m	struct:Inner
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^    pub(crate) fn backtrace(&self) -> &Backtrace {$/;"	P	implementation:ErrorImpl
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    backtrace: Backtrace,$/;"	m	struct:Inner
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    backtrace: Backtrace,$/;"	m	struct:InnerHeader
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    pub(crate) fn backtrace(&self) -> &Backtrace {$/;"	P	implementation:ErrorImpl
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn backtrace(&self) -> &Backtrace {$/;"	P	implementation:Error
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn backtrace(&self) -> Option<&Backtrace> {$/;"	P	implementation:Box
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn backtrace(&self) -> Option<&Backtrace> {$/;"	P	interface:Fail
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^mod backtrace;$/;"	n
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    backtrace: Backtrace,$/;"	m	struct:Inner
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    backtrace: Backtrace,$/;"	m	struct:InnerHeader
backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn backtrace(&self) -> &Backtrace {$/;"	P	implementation:Error
backtrace	/home/pme/src/rust/ctap/src/error.rs	/^    fn backtrace(&self) -> Option<&Backtrace> {$/;"	P	implementation:FidoError
bad_hex_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn bad_hex_seq() {$/;"	f	module:tests
bad_type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn bad_type(self, what: Unsupported) -> S::Error {$/;"	f
bad_type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn bad_type(what: Unsupported) -> M::Error {$/;"	f
bail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/macros.rs	/^macro_rules! bail {$/;"	M
bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            bar: f64,$/;"	m	struct:tests::serialize_no_headers::Row
bar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            bar: f64,$/;"	m	struct:tests::serialize_with_headers::Row
base_example	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn base_example() {$/;"	f	module:tests
baz	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            baz: bool,$/;"	m	struct:tests::serialize_no_headers::Row
baz	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            baz: bool,$/;"	m	struct:tests::serialize_with_headers::Row
bcrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^pub fn bcrypt(cost: u32, salt: &[u8], password: &[u8], output: &mut [u8]) {$/;"	f
bcrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt;$/;"	n
bcrypt_16_5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    pub fn bcrypt_16_5(bh: & mut Bencher) {$/;"	f	module:bench
bcrypt_pbkdf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^pub fn bcrypt_pbkdf(password: &[u8], salt: &[u8], rounds: u32, output: &mut [u8]) {$/;"	f
bcrypt_pbkdf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt_pbkdf;$/;"	n
be_u8_from_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn be_u8_from_u32(value: u32) -> [u8; 4] {$/;"	f	module:slice
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^mod bench {$/;"	n
bench	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod bench {$/;"	n
bench_bcrypt_pbkdf_5_32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn bench_bcrypt_pbkdf_5_32(b: &mut Bencher) {$/;"	f	module:bench
bench_curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^macro_rules! bench_curve {$/;"	M
bernoulli	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^mod bernoulli;$/;"	n
big_endian_affine_from_jacobian	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn big_endian_affine_from_jacobian($/;"	f
big_endian_from_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn big_endian_from_limbs(limbs: &[Limb], out: &mut [u8]) {$/;"	f
big_sigma0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma0 {$/;"	M	function:sha256_digest_round_x2
big_sigma0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma0 {$/;"	M	function:sha512_digest_round
big_sigma1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma1 {$/;"	M	function:sha256_digest_round_x2
big_sigma1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma1 {$/;"	M	function:sha512_digest_round
bigint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^mod bigint;$/;"	n
binary_op	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^pub fn binary_op<M, EA: Encoding, EB: Encoding, ER: Encoding>($/;"	f
binary_op_assign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^pub fn binary_op_assign<M, EA: Encoding, EB: Encoding>($/;"	f
bindings	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn bindings(&self) -> Bindings {$/;"	P	implementation:FieldWithDefaults
bindings	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn bindings(&self) -> Bindings {$/;"	P	implementation:Options
binomial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod binomial;$/;"	n
bit_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    bit_length: [u8; 32],$/;"	m	struct:Whirlpool
bit_slice_1x128_with_u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x128_with_u32x4(data: &[u8]) -> Bs8State<u32x4> {$/;"	f
bit_slice_1x16_with_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x16_with_u16(data: &[u8]) -> Bs8State<u16> {$/;"	f
bit_slice_4x1_with_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x1_with_u16(a: u32) -> Bs8State<u16> {$/;"	f
bit_slice_4x4_with_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x4_with_u16(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u16> {$/;"	f
bit_slice_fill_4x4_with_u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_fill_4x4_with_u32x4(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u32x4> {$/;"	f
bit_string_with_no_unused_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^pub fn bit_string_with_no_unused_bits<'a>($/;"	f
bitand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitand(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
bitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitor(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod bits;$/;"	n
bitxor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn bitxor(self, rhs: Gf128) -> Gf128 {$/;"	P	implementation:Gf128
bitxor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitxor(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	P	implementation:Blake2b
blake2b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2b;$/;"	n
blake2b_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_10(bh: & mut Bencher) {$/;"	f	module:bench
blake2b_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_1k(bh: & mut Bencher) {$/;"	f	module:bench
blake2b_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_64k(bh: & mut Bencher) {$/;"	f	module:bench
blake2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	P	implementation:Blake2s
blake2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2s;$/;"	n
blake2s_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_10(bh: & mut Bencher) {$/;"	f	module:bench
blake2s_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_1k(bh: & mut Bencher) {$/;"	f	module:bench
blake2s_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_64k(bh: & mut Bencher) {$/;"	f	module:bench
block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^pub mod block;$/;"	n
block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn block(&mut self, m: &[u8]) {$/;"	P	implementation:Poly1305
block_data_order	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    block_data_order: unsafe extern "C" fn(state: &mut State, data: *const u8, num: c::size_t),$/;"	m	struct:Algorithm
block_data_order	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/sha1.rs	/^pub unsafe extern "C" fn block_data_order(state: &mut State, data: *const u8, num: c::size_t) {$/;"	f
block_engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<CbcDecryptorProcessor<T>, X>$/;"	m	struct:CbcDecryptor
block_engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<CbcEncryptorProcessor<T>, X>$/;"	m	struct:CbcEncryptor
block_engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<EcbDecryptorProcessor<T>, X>$/;"	m	struct:EcbDecryptor
block_engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<EcbEncryptorProcessor<T>, X>$/;"	m	struct:EcbEncryptor
block_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub block_len: usize,$/;"	m	struct:Algorithm
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn block_size(&self) -> usize { 16 }$/;"	P	implementation:AesNiDecryptor
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn block_size(&self) -> usize { 16 }$/;"	P	implementation:AesNiEncryptor
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2B_BLOCKBYTES }$/;"	P	implementation:Blake2b
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2S_BLOCKBYTES }$/;"	P	implementation:Blake2s
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_size: usize,$/;"	m	struct:BlockEngine
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Blowfish
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:Digest
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Md5
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Ripemd160
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha1
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha384
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512Trunc224
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512Trunc256
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha224
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha256
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Sha3
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockDecryptor
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockDecryptorX8
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockEncryptor
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockEncryptorX8
block_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Whirlpool
blockmodes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blockmodes;$/;"	n
blocks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    fn blocks(&self, state: &mut Opaque, data: &[u8], should_pad: Pad) {$/;"	P	implementation:Funcs
blocks_fn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    blocks_fn: unsafe extern fn(&mut Opaque, input: *const u8,$/;"	m	struct:Funcs
blowfish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn blowfish(bh: &mut Bencher) {$/;"	f	module:bench
blowfish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blowfish;$/;"	n
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn bool() {$/;"	f	module:tests
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn bool(&mut self) -> DecodeResult<bool> {$/;"	P	implementation:Decoder
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn bool(&mut self, ti: &TypeInfo) -> DecodeResult<bool> {$/;"	P	implementation:Kernel
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn bool() {$/;"	f	module:tests
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn bool(&mut self, x: bool) -> EncodeResult {$/;"	P	implementation:Encoder
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn bool(&self) -> Option<bool> {$/;"	P	implementation:Cursor
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn bool() {$/;"	f	module:tests
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^impl BoolAsSIMD for bool {$/;"	c
bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for bool {$/;"	c
bool3ary_150	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_150 {$/;"	M	function:sha1rnds4p
bool3ary_202	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha1rnds4c
bool3ary_202	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha256_digest_round_x2
bool3ary_202	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha512_digest_round
bool3ary_232	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha1rnds4m
bool3ary_232	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha256_digest_round_x2
bool3ary_232	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha512_digest_round
borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn borrow(&self) -> &Borrowed { self }$/;"	f
borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn borrow(&self) -> &Borrowed;$/;"	P	interface:SampleBorrow
borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^   fn borrow(&self) -> &Borrowed { *self }$/;"	f
borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    borrow: Option<syn::Meta>,$/;"	m	struct:Variant
borrow_cow_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub fn borrow_cow_bytes<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>$/;"	f
borrow_cow_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub fn borrow_cow_str<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>$/;"	f
borrow_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn borrow_mut(&mut self) -> &mut Decoder<R> {$/;"	P	implementation:GenericDecoder
borrow_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn borrow_mut(&mut self) -> &mut Encoder<W> {$/;"	P	implementation:GenericEncoder
borrow_write_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn borrow_write_buffer(&mut self) -> BorrowedWriteBuffer {$/;"	P	implementation:OwnedReadBuffer
borrowable_lifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn borrowable_lifetimes($/;"	f
borrowed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn borrowed() {$/;"	f	module:tests
borrowed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    borrowed: BorrowedLifetimes,$/;"	m	struct:Parameters
borrowed_lifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn borrowed_lifetimes(cont: &Container) -> BorrowedLifetimes {$/;"	f
borrowed_lifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    borrowed_lifetimes: BTreeSet<syn::Lifetime>,$/;"	m	struct:Field
borrowed_lifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn borrowed_lifetimes(&self) -> &BTreeSet<syn::Lifetime> {$/;"	P	implementation:Field
borrowed_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn borrowed_map() {$/;"	f	module:tests
borrowed_map_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn borrowed_map_bytes() {$/;"	f	module:tests
bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod bound;$/;"	n
bounded_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^macro_rules! bounded_impl {$/;"	M
bounded_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^macro_rules! bounded_tuple {$/;"	M
bounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    bounds: Bounds,$/;"	m	struct:ByteRecordInner
bounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod bounds;$/;"	n
box_forwarded_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! box_forwarded_impl {$/;"	M
box_std	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^mod box_std;$/;"	n
bssl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod bssl;$/;"	n
bssl_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^macro_rules! bssl_test {$/;"	M
buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    buf: Buffer,$/;"	m	struct:Writer
buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    buf: Vec<u8>,$/;"	m	struct:Buffer
buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    buf: [u8; BLOCK_LEN],$/;"	m	struct:SigningContext
buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    buf: [u8; 2*BLAKE2B_BLOCKBYTES],$/;"	m	struct:Blake2b
buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    buf: [u8; 2*BLAKE2S_BLOCKBYTES],$/;"	m	struct:Blake2s
buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/utf8.rs	/^    buf: [u8; 4],$/;"	m	struct:Encode
buf_used	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    buf_used: usize,$/;"	m	struct:SigningContext
buff	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: &'a [u8],$/;"	m	struct:RefReadBuffer
buff	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: &'a mut [u8],$/;"	m	struct:RefWriteBuffer
buff	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: Vec<u8>,$/;"	m	struct:OwnedReadBuffer
buff	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: Vec<u8>,$/;"	m	struct:OwnedWriteBuffer
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer: [u8; 128],$/;"	m	struct:FixedBuffer128
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer: [u8; 64],$/;"	m	struct:FixedBuffer64
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod buffer;$/;"	n
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Md5
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    buffer    : [u8; 16],$/;"	m	struct:Poly1305
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Ripemd160
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Sha1
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    buffer: FixedBuffer128,$/;"	m	struct:Engine512
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Engine256
buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Whirlpool
buffer_capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn buffer_capacity(&mut self, capacity: usize) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
buffer_capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn buffer_capacity(&mut self, capacity: usize) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
buffer_idx	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer_idx: usize,$/;"	m	struct:FixedBuffer128
buffer_idx	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer_idx: usize,$/;"	m	struct:FixedBuffer64
buflen	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    buflen: usize,$/;"	m	struct:Blake2b
buflen	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    buflen: usize,$/;"	m	struct:Blake2s
build_fn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    build_fn: BuildFn,$/;"	m	struct:Options
build_generics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn build_generics(cont: &Container, borrowed: &BorrowedLifetimes) -> syn::Generics {$/;"	f
build_generics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn build_generics(cont: &Container) -> syn::Generics {$/;"	f
build_method_vis	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn build_method_vis(&self) -> Visibility {$/;"	P	implementation:Options
builder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    builder: Box<CoreReaderBuilder>,$/;"	m	struct:ReaderBuilder
builder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    builder: CoreWriterBuilder,$/;"	m	struct:WriterBuilder
builder_for_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/lib.rs	/^fn builder_for_struct(ast: syn::DeriveInput) -> proc_macro2::TokenStream {$/;"	f
builder_ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn builder_ident(&self) -> Ident {$/;"	P	implementation:Options
builder_vis	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn builder_vis(&self) -> Visibility {$/;"	P	implementation:Options
byte	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    byte: u64,$/;"	m	struct:Position
byte	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn byte(&self) -> u64 {$/;"	P	implementation:Position
byte	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        pub byte: u8,$/;"	m	struct:rand::FixedByteRandom
byte_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn byte_headers(&mut self) -> Result<&ByteRecord> {$/;"	P	implementation:Reader
byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^mod byte_record;$/;"	n
byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    byte_record: ByteRecord,$/;"	m	struct:Headers
byte_records	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn byte_records(&mut self) -> ByteRecordsIter<R> {$/;"	P	implementation:Reader
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn bytes() {$/;"	f	module:tests
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn bytes(&mut self) -> DecodeResult<Vec<u8>> {$/;"	P	implementation:Decoder
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn bytes() {$/;"	f	module:tests
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn bytes(&mut self, x: &[u8]) -> EncodeResult {$/;"	P	implementation:Encoder
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn bytes(&self) -> Option<&Bytes> {$/;"	P	implementation:Cursor
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn bytes() {$/;"	f	module:tests
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn bytes() {$/;"	f	module:tests
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^    pub fn bytes(&'a self, curve: &ec::Curve) -> &'a [u8] { self.private_key.bytes(curve) }$/;"	P	implementation:EphemeralPrivateKey
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    bytes: [u8; SCALAR_MAX_BYTES],$/;"	m	struct:PrivateKey
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub fn bytes(&self, curve: &Curve) -> &[u8] { &self.bytes[..curve.elem_and_scalar_len] }$/;"	P	implementation:PrivateKey
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    bytes: [u8; ec::PKCS8_DOCUMENT_MAX_LEN],$/;"	m	struct:Document
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    pub bytes: &'static [u8],$/;"	m	struct:Template
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    bytes: KeyAndNonceBytes,$/;"	m	struct:Key
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        pub bytes: &'a [&'a [u8]],$/;"	m	struct:rand::FixedSliceSequenceRandom
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        pub bytes: &'a [u8],$/;"	m	struct:rand::FixedSliceRandom
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    bytes: OwnedReadBuffer$/;"	m	struct:CtrMode
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    bytes: OwnedReadBuffer$/;"	m	struct:CtrModeX8
bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        bytes: &'a [u8]$/;"	m	struct:no_panic::Slice
bytes	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn bytes(&self) -> [u8; 65] {$/;"	P	implementation:P256Key
bytes_borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn bytes_borrow() {$/;"	f	module:tests
bytes_borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn bytes_borrow(&mut self) -> DecodeResult<&[u8]> {$/;"	P	implementation:Decoder
bytes_chunked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn bytes_chunked(&self) -> Option<&LinkedList<Vec<u8>>> {$/;"	P	implementation:Cursor
bytes_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn bytes_iter(&mut self) -> DecodeResult<BytesIter<R>> {$/;"	P	implementation:Decoder
bytes_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn bytes_iter<'r, I: Iterator<Item=&'r [u8]>>(&mut self, iter: I) -> EncodeResult {$/;"	P	implementation:Encoder
bytes_plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn bytes_plain(&self) -> Option<&Vec<u8>> {$/;"	P	implementation:Cursor
bytes_until_reseed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    bytes_until_reseed: i64,$/;"	m	struct:ReseedingCore
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            c: &'c str,$/;"	m	struct:tests::borrowed::Foo
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            c: Option<i32>,$/;"	m	struct:tests::option_empty_field::Foo
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            c: Option<i32>,$/;"	m	struct:tests::option_invalid_field::Foo
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    c: f64,$/;"	m	struct:GammaLargeShape
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod c;$/;"	n
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  c: u32x4,$/;"	m	struct:ChaChaState
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        c: u32,$/;"	m	struct:test::Test
c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  c: u32x4,$/;"	m	struct:SalsaState
c_ldexpf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn c_ldexpf(x: f32, exp: isize) -> f32 {$/;"	f	module:ffi
c_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    c_len: usize,$/;"	m	struct:GhashWithC
calc_max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    macro_rules! calc_max {$/;"	M	module:stdtests
calc_max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    macro_rules! calc_max {$/;"	M	module:test
calculate_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^fn calculate_block<M: Mac>($/;"	f
can_absorb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    can_absorb: bool,  \/\/ Can absorb$/;"	m	struct:Sha3
can_squeeze	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    can_squeeze: bool,  \/\/ Can squeeze$/;"	m	struct:Sha3
cancel	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn cancel(&mut self) -> FidoResult<()> {$/;"	P	implementation:FidoCancelHandle
cancel_after	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn cancel_after<T>(&mut self, body: impl Fn(()) -> T) -> FidoResult<T> {$/;"	P	implementation:FidoCancelHandle
cancel_handle	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn cancel_handle(&mut self) -> FidoResult<FidoCancelHandle> {$/;"	P	implementation:FidoDevice
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    capacity: usize,$/;"	m	struct:ReaderBuilder
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    capacity: usize,$/;"	m	struct:WriterBuilder
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.buff.len() }$/;"	P	implementation:RefReadBuffer
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:BorrowedWriteBuffer
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:OwnedReadBuffer
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:OwnedWriteBuffer
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:RefWriteBuffer
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize;$/;"	P	interface:ReadBuffer
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize;$/;"	P	interface:WriteBuffer
capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn capacity(&self) -> usize {$/;"	P	implementation:Sha3Mode
case	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^mod case;$/;"	n
cast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^pub fn cast<T: NumCast, U: NumCast>(n: T) -> Option<U> {$/;"	f
cast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod cast;$/;"	n
cast_from_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn cast_from_int(i: Self::UInt) -> Self;$/;"	P	interface:FloatSIMDUtils
cast_unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^macro_rules! cast_unsigned {$/;"	M
cauchy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod cauchy;$/;"	n
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn cause(&self) -> Option<&Error> {$/;"	P	implementation:DecodeError
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn cause(&self) -> Option<&Error> {$/;"	P	implementation:EncodeError
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^    fn cause(&self) -> Option<&Error> {$/;"	P	implementation:ReadSliceError
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn cause(&self) -> &dyn Fail {$/;"	P	implementation:Error
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn cause(&self) -> Option<&dyn Fail> {$/;"	P	implementation:Box
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn cause(&self) -> Option<&dyn Fail> {$/;"	P	interface:Fail
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn cause(&self) -> &Fail {$/;"	P	implementation:Error
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    fn cause(&self) -> Option<&::std::error::Error> {$/;"	P	implementation:WeightedError
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    cause: Option<Box<stdError + Send + Sync>>,$/;"	m	struct:Error
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    fn cause(&self) -> Option<&stdError> {$/;"	P	implementation:Error
cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^    fn cause(&self) -> Option<&std::error::Error> { None }$/;"	P	implementation:Unspecified
cause	/home/pme/src/rust/ctap/src/error.rs	/^    fn cause(&self) -> Option<&dyn Fail> {$/;"	P	implementation:FidoError
causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn causes(&self) -> Causes {$/;"	P	implementation:Error
causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn causes(&self) -> Causes$/;"	P	interface:Fail
causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    pub fn causes(&self) -> Causes {$/;"	P	implementation:Fail
causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn causes(&self) -> Causes {$/;"	P	implementation:Error
cautious	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub fn cautious(hint: Option<usize>) -> usize {$/;"	f	module:size_hint
cbc_decryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
cbc_encryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
cbor	/home/pme/src/rust/ctap/src/lib.rs	/^    fn cbor(&mut self, request: cbor::Request) -> FidoResult<cbor::Response> {$/;"	P	implementation:FidoDevice
cbor	/home/pme/src/rust/ctap/src/lib.rs	/^mod cbor;$/;"	n
cbor_error_code	/home/pme/src/rust/ctap/src/error.rs	/^    fn cbor_error_code() {$/;"	f	module:test
cbrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cbrt(self) -> Self {$/;"	P	implementation:f32
cbrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cbrt(self) -> Self {$/;"	P	implementation:f64
cbrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cbrt(self) -> Self;$/;"	P	interface:Float
cbrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn cbrt(self) -> Self;$/;"	P	interface:Real
ceil	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ceil(self) -> Self {$/;"	P	implementation:f32
ceil	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ceil(self) -> Self {$/;"	P	implementation:f64
ceil	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ceil(self) -> Self {$/;"	P	interface:FloatCore
ceil	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ceil(self) -> Self;$/;"	P	interface:Float
ceil	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn ceil(self) -> Self;$/;"	P	interface:Real
ch	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/sha1.rs	/^fn ch(x: W32, y: W32, z: W32) -> W32 { (x & y) | (!x & z) }$/;"	f
chacha	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod chacha {$/;"	n
chacha	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/prng/mod.rs	/^#[doc(hidden)] pub mod chacha {$/;"	n
chacha	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod chacha;$/;"	n
chacha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20;$/;"	n
chacha20_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_10(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_1k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_64k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^mod chacha20_poly1305;$/;"	n
chacha20_poly1305_init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305.rs	/^pub fn chacha20_poly1305_init(ctx_buf: &mut [u8], key: &[u8])$/;"	f
chacha20_poly1305_openssh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^pub mod chacha20_poly1305_openssh;$/;"	n
chacha20_test_case_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^    fn chacha20_test_case_inner(key: &Key, ctr: &Counter, input: &[u8],$/;"	f	module:tests
chacha20_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^    pub fn chacha20_tests() {$/;"	f	module:tests
chacha20_xor_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^pub fn chacha20_xor_in_place(key: &Key, counter: &Counter, in_out: &mut [u8]) {$/;"	f
chacha20_xor_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^pub fn chacha20_xor_inner(key: &Key, counter: &Counter, input: *const u8,$/;"	f
chacha20_xor_overlapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^pub fn chacha20_xor_overlapping(key: &Key, counter: &Counter,$/;"	f
chacha20poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20poly1305;$/;"	n
chacha20poly1305_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_10(bh: & mut Bencher) {$/;"	f	module:bench
chacha20poly1305_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_1k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20poly1305_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_64k(bh: & mut Bencher) {$/;"	f	module:bench
chaining_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub chaining_len: usize,$/;"	m	struct:Algorithm
change_basis_a2x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_a2x(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_s2x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_s2x(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_x2a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2a(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_x2s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2s(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
channel_id	/home/pme/src/rust/ctap/src/lib.rs	/^    channel_id: [u8; 4],$/;"	m	struct:FidoCancelHandle
channel_id	/home/pme/src/rust/ctap/src/lib.rs	/^    channel_id: [u8; 4],$/;"	m	struct:FidoDevice
char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn char() {$/;"	f	module:tests
char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de> Deserialize<'de> for char {$/;"	c
check	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^pub fn check(value: &Value) -> bool {$/;"	f
check	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^        fn check<F: Float + FloatConst>(diff: F) {$/;"	f	function:tests::extra_logs
check	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^pub fn check(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^    pub fn check(self) -> Result<(), Vec<syn::Error>> {$/;"	P	implementation:Ctxt
check	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^mod check;$/;"	n
check_adjacent_tag_conflict	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_adjacent_tag_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn check_error(&self) -> HidResult<HidError> {$/;"	P	implementation:HidDevice
check_field_count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn check_field_count(&mut self) -> Result<()> {$/;"	P	implementation:Writer
check_flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_flatten(cx: &Ctxt, cont: &Container) {$/;"	f
check_flatten_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_flatten_field(cx: &Ctxt, style: Style, field: &Field) {$/;"	f
check_from_and_try_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_from_and_try_from(cx: &Ctxt, cont: &mut Container) {$/;"	f
check_getter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_getter(cx: &Ctxt, cont: &Container) {$/;"	f
check_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_identifier(cx: &Ctxt, cont: &Container) {$/;"	f
check_internal_tag_field_name_conflict	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_internal_tag_field_name_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_minimum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    fn check_minimum(input: untrusted::Input, min_value: u8) -> Result<(), error::Unspecified> {$/;"	f	function:nonnegative_integer
check_num_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn check_num_ops() {$/;"	f
check_numassign_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn check_numassign_ops() {$/;"	f
check_numref_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn check_numref_ops() {$/;"	f
check_per_nonce_max_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^fn check_per_nonce_max_bytes(alg: &Algorithm, in_out_len: usize)$/;"	f
check_private_key_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    check_private_key_bytes: fn(bytes: &[u8]) -> Result<(), error::Unspecified>,$/;"	m	struct:Curve
check_refnum_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn check_refnum_ops() {$/;"	f
check_refref_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn check_refref_ops() {$/;"	f
check_s_lt_l	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^fn check_s_lt_l(s: &[u8]) -> bool$/;"	f
check_scalar_big_endian_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn check_scalar_big_endian_bytes($/;"	f
check_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    fn check_size(&self, res: i32) -> HidResult<usize> {$/;"	P	implementation:HidDevice
check_state_layout	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^pub fn check_state_layout() {$/;"	f
check_tags	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub check_tags: bool$/;"	m	struct:Config
check_transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_transparent(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check_variant_skip_attrs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn check_variant_skip_attrs(cx: &Ctxt, cont: &Container) {$/;"	f
checked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs	/^pub mod checked;$/;"	n
checked_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_add(&self, v: &Self) -> Option<Self>;$/;"	P	interface:CheckedAdd
checked_div	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_div(&self, v: &Self) -> Option<Self>;$/;"	P	interface:CheckedDiv
checked_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^macro_rules! checked_impl {$/;"	M
checked_impl_unary	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^macro_rules! checked_impl_unary {$/;"	M
checked_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_mul(&self, v: &Self) -> Option<Self>;$/;"	P	interface:CheckedMul
checked_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_neg(&self) -> Option<Self>;$/;"	P	interface:CheckedNeg
checked_pow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^pub fn checked_pow<T: Clone + One + CheckedMul>(mut base: T, mut exp: usize) -> Option<T> {$/;"	f
checked_rem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_rem(&self, v: &Self) -> Option<Self>;$/;"	P	interface:CheckedRem
checked_shift_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^macro_rules! checked_shift_impl {$/;"	M
checked_shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_shl(&self, rhs: u32) -> Option<Self>;$/;"	P	interface:CheckedShl
checked_shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_shr(&self, rhs: u32) -> Option<Self>;$/;"	P	interface:CheckedShr
checked_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs	/^    fn checked_sub(&self, v: &Self) -> Option<Self>;$/;"	P	interface:CheckedSub
chi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    chi: ChiSquared,$/;"	m	struct:StudentT
choose	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn choose<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {$/;"	P	interface:Rng
choose	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose<R>(&self, rng: &mut R) -> Option<&Self::Item>$/;"	P	implementation:T
choose	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose<R>(&self, rng: &mut R) -> Option<&Self::Item>$/;"	P	interface:SliceRandom
choose	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose<R>(mut self, rng: &mut R) -> Option<Self::Item>$/;"	P	interface:IteratorRandom
choose_multiple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_multiple<R>(&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item/;"	P	interface:SliceRandom
choose_multiple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_multiple<R>(&self, rng: &mut R, amount: usize)$/;"	P	implementation:T
choose_multiple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_multiple<R>(mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>$/;"	P	interface:IteratorRandom
choose_multiple_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_multiple_fill<R>(mut self, rng: &mut R, buf: &mut [Self::Item])$/;"	P	interface:IteratorRandom
choose_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn choose_mut<'a, T>(&mut self, values: &'a mut [T]) -> Option<&'a mut T> {$/;"	P	interface:Rng
choose_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_mut<R>(&mut self, rng: &mut R) -> Option<&mut Self::Item>$/;"	P	implementation:T
choose_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_mut<R>(&mut self, rng: &mut R) -> Option<&mut Self::Item>$/;"	P	interface:SliceRandom
choose_weighted	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_weighted<R, F, B, X>(&self, rng: &mut R, weight: F) -> Result<&Self::Item, Weighte/;"	P	implementation:T
choose_weighted	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_weighted<R, F, B, X>(&self, rng: &mut R, weight: F) -> Result<&Self::Item, Weighte/;"	P	interface:SliceRandom
choose_weighted_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_weighted_mut<R, F, B, X>(&mut self, rng: &mut R, weight: F) -> Result<&mut Self::I/;"	P	implementation:T
choose_weighted_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn choose_weighted_mut<R, F, B, X>(&mut self, rng: &mut R, weight: F) -> Result<&mut Self::I/;"	P	interface:SliceRandom
chunk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    pub fn chunk(dest: &mut [u8]) -> Result<usize, error::Unspecified> {$/;"	f	module:sysrand_chunk
chunk_remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        chunk_remaining: usize,$/;"	m	struct:test::ChunkHintedIterator
chunk_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        chunk_size: usize,$/;"	m	struct:test::ChunkHintedIterator
cid	/home/pme/src/rust/ctap/src/packet.rs	/^    pub cid: [u8; 4],$/;"	m	struct:ContPacket
cid	/home/pme/src/rust/ctap/src/packet.rs	/^    pub cid: [u8; 4],$/;"	m	struct:InitPacket
cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CtrTest
cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::TestData
cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    cipher: Box<SynchronousStreamCipher + 'a>,$/;"	m	struct:AesGcm
cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CbcTest
cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CtrTest
cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::EcbTest
cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    cipher  : ChaCha20,$/;"	m	struct:ChaCha20Poly1305
cipher_text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                cipher_text:  Vec<u8>,$/;"	m	struct:test::TestVector
cipher_text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    cipher_text: Vec<u8>,$/;"	m	struct:test::TestVector
ciphertext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        ciphertext: Vec<u8>$/;"	m	struct:test::Test
circular_shift	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^fn circular_shift(bits: u32, word: u32) -> u32 {$/;"	f
clamp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub fn clamp<T: PartialOrd>(input: T, min: T, max: T) -> T {$/;"	f
clamp_max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub fn clamp_max<T: PartialOrd>(input: T, max: T) -> T {$/;"	f
clamp_max_nan_max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn clamp_max_nan_max() {$/;"	f
clamp_min	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub fn clamp_min<T: PartialOrd>(input: T, min: T) -> T {$/;"	f
clamp_min_nan_min	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn clamp_min_nan_min() {$/;"	f
clamp_nan_max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn clamp_nan_max() {$/;"	f
clamp_nan_min	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn clamp_nan_min() {$/;"	f
clamp_nan_min_max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn clamp_nan_min_max() {$/;"	f
clamp_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn clamp_test() {$/;"	f
classify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn classify(self) -> FpCategory {$/;"	P	implementation:f32
classify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn classify(self) -> FpCategory {$/;"	P	implementation:f64
classify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn classify(self) -> FpCategory;$/;"	P	interface:Float
classify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn classify(self) -> FpCategory;$/;"	P	interface:FloatCore
clear	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:ByteRecord
clear	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:StringRecord
clear	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn clear(&mut self) {$/;"	P	implementation:Buffer
client_data_hash	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub client_data_hash: &'a [u8],$/;"	m	struct:GetAssertionRequest
client_data_hash	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub client_data_hash: &'a [u8],$/;"	m	struct:MakeCredentialRequest
client_data_hash	/home/pme/src/rust/ctap/src/lib.rs	/^    client_data_hash: &'a [u8],$/;"	m	struct:FidoAssertionRequest
client_data_hash	/home/pme/src/rust/ctap/src/lib.rs	/^    client_data_hash: &'a [u8],$/;"	m	struct:FidoCredentialRequest
client_pin	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub client_pin: Option<bool>,$/;"	m	struct:OptionsInfo
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^        pub fn clone(&self) -> T {$/;"	P	implementation:test::Wi128
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn clone(&self) -> ReseedingCore<R, Rsdr> {$/;"	f
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn clone(&self) -> ReseedingRng<R, Rsdr> {$/;"	f
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:BoxedLimbs
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Elem
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiDecryptor { fn clone(&self) -> AesNiDecryptor { *self } }$/;"	P	implementation:AesNiDecryptor
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiEncryptor { fn clone(&self) -> AesNiEncryptor { *self } }$/;"	P	implementation:AesNiEncryptor
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Clone for Blake2b { fn clone(&self) -> Blake2b { *self } }$/;"	P	implementation:Blake2b
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Clone for Blake2s { fn clone(&self) -> Blake2s { *self } }$/;"	P	implementation:Blake2s
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Clone for ChaCha20 { fn clone(&self) -> ChaCha20 { *self } }$/;"	P	implementation:ChaCha20
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer128 { fn clone(&self) -> FixedBuffer128 { *self } }$/;"	P	implementation:FixedBuffer128
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer64 { fn clone(&self) -> FixedBuffer64 { *self } }$/;"	P	implementation:FixedBuffer64
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for Ghash { fn clone(&self) -> Ghash { *self } }$/;"	P	implementation:Ghash
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for GhashWithC { fn clone(&self) -> GhashWithC { *self } }$/;"	P	implementation:GhashWithC
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Clone for Hc128 { fn clone(&self) -> Hc128 { *self } }$/;"	P	implementation:Hc128
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Clone for Rc4 { fn clone(&self) -> Rc4 { *self } }$/;"	P	implementation:Rc4
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Clone for Salsa20 { fn clone(&self) -> Salsa20 { *self } }$/;"	P	implementation:Salsa20
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Sha3
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Clone for Sosemanuk { fn clone(&self) -> Sosemanuk { *self } }$/;"	P	implementation:Sosemanuk
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:CowStrDeserializer
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:StringDeserializer
clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	f
cmd	/home/pme/src/rust/ctap/src/packet.rs	/^    pub cmd: CtapCommand,$/;"	m	struct:InitPacket
cnt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    cnt: usize,$/;"	m	struct:Hc128
code	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    code: Vec<u8>$/;"	m	struct:MacResult
code	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn code<'s>(&'s self) -> &'s [u8] {$/;"	P	implementation:MacResult
code	/home/pme/src/rust/ctap/src/error.rs	/^    pub fn code(&self) -> u8 {$/;"	P	implementation:CborErrorCode
collect_lifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn collect_lifetimes(ty: &syn::Type, out: &mut BTreeSet<syn::Lifetime>) {$/;"	f
collect_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn collect_map<K, V, I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn collect_str<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
collect_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> fmt::Result$/;"	P	implementation:Formatter
collect_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
columnround	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^fn columnround(state: &mut SalsaState) -> () {$/;"	f
comment	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn comment(&mut self, comment: Option<u8>) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
common	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub common: &'static CommonOps,$/;"	m	struct:PrivateKeyOps
common	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub common: &'static CommonOps,$/;"	m	struct:PublicKeyOps
common	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub common: &'static CommonOps,$/;"	m	struct:ScalarOps
compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn compat(self) -> Compat<Error> {$/;"	P	implementation:Error
compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn compat(self) -> Compat<Self>$/;"	P	interface:Fail
compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^mod compat;$/;"	n
compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^    fn compat(self) -> Result<T, Compat<E>> {$/;"	f
compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^    fn compat(self) -> Result<T, Compat<E>>;$/;"	P	interface:ResultExt
compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn compat(self) -> Compat<Error> {$/;"	P	implementation:Error
compile_time_assert_clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn compile_time_assert_clone<T: Clone>() {}$/;"	f
compile_time_assert_copy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn compile_time_assert_copy<T: Copy>() {}$/;"	f
compile_time_assert_debug	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn compile_time_assert_debug<T: core::fmt::Debug>() {}$/;"	f
compile_time_assert_send	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn compile_time_assert_send<T: Send>() {}$/;"	f
compile_time_assert_sync	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn compile_time_assert_sync<T: Sync>() {}$/;"	f
completed_data_blocks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    completed_data_blocks: u64,$/;"	m	struct:Context
compress	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn compress(&mut self) {$/;"	P	implementation:Blake2b
compress	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn compress(&mut self) {$/;"	P	implementation:Blake2s
compute	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn compute<T: Copy>(x: &T, y: T) -> T$/;"	f	function:check_refnum_ops
compute	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn compute<T: Num + Copy>(x: T, y: T) -> T {$/;"	f	function:check_num_ops
compute	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn compute<T: NumAssign + Copy>(mut x: T, y: T) -> T {$/;"	f	function:check_numassign_ops
compute	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn compute<T: NumRef>(x: T, y: &T) -> T {$/;"	f	function:check_numref_ops
compute	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn compute<T>(x: &T, y: &T) -> T$/;"	f	function:check_refref_ops
compute_public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^    pub fn compute_public_key(&self, out: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	P	implementation:EphemeralPrivateKey
compute_public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub fn compute_public_key($/;"	P	implementation:PrivateKey
computed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    computed: bool, \/\/ whether the final digest has been computed$/;"	m	struct:Blake2b
computed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    computed: bool, \/\/ whether the final digest has been computed$/;"	m	struct:Blake2s
computed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    computed: bool,$/;"	m	struct:Ripemd160
computed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    computed: bool,$/;"	m	struct:Sha1
cond_xor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn cond_xor(self, x: Gf128, y: Gf128) -> Gf128 {$/;"	P	implementation:Gf128
config	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    config: Config$/;"	m	struct:Decoder
constant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/macros.rs	/^macro_rules! constant {$/;"	M
constant_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod constant_time;$/;"	n
constrain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^pub fn constrain<T: ?Sized>(t: &T) -> &T {$/;"	f
construct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn construct(a: u32, b: u32, c: u32, d: u32, bit: u32) -> u16 {$/;"	f	function:bit_slice_4x4_with_u16
construct_ctr_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn construct_ctr_x8(in_ctr: &[u8], out_ctr_x8: &mut [u8]) {$/;"	f
consume_affine_point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_affine_point($/;"	f	module:tests
consume_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub fn consume_bool(&mut self, key: &str) -> bool {$/;"	P	implementation:TestCase
consume_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub fn consume_bytes(&mut self, key: &str) -> Vec<u8> {$/;"	P	implementation:TestCase
consume_digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub fn consume_digest_alg(&mut self, key: &str) -> Option<&'static digest::Algorithm> {$/;"	P	implementation:TestCase
consume_elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_elem(ops: &CommonOps, test_case: &mut test::TestCase, name: &str) -> Elem<R> {$/;"	f	module:tests
consume_elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn consume_elem<M>($/;"	f	module:tests
consume_elem_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn consume_elem_unchecked<M>($/;"	f	module:tests
consume_jacobian_point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_jacobian_point($/;"	f	module:tests
consume_modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn consume_modulus<M>(test_case: &mut test::TestCase, name: &str) -> Modulus<M> {$/;"	f	module:tests
consume_nonnegative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn consume_nonnegative(test_case: &mut test::TestCase, name: &str) -> Nonnegative {$/;"	f	module:tests
consume_optional_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub fn consume_optional_string(&mut self, key: &str) -> Option<String> {$/;"	P	implementation:TestCase
consume_padded_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_padded_bytes($/;"	f	module:tests
consume_point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_point(ops: &PrivateKeyOps, test_case: &mut test::TestCase, name: &str) -> TestPoi/;"	f	module:tests
consume_point_elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^        fn consume_point_elem(ops: &CommonOps, elems: &std::vec::Vec<&str>, i: usize) -> Elem<R>/;"	f	function:tests::consume_point
consume_point_elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_point_elem($/;"	f	module:tests
consume_public_exponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn consume_public_exponent(test_case: &mut test::TestCase, name: &str) -> PublicExponent {$/;"	f	module:tests
consume_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_scalar(ops: &CommonOps, test_case: &mut test::TestCase, name: &str) -> Scalar {$/;"	f	module:tests
consume_scalar_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn consume_scalar_mont($/;"	f	module:tests
consume_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub fn consume_string(&mut self, key: &str) -> String {$/;"	P	implementation:TestCase
consume_usize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub fn consume_usize(&mut self, key: &str) -> usize {$/;"	P	implementation:TestCase
consume_usize_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    pub fn consume_usize_bits(&mut self, key: &str) -> bits::BitLength {$/;"	P	implementation:TestCase
content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        content: &'a Content<'de>,$/;"	m	struct:content::ContentRefDeserializer
content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        content: Content<'de>,$/;"	m	struct:content::ContentDeserializer
content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub content: Content<'de>,$/;"	m	struct:content::TaggedContent
content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^mod content {$/;"	n
content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^mod content {$/;"	n
context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn context<D: Display + Send + Sync + 'static>(self, context: D) -> Context<D> {$/;"	P	implementation:Error
context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn context<D>(self, context: D) -> Context<D>$/;"	P	interface:Fail
context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^mod context;$/;"	n
context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^    fn context<D>(self, context: D) -> Result<T, Context<D>>$/;"	P	interface:ResultExt
context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^    fn context<D>(self, context: D) -> Result<T, Context<D>>$/;"	f
context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn context<D: Display + Send + Sync + 'static>(self, context: D) -> Context<D> {$/;"	P	implementation:Error
conv_hid_device_info	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^unsafe fn conv_hid_device_info(src: *mut ffi::HidDeviceInfo) -> HidResult<DeviceInfo> {$/;"	f
convert_deg_rad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn convert_deg_rad() {$/;"	f	module:tests
convert_deg_rad_std	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn convert_deg_rad_std() {$/;"	f	module:tests
cookbook	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^pub mod cookbook;$/;"	n
copy_memory	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn copy_memory(src: &[u8], dst: &mut [u8]) {$/;"	f
core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    core: Box<CoreReader>,$/;"	m	struct:Reader
core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    core: CoreWriter,$/;"	m	struct:Writer
core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub core: R,$/;"	m	struct:BlockRng
core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub core: R,$/;"	m	struct:BlockRng64
core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^    mod core {$/;"	n	module:lib
cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cos(self) -> Self {$/;"	P	implementation:f32
cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cos(self) -> Self {$/;"	P	implementation:f64
cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cos(self) -> Self;$/;"	P	interface:Float
cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn cos(self) -> Self;$/;"	P	interface:Real
cosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cosh(self) -> Self {$/;"	P	implementation:f32
cosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cosh(self) -> Self {$/;"	P	implementation:f64
cosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn cosh(self) -> Self;$/;"	P	interface:Float
cosh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn cosh(self) -> Self;$/;"	P	interface:Real
cost	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        cost: u32,$/;"	m	struct:test::Test
count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn count(self) -> usize {$/;"	P	implementation:ByteRecordIter
count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn count(self) -> usize {$/;"	P	implementation:StringRecordIter
count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    count: usize$/;"	m	struct:Pool
count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    count: usize,$/;"	m	struct:MapDeserializer
count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    count: usize,$/;"	m	struct:SeqDeserializer
count_ones	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn count_ones(self) -> u32;$/;"	P	interface:PrimInt
count_zeros	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn count_zeros(self) -> u32;$/;"	P	interface:PrimInt
create_keys	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn create_keys<D: Digest>(digest: &mut D, key: &[u8]) -> (Vec<u8>, Vec<u8>) {$/;"	f
cred_type	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub cred_type: String,$/;"	m	struct:PublicKeyCredentialDescriptor
credential	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub credential: Option<PublicKeyCredentialDescriptor>,$/;"	m	struct:GetAssertionResponse
credential	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn credential(mut self, credential: &'a &'a FidoCredential) -> Self {$/;"	P	implementation:FidoAssertionRequestBuilder
credential_id	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub credential_id: Vec<u8>,$/;"	m	struct:AttestedCredentialData
credential_public_key	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub credential_public_key: CoseKey,$/;"	m	struct:AttestedCredentialData
credentials	/home/pme/src/rust/ctap/src/lib.rs	/^    credentials: &'a [&'a FidoCredential],$/;"	m	struct:FidoAssertionRequest
crypto	/home/pme/src/rust/ctap/src/lib.rs	/^mod crypto;$/;"	n
cryptoutil	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod cryptoutil;$/;"	n
ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        ctr: Vec<u8>,$/;"	m	struct:test::CtrTest
ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ctr($/;"	f
ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        ctr: Vec<u8>,$/;"	m	struct:test::CtrTest
ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    ctr: Vec<u8>,$/;"	m	struct:CtrMode
ctr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    ctr: [u8; CTR_LEN],$/;"	m	struct:FortunaGenerator
ctr_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    ctr_x8: Vec<u8>,$/;"	m	struct:CtrModeX8
ctx_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    ctx_buf: [u64; KEY_CTX_BUF_ELEMS],$/;"	m	struct:Key
ctx_prototype	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    ctx_prototype: SigningContext,$/;"	m	struct:SigningKey
ctxt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^mod ctxt;$/;"	n
cumulative_weights	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    cumulative_weights: Vec<X>,$/;"	m	struct:WeightedIndex
cur_pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    cur_pos: Position,$/;"	m	struct:ReaderState
current	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        pub current: core::cell::UnsafeCell<usize>,$/;"	m	struct:rand::FixedSliceSequenceRandom
current_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn current_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	P	interface:FixedBuffer
curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub curve: &'static Curve,$/;"	m	struct:AgreementAlgorithmImpl
curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    curve: &'static ec::Curve,$/;"	m	struct:Algorithm
curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^pub mod curve;$/;"	n
curve25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^pub mod curve25519;$/;"	n
curve25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519(n: &[u8], p: &[u8]) -> [u8; 32] {$/;"	f
curve25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod curve25519;$/;"	n
curve25519_base	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519_base(x: &[u8]) -> [u8; 32] {$/;"	f
curve_id_index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    pub curve_id_index: usize,$/;"	m	struct:Template
curve_oid	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    pub fn curve_oid(&self) -> &[u8] { &self.alg_id_value()[self.curve_id_index..] }$/;"	P	implementation:Template
custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn custom<T: fmt::Display>(msg: T) -> DeserializeError {$/;"	P	implementation:DeserializeError
custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn custom<T: fmt::Display>(msg: T) -> Error {$/;"	P	implementation:Error
custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    custom: Option<bool>,$/;"	m	struct:FieldLevelSetter
custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn custom<T>(msg: T) -> Self$/;"	P	implementation:Error
custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn custom<T>(_: T) -> Self$/;"	P	implementation:Error
custom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn custom<T: Display>(_msg: T) -> Self {$/;"	P	implementation:Error
custom_serde_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn custom_serde_path(&self) -> Option<&syn::Path> {$/;"	P	implementation:Container
cx	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:Attr
cx	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:VecAttr
d	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    d: f64$/;"	m	struct:GammaLargeShape
d	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    d: Scalar<R>,$/;"	m	struct:Key
d	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  d: u32x4$/;"	m	struct:ChaChaState
d	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^struct Gf128 { d: simd::u32x4 }$/;"	m	struct:Gf128
d	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  d: u32x4$/;"	m	struct:SalsaState
darling_opts	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^mod darling_opts;$/;"	n
darwin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^mod darwin {$/;"	n
data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    data: darling::ast::Data<darling::util::Ignored, Field>,$/;"	m	struct:Options
data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    data: *const FailData,$/;"	m	struct:TraitObject
data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    data: *const FailData,$/;"	m	struct:TraitObject
data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        data: Vec<TestData>$/;"	m	struct:test::Test
data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        data: Vec<u8>,$/;"	m	struct:test::Test
data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub data: Data<'a>,$/;"	m	struct:Container
data_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    data_len: usize$/;"	m	struct:ChaCha20Poly1305
db_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    db_len: usize,$/;"	m	struct:PSSMetrics
dbl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn dbl(&self) -> GeP1P1 {$/;"	P	implementation:GeP2
dbl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn dbl(&self) -> GeP1P1 {$/;"	P	implementation:GeP3
de	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn de<D: DeserializeOwned>(fields: &[&str]) -> Result<D, Error> {$/;"	f	module:tests
de	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^pub mod de;$/;"	n
de	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/mod.rs	/^pub mod de;$/;"	n
de	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod de;$/;"	n
de_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
de_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
de_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
de_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
de_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
de_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
de_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn de_headers<D: DeserializeOwned>($/;"	f	module:tests
de_lifetime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn de_lifetime(&self) -> syn::Lifetime {$/;"	P	implementation:BorrowedLifetimes
de_lifetime_def	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn de_lifetime_def(&self) -> Option<syn::LifetimeDef> {$/;"	P	implementation:BorrowedLifetimes
debug	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/log_disabled.rs	/^macro_rules! debug {$/;"	M
debug	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^#[cfg(not(feature = "log"))] macro_rules! debug { ($($x:tt)*) => () }$/;"	M
debug	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod debug;$/;"	n
decide_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn decide_identifier($/;"	f
decide_tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn decide_tag($/;"	f
declare_error_trait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
declare_error_trait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
decode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub fn decode<T: AsRef<[u8]>>(data: T) -> Result<Vec<u8>, FromHexError> {$/;"	f
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(&self, reader: R) -> FidoResult<Response> {$/;"	P	implementation:Request
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(decoder: &mut Decoder<R>) -> FidoResult<Self> {$/;"	P	implementation:OptionsInfo
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(decoder: &mut Decoder<R>) -> FidoResult<Self> {$/;"	P	implementation:PublicKeyCredentialDescriptor
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(generic: &mut GenericDecoder<R>) -> FidoResult<Self> {$/;"	P	implementation:CoseKey
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(mut reader: R) -> FidoResult<Self> {$/;"	P	implementation:ClientPinResponse
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(mut reader: R) -> FidoResult<Self> {$/;"	P	implementation:GetAssertionResponse
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(mut reader: R) -> FidoResult<Self> {$/;"	P	implementation:GetInfoResponse
decode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn decode<R: ReadBytesExt>(mut reader: R) -> FidoResult<Self> {$/;"	P	implementation:MakeCredentialResponse
decode_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn decode_key(&mut self, level: usize) -> DecodeResult<Key> {$/;"	P	implementation:GenericDecoder
decode_once	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn decode_once(self, m: &Modulus<M>) -> Elem<M, <E as ReductionEncoding>::Output> {$/;"	P	implementation:Elem
decode_to_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub fn decode_to_slice<T: AsRef<[u8]>>(data: T, out: &mut [u8]) -> Result<(), FromHexError> {$/;"	f
decode_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn decode_value(&mut self, level: usize) -> DecodeResult<Value> {$/;"	P	implementation:GenericDecoder
decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    decoder: &'r mut Decoder<R>$/;"	m	struct:BytesIter
decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    decoder: &'r mut Decoder<R>$/;"	m	struct:TextIter
decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    decoder: Decoder<R>$/;"	m	struct:GenericDecoder
decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn decoder(s: &str) -> Decoder<Cursor<Vec<u8>>> {$/;"	f	module:tests
decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/lib.rs	/^pub mod decoder;$/;"	n
deconstruct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn deconstruct(bs: &Bs8State<u16>, bit: u32) -> u32 {$/;"	f	function:un_bit_slice_4x4_with_u16
decrease_masked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn decrease_masked(self, mask: Self::Mask) -> Self;$/;"	P	interface:FloatSIMDUtils
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^	fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool;$/;"	P	interface:AeadDecryptor
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8])  -> bool {$/;"	P	implementation:AesGcm
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrMode
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrModeX8
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:CbcDecryptor
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:EcbDecryptor
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	P	implementation:Blowfish
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:ChaCha20
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool {$/;"	P	implementation:ChaCha20Poly1305
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Hc128
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Rc4
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Salsa20
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Sosemanuk
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Box
decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	interface:Decryptor
decrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:AesNiDecryptor
decrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Blowfish
decrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockDecryptor
decrypt_block_aesni	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn decrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockDecryptorX8
decrypt_core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn decrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
decrypt_eay_test_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_eay_test_vectors() {$/;"	f	module:test
decrypt_token	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub fn decrypt_token(&self, data: &mut [u8]) -> FidoResult<PinToken> {$/;"	P	implementation:SharedSecret
decryptor	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub fn decryptor(&self) -> Box<dyn Decryptor + 'static> {$/;"	P	implementation:SharedSecret
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn default() -> BigEndian {$/;"	P	implementation:BigEndian
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn default() -> LittleEndian {$/;"	P	implementation:LittleEndian
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn default() -> Config { DEFAULT_CONFIG }$/;"	P	implementation:Config
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn default() -> Bounds {$/;"	P	implementation:Bounds
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn default() -> ByteRecord {$/;"	P	implementation:ByteRecord
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    fn default() -> QuoteStyle {$/;"	P	implementation:QuoteStyle
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    fn default() -> Terminator {$/;"	P	implementation:Terminator
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    fn default() -> Trim {$/;"	P	implementation:Trim
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn default() -> ReaderBuilder {$/;"	P	implementation:ReaderBuilder
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn default() -> StringRecord {$/;"	P	implementation:StringRecord
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn default() -> WriterBuilder {$/;"	P	implementation:WriterBuilder
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    default: Option<DefaultExpression>,$/;"	m	struct:Field
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    default: Option<DefaultExpression>,$/;"	m	struct:Options
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn default() -> Self {$/;"	P	implementation:BuildFn
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn default() -> Self {$/;"	P	implementation:EntropyRng
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn default() -> Self {$/;"	P	implementation:EntropyRng
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^    fn default() -> ThreadRng {$/;"	P	implementation:ThreadRng
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn default() -> u32x4 {$/;"	P	implementation:u32x4
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Container
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Field
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Container
default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Field
default	/home/pme/src/rust/ctap/src/cbor.rs	/^    fn default() -> Self {$/;"	P	implementation:OptionsInfo
default_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn default_param(outlen: u8) -> Blake2bParam {$/;"	P	implementation:Blake2b
default_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn default_param(outlen: u8) -> Blake2sParam {$/;"	P	implementation:Blake2s
define_aes_dec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec($/;"	M
define_aes_dec_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec_x8($/;"	M
define_aes_enc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc($/;"	M
define_aes_enc_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc_x8($/;"	M
define_aes_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl($/;"	M
define_aes_impl_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl_x8($/;"	M
define_aes_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct($/;"	M
define_aes_struct_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct_x8($/;"	M
define_metrics_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/c.rs	/^macro_rules! define_metrics_tests {$/;"	M
define_type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/c.rs	/^macro_rules! define_type {$/;"	M
delegate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    delegate: S,$/;"	m	struct:TaggedSerializer
delimiter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn delimiter(&mut self, delimiter: u8) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
delimiter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn delimiter(&mut self, delimiter: u8) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
denom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    denom: ChiSquared,$/;"	m	struct:FisherF
deny_unknown_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    deny_unknown_fields: bool,$/;"	m	struct:Container
deny_unknown_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn deny_unknown_fields(&self) -> bool {$/;"	P	implementation:Container
deprecated	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^#[doc(hidden)] mod deprecated;$/;"	n
deprecated_saturating_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^macro_rules! deprecated_saturating_impl {$/;"	M
deprecation_notes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    deprecation_notes: DeprecationNotes,$/;"	m	struct:Options
deprecation_notes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn deprecation_notes(&self) -> &DeprecationNotes {$/;"	P	implementation:FieldWithDefaults
depth	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    depth: u8,$/;"	m	struct:Blake2bParam
depth	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    depth: u8,$/;"	m	struct:Blake2sParam
der	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod der;$/;"	n
deref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn deref(&self) -> &Self::Target { &self.limbs }$/;"	P	implementation:BoxedLimbs
deref_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! deref_impl {$/;"	M
deref_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target { &mut self.limbs }$/;"	P	implementation:BoxedLimbs
derive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/lib.rs	/^pub fn derive(input: TokenStream) -> TokenStream {$/;"	f
derive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    derive: PathList,$/;"	m	struct:Options
derive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pbkdf2.rs	/^pub fn derive($/;"	f
derive_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pbkdf2.rs	/^fn derive_block(secret: &hmac::SigningKey, iterations: u32, salt: &[u8], idx: u32, out: &mut [u8/;"	f
derive_debug_via_self	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/debug.rs	/^macro_rules! derive_debug_via_self {$/;"	M
derive_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^pub fn derive_deserialize(input: TokenStream) -> TokenStream {$/;"	f
derive_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn derive_key(key: &mut [u8], mask: u8) {$/;"	f
derive_serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^pub fn derive_serialize(input: TokenStream) -> TokenStream {$/;"	f
derive_using_chacha	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    pub fn derive_using_chacha(chacha20_key: &chacha::Key,$/;"	P	implementation:Key
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:DecodeError
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:EncodeError
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:ReadSliceError
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:DeserializeError
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:DeserializeErrorKind
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:WeightedError
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub fn description(self) -> &'static str {$/;"	P	implementation:ErrorKind
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^    fn description(&self) -> &str { "ring::error::Unspecified" }$/;"	P	implementation:Unspecified
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description	/home/pme/src/rust/ctap/src/error.rs	/^    pub fn description(&self) -> Option<&'static str> {$/;"	P	implementation:CborErrorCode
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn deserialize<'de, D: Deserialize<'de>>($/;"	P	implementation:ByteRecord
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn deserialize<D>(&mut self) -> DeserializeRecordsIter<R, D>$/;"	P	implementation:Reader
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn deserialize<'de, D: Deserialize<'de>>($/;"	P	implementation:StringRecord
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^pub fn deserialize<'de, D, T>(deserializer: D) -> Result<T, D::Error>$/;"	f
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn deserialize<D>(deserializer: D) -> Result<IgnoredAny, D::Error>$/;"	P	implementation:IgnoredAny
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration::deserialize::Field
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime::deserialize::Field
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:deserialize::Field
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:range::Field
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(_deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:CString
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:IpAddr
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:OsString
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Path
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PathBuf
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PhantomData
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SocketAddr
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:String
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:T
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:bool
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:char
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:str
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:u8
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	f
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	interface:Deserialize
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:DeserializeSeed
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>$/;"	f
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f	module:private
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:content::Content
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagContentOtherFieldVisitor
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentFieldVisitor
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f	module:content
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    deserialize: RenameRule,$/;"	m	struct:RenameAllRules
deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    deserialize: String,$/;"	m	struct:Name
deserialize_adjacently_tagged_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_adjacently_tagged_enum($/;"	f
deserialize_aliases	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    deserialize_aliases: Vec<String>,$/;"	m	struct:Name
deserialize_aliases	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn deserialize_aliases(&self) -> Vec<String> {$/;"	P	implementation:Name
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_any<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_body	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_bool<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_byte_buf<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^pub fn deserialize_byte_record<'de, D: Deserialize<'de>>($/;"	f
deserialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_bytes<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_char<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_custom_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_custom_identifier($/;"	f
deserialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_enum<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! deserialize_enum {$/;"	M
deserialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_enum<V>($/;"	P	interface:Deserializer
deserialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_enum<V>($/;"	f	module:content
deserialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_enum($/;"	f
deserialize_externally_tagged_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_externally_tagged_enum($/;"	f
deserialize_externally_tagged_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_externally_tagged_newtype_variant($/;"	f
deserialize_externally_tagged_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_externally_tagged_variant($/;"	f
deserialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_f32<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_f64<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_from(type_from: &syn::Type) -> Fragment {$/;"	f
deserialize_generated_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_generated_identifier($/;"	f
deserialize_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_identifier<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_identifier($/;"	f
deserialize_ignored_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_ignored_any<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_ignored_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_ignored_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	implementation:String
deserialize_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	f
deserialize_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	interface:Deserialize
deserialize_in_place_body	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_in_place_body(_cont: &Container, _params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_in_place_body	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_in_place_body(cont: &Container, params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^macro_rules! deserialize_int {$/;"	M
deserialize_integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_integer<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_internally_tagged_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_internally_tagged_enum($/;"	f
deserialize_internally_tagged_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_internally_tagged_variant($/;"	f
deserialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_map<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_map($/;"	f
deserialize_map_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_map_in_place($/;"	f
deserialize_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn deserialize_name(&self) -> String {$/;"	P	implementation:Name
deserialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_newtype_struct<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	interface:Deserializer
deserialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_newtype_struct<V>($/;"	f	module:content
deserialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, Self::Er/;"	f
deserialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_newtype_struct($/;"	f
deserialize_newtype_struct_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_newtype_struct_in_place(params: &Parameters, field: &Field) -> TokenStream {$/;"	f
deserialize_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_option<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_other<V>() -> Result<V, E> {$/;"	f
deserialize_renamed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    deserialize_renamed: bool,$/;"	m	struct:Name
deserialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_seq<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_seq<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_seq($/;"	f
deserialize_seq_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_seq_in_place($/;"	f
deserialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_str<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_string<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_string_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^pub fn deserialize_string_record<'de, D: Deserialize<'de>>($/;"	f
deserialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_struct<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_struct<V>($/;"	P	interface:Deserializer
deserialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_struct<V>($/;"	f	module:content
deserialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_struct<V>($/;"	f
deserialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_struct($/;"	f
deserialize_struct_as_map_visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_struct_as_map_visitor($/;"	f
deserialize_struct_as_struct_in_place_visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_struct_as_struct_in_place_visitor($/;"	f
deserialize_struct_as_struct_visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_struct_as_struct_visitor($/;"	f
deserialize_struct_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_struct_in_place($/;"	f
deserialize_transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_try_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_try_from(type_try_from: &syn::Type) -> Fragment {$/;"	f
deserialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_tuple<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_tuple($/;"	f
deserialize_tuple_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_tuple_in_place($/;"	f
deserialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_tuple_struct<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	interface:Deserializer
deserialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_tuple_struct<V>($/;"	f	module:content
deserialize_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_unit<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn deserialize_unit_struct<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
deserialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn deserialize_unit_struct<V>($/;"	P	interface:Deserializer
deserialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn deserialize_unit_struct<V>($/;"	f	module:content
deserialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_unit_struct(params: &Parameters, cattrs: &attr::Container) -> Fragment {$/;"	f
deserialize_untagged_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_untagged_enum($/;"	f
deserialize_untagged_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_untagged_newtype_variant($/;"	f
deserialize_untagged_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn deserialize_untagged_variant($/;"	f
deserialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
deserialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
deserialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
deserialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^mod deserializer;$/;"	n
detail	/home/pme/src/rust/ctap/src/error.rs	/^    fn detail(&self) -> Option<(u8, &'static str, &'static str)> {$/;"	P	implementation:CborErrorCode
device	/home/pme/src/rust/ctap/src/lib.rs	/^    device: fs::File,$/;"	m	struct:FidoCancelHandle
device	/home/pme/src/rust/ctap/src/lib.rs	/^    device: fs::File,$/;"	m	struct:FidoDevice
device_list	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    device_list: Vec<DeviceInfo>,$/;"	m	struct:HidApi
device_list	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn device_list(&self) -> impl Iterator<Item = &DeviceInfo> {$/;"	P	implementation:HidApi
devices	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    devices: Vec<HidDeviceInfo>, \/* Deprecated *\/$/;"	m	struct:HidApi
devices	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn devices(&self) -> &Vec<HidDeviceInfo> {$/;"	P	implementation:HidApi
digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub fn digest(algorithm: &'static Algorithm, data: &[u8]) -> Digest {$/;"	f
digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/mod.rs	/^mod digest;$/;"	n
digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod digest;$/;"	n
digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        digest: D,$/;"	m	struct:test::TestVector
digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    digest: D,$/;"	m	struct:Hmac
digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod digest;$/;"	n
digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:Algorithm
digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:Algorithm
digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:PKCS1
digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:PSS
digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn digest_alg(&self) -> &'static digest::Algorithm { self.digest_alg }$/;"	P	implementation:PKCS1
digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn digest_alg(&self) -> &'static digest::Algorithm { self.digest_alg }$/;"	P	implementation:PSS
digest_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn digest_alg(&self) -> &'static digest::Algorithm;$/;"	P	interface:RSAPadding
digest_algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn digest_algorithm(&self) -> &'static digest::Algorithm { self.wrapped.digest_algorithm/;"	P	implementation:VerificationKey
digest_algorithm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn digest_algorithm(&self) -> &'static digest::Algorithm {$/;"	P	implementation:SigningKey
digest_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    digest_length: u8,$/;"	m	struct:Blake2b
digest_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    digest_length: u8,$/;"	m	struct:Blake2bParam
digest_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    digest_length: u8,$/;"	m	struct:Blake2s
digest_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    digest_length: u8,$/;"	m	struct:Blake2sParam
digest_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn digest_length(&self) -> usize {$/;"	P	implementation:Sha3Mode
digest_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/digest.rs	/^pub fn digest_scalar(digest: digest::Digest) -> Scalar {$/;"	f
digest_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/digest_scalar.rs	/^pub fn digest_scalar(ops: &ScalarOps, msg: &digest::Digest) -> Scalar {$/;"	f
digest_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/mod.rs	/^mod digest_scalar;$/;"	n
digest_scalar_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/digest_scalar.rs	/^fn digest_scalar_(ops: &ScalarOps, digest: &[u8]) -> Scalar {$/;"	f
digest_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod digest_tests {$/;"	n
digest_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod digest_tests {$/;"	n
digestinfo_prefix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    digestinfo_prefix: &'static [u8],$/;"	m	struct:PKCS1
dirichlet	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod dirichlet;$/;"	n
display_body	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^fn display_body(s: &synstructure::Structure) -> Result<Option<TokenStream>, Error> {$/;"	f
display_name	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub display_name: Option<&'a str>,$/;"	m	struct:PublicKeyCredentialUserEntity
distr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    distr: &'a D,$/;"	m	struct:DistIter
distributions	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod distributions;$/;"	n
dof	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    dof: f64$/;"	m	struct:StudentT
dof_ratio	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    dof_ratio: f64,$/;"	m	struct:FisherF
donna_self_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn donna_self_test() {$/;"	f	module:test
double_quote	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn double_quote(&mut self, yes: bool) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
double_quote	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn double_quote(&mut self, yes: bool) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
double_scalarmult_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn double_scalarmult_vartime(a_scalar: &[u8], a_point: GeP3, b_scalar: &[u8]) -> GeP2 {$/;"	P	implementation:GeP2
downcast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^    pub(crate) fn downcast<T: Fail>(self) -> Result<T, ErrorImpl> {$/;"	P	implementation:ErrorImpl
downcast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    pub(crate) fn downcast<T: Fail>(self) -> Result<T, ErrorImpl> {$/;"	P	implementation:ErrorImpl
downcast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn downcast<T: Fail>(self) -> Result<T, Error> {$/;"	P	implementation:Error
downcast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn downcast<T: Fail>(self) -> Result<T, Error> {$/;"	P	implementation:Error
downcast_can_be_used	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    fn downcast_can_be_used() {$/;"	f	module:test
downcast_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn downcast_mut<T: Fail>(&mut self) -> Option<&mut T> {$/;"	P	implementation:Error
downcast_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    pub fn downcast_mut<T: Fail>(&mut self) -> Option<&mut T> {$/;"	P	implementation:Fail
downcast_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn downcast_mut<T: Fail>(&mut self) -> Option<&mut T> {$/;"	P	implementation:Error
downcast_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn downcast_ref<T: Fail>(&self) -> Option<&T> {$/;"	P	implementation:Error
downcast_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    pub fn downcast_ref<T: Fail>(&self) -> Option<&T> {$/;"	P	implementation:Fail
downcast_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn downcast_ref<T: Fail>(&self) -> Option<&T> {$/;"	P	implementation:Error
drop	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Writer
drop	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Error
drop	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    fn drop(&mut self) {$/;"	P	implementation:HidApiLock
drop	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    fn drop(&mut self) {$/;"	P	implementation:HidDevice
drop	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        fn drop(&mut self) {$/;"	P	implementation:rand::FixedSliceSequenceRandom
drop	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Ctxt
dummy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod dummy;$/;"	n
dummy_const_trick	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^fn dummy_const_trick<T: quote::ToTokens>($/;"	f
e	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^    pub e: bigint::PublicExponent,$/;"	m	struct:Key
eay_test_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn eay_test_vectors() -> Vec<Test> {$/;"	f	module:test
ec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^        &'static ec::Curve,$/;"	v	module:tests
ec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod ec;$/;"	n
ecb_decryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ecb_encryptor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ecdh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub ecdh: fn(out: &mut [u8], private_key: &PrivateKey, peer_public_key: untrusted::Input)$/;"	m	struct:AgreementAlgorithmImpl
ecdh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^fn ecdh($/;"	f
ecdh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^macro_rules! ecdh {$/;"	M
ecdh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^pub mod ecdh;$/;"	n
ecdsa	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^pub mod ecdsa;$/;"	n
ed25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/mod.rs	/^pub mod ed25519;$/;"	n
ed25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ed25519;$/;"	n
eddsa_digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/digest.rs	/^pub fn eddsa_digest(signature_r: &[u8], public_key: &[u8], msg: &[u8]) -> digest::Digest {$/;"	f
edwards_to_montgomery_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^fn edwards_to_montgomery_x(ed_y: Fe) -> Fe {$/;"	f
effective_style	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn effective_style(variant: &Variant) -> Style {$/;"	f
effective_style	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn effective_style(variant: &Variant) -> Style {$/;"	f
elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^mod elem;$/;"	n
elem_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_add<E: Encoding>(&self, a: &mut Elem<E>, b: &Elem<E>) {$/;"	P	implementation:CommonOps
elem_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_add<M, E>(mut a: Elem<M, E>, b: Elem<M, E>, m: &Modulus<M>) -> Elem<M, E> {$/;"	f
elem_add_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    elem_add_impl: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:CommonOps
elem_add_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn elem_add_test(ops: &PublicScalarOps, file_path: &str) {$/;"	f	module:tests
elem_and_scalar_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub elem_and_scalar_len: usize,$/;"	m	struct:Curve
elem_div_by_2_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn elem_div_by_2_test($/;"	f	module:tests
elem_equals	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_equals(&self, a: &Elem<Unencoded>, b: &Elem<Unencoded>) -> bool {$/;"	P	implementation:PublicScalarOps
elem_exp_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_exp_consttime<M>($/;"	f
elem_exp_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^fn elem_exp_consttime<M, MM>($/;"	f
elem_exp_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_exp_vartime<M>($/;"	f
elem_exp_vartime_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^fn elem_exp_vartime_<M>(base: Elem<M, R>, exponent: u64, m: &PartialModulus<M>) -> Elem<M, R> {$/;"	f
elem_inv_squared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    elem_inv_squared: fn(a: &Elem<R>) -> Elem<R>,$/;"	m	struct:PrivateKeyOps
elem_inverse_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_inverse_consttime<M: Prime>($/;"	f
elem_inverse_squared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_inverse_squared(&self, a: &Elem<R>) -> Elem<R> { (self.elem_inv_squared)(a) }$/;"	P	implementation:PrivateKeyOps
elem_less_than	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_less_than(&self, a: &Elem<Unencoded>, b: &Elem<Unencoded>) -> bool {$/;"	P	implementation:PublicScalarOps
elem_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_mul(&self, a: &mut Elem<R>, b: &Elem<R>) {$/;"	P	implementation:CommonOps
elem_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_mul<M, AF, BF>($/;"	f
elem_mul_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^fn elem_mul_<M, AF, BF>($/;"	f
elem_mul_by_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^fn elem_mul_by_2<M, AF>(a: &mut Elem<M, AF>, m: &PartialModulus<M>) {$/;"	f
elem_mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    elem_mul_mont: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:CommonOps
elem_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn elem_mul_test(ops: &CommonOps, file_path: &str) {$/;"	f	module:tests
elem_neg_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn elem_neg_test($/;"	f	module:tests
elem_parse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_parse(&self, input: &mut untrusted::Reader) -> Result<Elem<R>, error::Unspecifie/;"	P	implementation:PublicKeyOps
elem_parse_big_endian_fixed_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub fn elem_parse_big_endian_fixed_consttime($/;"	f
elem_product	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_product<EA: Encoding, EB: Encoding>($/;"	P	implementation:CommonOps
elem_reduced	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_reduced<Larger, Smaller: NotMuchSmallerModulus<Larger>>($/;"	f
elem_reduced_once	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_reduced_once<Larger, Smaller: SlightlySmallerModulus<Larger>>($/;"	f
elem_reduced_to_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub fn elem_reduced_to_scalar(ops: &CommonOps, elem: &Elem<Unencoded>) -> Scalar<Unencoded> {$/;"	f
elem_sqr_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    elem_sqr_mont: unsafe extern "C" fn(r: *mut Limb, a: *const Limb),$/;"	m	struct:CommonOps
elem_sqr_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^fn elem_sqr_mul(ops: &CommonOps, a: &Elem<R>, squarings: usize, b: &Elem<R>) -> Elem<R> {$/;"	f
elem_sqr_mul_acc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^fn elem_sqr_mul_acc(ops: &CommonOps, acc: &mut Elem<R>, squarings: usize, b: &Elem<R>) {$/;"	f
elem_square	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_square(&self, a: &mut Elem<R>) { unary_op_assign(self.elem_sqr_mont, a); }$/;"	P	implementation:CommonOps
elem_squared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_squared(&self, a: &Elem<R>) -> Elem<R> { unary_op(self.elem_sqr_mont, a) }$/;"	P	implementation:CommonOps
elem_squared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^fn elem_squared<M, E>($/;"	f
elem_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_sub<M, E>(mut a: Elem<M, E>, b: &Elem<M, E>, m: &Modulus<M>) -> Elem<M, E> {$/;"	f
elem_sub_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn elem_sub_test($/;"	f	module:tests
elem_sum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_sum(&self, a: &Elem<Unencoded>, b: &Elem<Unencoded>) -> Elem<Unencoded> {$/;"	P	implementation:PublicScalarOps
elem_unencoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_unencoded(&self, a: &Elem<R>) -> Elem<Unencoded> { self.elem_product(a, &ONE) }$/;"	P	implementation:CommonOps
elem_verify_equal_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_verify_equal_consttime<M, E>($/;"	f
elem_verify_is_not_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elem_verify_is_not_zero(&self, a: &Elem<R>) -> Result<(), error::Unspecified> {$/;"	P	implementation:CommonOps
elem_widen	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn elem_widen<Larger, Smaller: SmallerModulus<Larger>>($/;"	f
elements	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeSeq
elements	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeTuple
elems_are_equal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn elems_are_equal(&self, a: &Elem<R>, b: &Elem<R>) -> bool {$/;"	P	implementation:CommonOps
em_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    em_len: usize,$/;"	m	struct:PSSMetrics
emit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    fn emit(&self, state: &mut Opaque, tag_out: &mut Tag, nonce: &Nonce) {$/;"	P	implementation:Funcs
emit_fn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    emit_fn: unsafe extern fn(&mut Opaque, &mut Tag, nonce: &Nonce),$/;"	m	struct:Funcs
empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            empty: (),$/;"	m	struct:tests::struct_headers_inside_nested_tuple_seq::Bar
empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            empty: (),$/;"	m	struct:tests::struct_headers_inside_tuple::Bar
empty_arrays	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn empty_arrays() {$/;"	f	module:tests
empty_field_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn empty_field_1() {$/;"	f	module:tests
empty_field_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn empty_field_2() {$/;"	f	module:tests
empty_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn empty_record() {$/;"	f	module:tests
empty_surround_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn empty_surround_1() {$/;"	f	module:tests
empty_surround_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn empty_surround_2() {$/;"	f	module:tests
empty_trait_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^macro_rules! empty_trait_impl {$/;"	M
enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn enabled(&self) -> Option<bool> {$/;"	P	implementation:StructLevelSetter
encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub fn encode<T: AsRef<[u8]>>(data: T) -> String {$/;"	f
encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn encode($/;"	P	implementation:PKCS1
encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn encode($/;"	P	implementation:PSS
encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn encode($/;"	P	interface:RSAEncoding
encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/utf8.rs	/^pub fn encode(c: char) -> Encode {$/;"	f
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:AuthenticatorOptions
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:ClientPinRequest
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:CoseKey
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:PublicKeyCredentialDescriptor
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:PublicKeyCredentialRpEntity
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:PublicKeyCredentialUserEntity
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, mut encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:GetAssertionRequest
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, mut encoder: &mut Encoder<W>) -> FidoResult<()> {$/;"	P	implementation:MakeCredentialRequest
encode	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encode<W: WriteBytesExt>(&self, writer: &mut W) -> FidoResult<()> {$/;"	P	implementation:Request
encode_hex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn encode_hex<T: iter::FromIterator<char>>(&self) -> T;$/;"	P	interface:ToHex
encode_hex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn encode_hex<U: iter::FromIterator<char>>(&self) -> U {$/;"	P	implementation:T
encode_hex_upper	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn encode_hex_upper<T: iter::FromIterator<char>>(&self) -> T;$/;"	P	interface:ToHex
encode_hex_upper	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn encode_hex_upper<U: iter::FromIterator<char>>(&self) -> U {$/;"	P	implementation:T
encode_point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^fn encode_point(x: Elem<T>, y: Elem<T>, z: Elem<T>) -> EncodedPoint {$/;"	f
encode_to_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub fn encode_to_slice<T: AsRef<[u8]>>(input: T, output: &mut [u8]) -> Result<(), FromHexError> /;"	f
encode_upper	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub fn encode_upper<T: AsRef<[u8]>>(data: T) -> String {$/;"	f
encoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn encoded<F>(expected: &str, mut f: F)$/;"	f	module:tests
encoded	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn encoded(&self) -> bool {$/;"	P	implementation:AuthenticatorOptions
encoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    encoder: Encoder<W>$/;"	m	struct:GenericEncoder
encoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/lib.rs	/^pub mod encoder;$/;"	n
encoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    encoding: PhantomData<E>,$/;"	m	struct:Elem
encoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^    pub encoding: PhantomData<E>,$/;"	m	struct:Elem
encoding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    encoding: PhantomData<E>,$/;"	m	struct:Elem
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^	fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]);$/;"	P	interface:AeadEncryptor
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]) {$/;"	P	implementation:AesGcm
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrMode
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrModeX8
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:CbcEncryptor
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:EcbEncryptor
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn encrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	P	implementation:Blowfish
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:ChaCha20
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], out_tag: &mut [u8]) {$/;"	P	implementation:ChaCha20Poly1305
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Hc128
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Rc4
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Salsa20
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Sosemanuk
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Box
encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	interface:Encryptor
encrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:AesNiEncryptor
encrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Blowfish
encrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockEncryptor
encrypt_block_aesni	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn encrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockEncryptorX8
encrypt_core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn encrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
encrypt_eay_test_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_eay_test_vectors() {$/;"	f	module:test
encrypt_pin	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub fn encrypt_pin(&self, pin: &str) -> FidoResult<[u8; 16]> {$/;"	P	implementation:SharedSecret
encryptor	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub fn encryptor(&self) -> Box<dyn Encryptor + 'static> {$/;"	P	implementation:SharedSecret
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn end(&self) -> usize {$/;"	P	implementation:Bounds
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    end: T,$/;"	m	struct:StepUp
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn end(self) -> Result<(), E> {$/;"	f
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn end(mut self) -> Result<M::Ok, M::Error> {$/;"	f	module:content
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn end(self) -> Result<Content, E> {$/;"	f	module:content
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn end(self) -> Result<(), Self::Error> {$/;"	f
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    fn end(self) -> Result<Ok, Error> {$/;"	f
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeMap
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeSeq
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStruct
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStructVariant
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTuple
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleStruct
end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleVariant
end_tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    end_tag: [u8; 16]$/;"	m	struct:AesGcm
ends	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    ends: Vec<usize>,$/;"	m	struct:Bounds
ends	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn ends(&self) -> &[usize] {$/;"	P	implementation:Bounds
engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine256$/;"	m	struct:Sha224
engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine256$/;"	m	struct:Sha256
engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha384
engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512
engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512Trunc224
engine	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512Trunc256
ensure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/macros.rs	/^macro_rules! ensure {$/;"	M
entries	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        entries: Vec<(Content, Content)>,$/;"	m	struct:content::SerializeMap
entropy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mod.rs	/^#[cfg(feature="std")] mod entropy;$/;"	n
enum_from_ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^fn enum_from_ast<'a>($/;"	f
enum_label_simple_tagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn enum_label_simple_tagged() {$/;"	f	module:tests
enum_newtypes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn enum_newtypes() {$/;"	f	module:tests
enum_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn enum_struct_variant() {$/;"	f	module:tests
enum_units	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn enum_units() {$/;"	f	module:tests
enum_untagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn enum_untagged() {$/;"	f	module:tests
enumerate	/home/pme/src/rust/ctap/src/hid_linux.rs	/^pub fn enumerate() -> io::Result<impl Iterator<Item = DeviceInfo>> {$/;"	f
enumerate	/home/pme/src/rust/ctap/src/hid_macwin.rs	/^pub fn enumerate() -> io::Result<impl Iterator<Item = DeviceInfo>> {$/;"	f
eof	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    eof: ReaderEofState,$/;"	m	struct:ReaderState
epsilon	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn epsilon() -> Self {$/;"	P	interface:Float
epsilon	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn epsilon() -> Self;$/;"	P	interface:FloatCore
epsilon	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn epsilon() -> Self;$/;"	P	interface:Real
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^        fn eq(&self, other: &T) -> bool {$/;"	P	implementation:test::Wi128
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn eq(&self, other: &ByteRecord) -> bool {$/;"	P	implementation:ByteRecord
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn eq(&self, other: &Vec<T>) -> bool {$/;"	P	implementation:ByteRecord
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn eq(&self, other: &[T]) -> bool {$/;"	P	implementation:ByteRecord
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn eq(&self, other: &StringRecord) -> bool {$/;"	P	implementation:StringRecord
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn eq(&self, other: &Vec<T>) -> bool {$/;"	P	implementation:StringRecord
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn eq(&self, other: &[T]) -> bool {$/;"	P	implementation:StringRecord
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn eq(&self, other: &IndexVec) -> bool {$/;"	P	implementation:IndexVec
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    fn eq(&self, other: &Self) -> bool { self.id == other.id }$/;"	P	implementation:Algorithm
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    fn eq(&self, other: &Self) -> bool { self.id == other.id }$/;"	P	implementation:Algorithm
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    fn eq(&self, other: &Self) -> bool { self.curve.id == other.curve.id }$/;"	P	implementation:AgreementAlgorithmImpl
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn eq(&self, other: &Self) -> bool { self.id == other.id }$/;"	P	implementation:Algorithm
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn eq(&self, other: &Fe) -> bool {$/;"	P	implementation:Fe
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn eq(&self, x: &MacResult) -> bool {$/;"	P	implementation:MacResult
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^    fn eq(&self, word: &Symbol) -> bool {$/;"	P	implementation:Ident
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^    fn eq(&self, word: &Symbol) -> bool {$/;"	P	implementation:Path
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn eq(&self, other: &&[u8]) -> bool {$/;"	P	implementation:Input
eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn eq(&self, other: &Input<'b>) -> bool {$/;"	P	implementation:Input
eq_field_boundaries	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn eq_field_boundaries() {$/;"	f	module:tests
eq_field_boundaries	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn eq_field_boundaries() {$/;"	f	module:tests
eq_record_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn eq_record_len() {$/;"	f	module:tests
eq_record_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn eq_record_len() {$/;"	f	module:tests
equal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn equal(b: u8, c: u8) -> i32 {$/;"	f
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    err: Utf8Error,$/;"	m	struct:FromUtf8Error
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    err: io::Error,$/;"	m	struct:IntoInnerError
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    err: ErrorImpl,$/;"	m	struct:Error
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentRefDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumRefDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapRefDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqRefDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantDeserializer
err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantRefDeserializer
err_msg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error_message.rs	/^pub fn err_msg<D: Display + Debug + Sync + Send + 'static>(msg: D) -> Error {$/;"	f
err_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn err_one(test_to_fail: usize) {$/;"	f	module:tests
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn error(&self, kind: DeserializeErrorKind) -> DeserializeError {$/;"	P	implementation:DeByteRecord
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn error(&self, kind: DeserializeErrorKind) -> DeserializeError {$/;"	P	implementation:DeRecordWrap
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn error(&self, kind: DeserializeErrorKind) -> DeserializeError {$/;"	P	implementation:DeStringRecord
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn error(&self, kind: DeserializeErrorKind) -> DeserializeError;$/;"	P	interface:DeRecord
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn error(&self) -> &io::Error {$/;"	P	implementation:IntoInnerError
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^mod error;$/;"	n
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/log_disabled.rs	/^macro_rules! error {$/;"	M
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^mod error;$/;"	n
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^mod error;$/;"	n
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^#[cfg(not(feature = "log"))] macro_rules! error { ($($x:tt)*) => () }$/;"	M
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^mod error;$/;"	n
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod error;$/;"	n
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    error: PhantomData<E>,$/;"	m	struct:MapDeserializer
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::ContentSerializer
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeMap
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeSeq
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStruct
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStructVariant
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTuple
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleStruct
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleVariant
error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    error: PhantomData<Error>,$/;"	m	struct:Impossible
error	/home/pme/src/rust/ctap/src/lib.rs	/^mod error;$/;"	n
error_container_inside_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^fn error_container_inside_struct<T: fmt::Display>(name: T) -> Error {$/;"	f
error_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^mod error_impl;$/;"	n
error_scalar_outside_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^fn error_scalar_outside_struct<T: fmt::Display>(name: T) -> Error {$/;"	f
error_spanned_by	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^    pub fn error_spanned_by<A: ToTokens, T: Display>(&self, obj: A, msg: T) {$/;"	P	implementation:Ctxt
errors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^    errors: RefCell<Option<Vec<syn::Error>>>,$/;"	m	struct:Ctxt
escape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn escape(&mut self, escape: Option<u8>) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
escape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn escape(&mut self, escape: u8) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
exchange	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn exchange(public_key: &[u8], private_key: &[u8]) -> [u8; 32] {$/;"	f
exchange	/home/pme/src/rust/ctap/src/lib.rs	/^    fn exchange(&mut self, cmd: CtapCommand, payload: &[u8]) -> FidoResult<Vec<u8>> {$/;"	P	implementation:FidoDevice
exclude_list	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub exclude_list: &'a [PublicKeyCredentialDescriptor],$/;"	m	struct:MakeCredentialRequest
exclude_list	/home/pme/src/rust/ctap/src/lib.rs	/^    exclude_list: &'a [&'a FidoCredential],$/;"	m	struct:FidoAssertionRequest
exclude_list	/home/pme/src/rust/ctap/src/lib.rs	/^    exclude_list: &'a [&'a FidoCredential],$/;"	m	struct:FidoCredentialRequest
exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp(self) -> Self {$/;"	P	implementation:f32
exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp(self) -> Self {$/;"	P	implementation:f64
exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp(self) -> Self;$/;"	P	interface:Float
exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn exp(self) -> Self;$/;"	P	interface:Real
exp2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp2(self) -> Self {$/;"	P	implementation:f32
exp2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp2(self) -> Self {$/;"	P	implementation:f64
exp2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp2(self) -> Self;$/;"	P	interface:Float
exp2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn exp2(self) -> Self;$/;"	P	interface:Real
exp_lambda	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    exp_lambda: f64,$/;"	m	struct:Poisson
exp_m1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp_m1(self) -> Self {$/;"	P	implementation:f32
exp_m1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp_m1(self) -> Self {$/;"	P	implementation:f64
exp_m1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn exp_m1(self) -> Self;$/;"	P	interface:Float
exp_m1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn exp_m1(self) -> Self;$/;"	P	interface:Real
expand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn expand(&mut self) {$/;"	P	implementation:Bounds
expand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hkdf.rs	/^pub fn expand(prk: &hmac::SigningKey, info: &[u8], out: &mut [u8]) {$/;"	f
expand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> ChaChaState {$/;"	P	implementation:ChaCha20
expand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> SalsaState {$/;"	P	implementation:Salsa20
expand_derive_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^pub fn expand_derive_deserialize(input: &syn::DeriveInput) -> Result<TokenStream, Vec<syn::Error/;"	f
expand_derive_serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^pub fn expand_derive_serialize(input: &syn::DeriveInput) -> Result<TokenStream, Vec<syn::Error>>/;"	f
expand_ends	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub(crate) fn expand_ends(&mut self) {$/;"	P	implementation:ByteRecord
expand_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub(crate) fn expand_fields(&mut self) {$/;"	P	implementation:ByteRecord
expand_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn expand_key(&mut self, key: &[u8]) {$/;"	P	implementation:Blowfish
expand_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn expand_key<D: Digest>(digest: &mut D, key: &[u8]) -> Vec<u8> {$/;"	f
expect_tag_and_get_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^pub fn expect_tag_and_get_value<'a>($/;"	f
expected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^        fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IgnoredAny
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IpAddr::deserialize::IpAddrVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SocketAddr::deserialize::SocketAddrVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:range::Field::deserialize::FieldVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::DurationVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize_in_place
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:range
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        pub expecting: &'static str,$/;"	m	struct:range::RangeVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ArrayVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BoolVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BytesVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CStringVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CharVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OsStringVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathBufVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PhantomDataVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StrVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringInPlaceVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:UnitVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Visitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::ContentVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:content
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_str::CowStrVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagContentOtherFieldVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentFieldVisitor
expecting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::UntaggedUnitVisitor
exponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    exponent: bigint::PrivateExponent<M>,$/;"	m	struct:PrivatePrime
exponential	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod exponential;$/;"	n
export	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^pub mod export;$/;"	n
expr_is_missing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn expr_is_missing(field: &Field, cattrs: &attr::Container) -> Fragment {$/;"	f
extend	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {$/;"	P	implementation:ByteRecord
extend	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {$/;"	P	implementation:StringRecord
extend_sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^fn extend_sign(val: u64, nbytes: usize) -> i64 {$/;"	f
extend_sign128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^fn extend_sign128(val: u128, nbytes: usize) -> i128 {$/;"	f
extension_data	/home/pme/src/rust/ctap/src/lib.rs	/^    extension_data: BTreeMap<&'a str, &'a cbor_codec::value::Value>,$/;"	m	struct:FidoCredentialRequest
extension_data	/home/pme/src/rust/ctap/src/lib.rs	/^    extension_data: BTreeMap<&'b str, &'b cbor_codec::value::Value>,$/;"	m	struct:FidoAssertionRequest
extension_input	/home/pme/src/rust/ctap/src/extensions/hmac.rs	/^    fn extension_input() -> &'static Value {$/;"	P	interface:HmacExtension
extension_name	/home/pme/src/rust/ctap/src/extensions/hmac.rs	/^    fn extension_name() -> &'static str {$/;"	P	interface:HmacExtension
extensions	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub extensions: &'a [(&'a str, &'a Value)],$/;"	m	struct:GetAssertionRequest
extensions	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub extensions: &'a [(&'a str, &'a Value)],$/;"	m	struct:MakeCredentialRequest
extensions	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub extensions: HashMap<String, Value>,$/;"	m	struct:AuthenticatorData
extensions	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub extensions: Vec<String>,$/;"	m	struct:GetInfoResponse
extensions	/home/pme/src/rust/ctap/src/lib.rs	/^pub mod extensions;$/;"	n
extra_logs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn extra_logs() {$/;"	f	module:tests
extract	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn extract(self, index: usize) -> Self { debug_assert_eq!(index, 0); self }$/;"	P	interface:FloatAsSIMD
extract	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hkdf.rs	/^pub fn extract(salt: &hmac::SigningKey, secret: &[u8]) -> hmac::SigningKey {$/;"	f
extract_and_expand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hkdf.rs	/^pub fn extract_and_expand(salt: &hmac::SigningKey, secret: &[u8], info: &[u8], out: &mut [u8]) {$/;"	f
f	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    f: [u64; 2],$/;"	m	struct:Blake2b
f	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    f: [u32; 2],$/;"	m	struct:Blake2s
f	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn f(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
f1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^fn f1(x: u32) -> u32 {$/;"	f
f16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn f16(&mut self) -> DecodeResult<f32> {$/;"	P	implementation:Decoder
f16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn f16(&mut self, ti: &TypeInfo) -> DecodeResult<f32> {$/;"	P	implementation:Kernel
f2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^fn f2(x: u32) -> u32 {$/;"	f
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn f32(&mut self) -> DecodeResult<f32> {$/;"	P	implementation:Decoder
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn f32(&mut self, ti: &TypeInfo) -> DecodeResult<f32> {$/;"	P	implementation:Kernel
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn f32(&mut self, x: f32) -> EncodeResult {$/;"	P	implementation:Encoder
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^impl Float for f32 {$/;"	c
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^impl FloatCore for f32 {$/;"	c
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^impl Inv for f32 {$/;"	c
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^impl<'a> Inv for &'a f32 {$/;"	c
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^impl MulAdd<f32, f32> for f32 {$/;"	c
f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^impl MulAddAssign<f32, f32> for f32 {$/;"	c
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn f64(&mut self) -> DecodeResult<f64> {$/;"	P	implementation:Decoder
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn f64(&mut self, ti: &TypeInfo) -> DecodeResult<f64> {$/;"	P	implementation:Kernel
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn f64(&mut self, x: f64) -> EncodeResult {$/;"	P	implementation:Encoder
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^impl Float for f64 {$/;"	c
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^impl FloatCore for f64 {$/;"	c
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^impl Inv for f64 {$/;"	c
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^impl<'a> Inv for &'a f64 {$/;"	c
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^impl MulAdd<f64, f64> for f64 {$/;"	c
f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^impl MulAddAssign<f64, f64> for f64 {$/;"	c
fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fail: Option<&'f dyn Fail>,$/;"	m	struct:Causes
fail_derive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^fn fail_derive(s: synstructure::Structure) -> TokenStream {$/;"	f
fail_derive_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^fn fail_derive_impl(s: synstructure::Structure) -> Result<TokenStream, Error> {$/;"	f
failure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^    pub(crate) fn failure(&self) -> &dyn Fail {$/;"	P	implementation:ErrorImpl
failure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    failure: F,$/;"	m	struct:InnerRaw
failure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    failure: FailData,$/;"	m	struct:Inner
failure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    pub(crate) fn failure(&self) -> &Fail {$/;"	P	implementation:ErrorImpl
failure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    failure: F,$/;"	m	struct:InnerRaw
failure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    failure: FailData,$/;"	m	struct:Inner
failure	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn failure(&self) -> &Fail {$/;"	P	implementation:Inner
failure_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^    pub(crate) fn failure_mut(&mut self) -> &mut dyn Fail {$/;"	P	implementation:ErrorImpl
failure_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    pub(crate) fn failure_mut(&mut self) -> &mut Fail {$/;"	P	implementation:ErrorImpl
failure_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn failure_mut(&mut self) -> &mut Fail {$/;"	P	implementation:Inner
fake	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^mod fake {$/;"	n
fanout	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fanout: u8,$/;"	m	struct:Blake2bParam
fanout	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fanout: u8,$/;"	m	struct:Blake2sParam
fast_mode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn fast_mode<R: ReadBuffer, W: WriteBuffer>($/;"	P	implementation:BlockEngine
ffi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^mod ffi {$/;"	n
ffi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^mod ffi;$/;"	n
ffmulx	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn ffmulx(x: u32) -> u32 {$/;"	f
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn field(&self, s: &str) -> Cursor<'r> {$/;"	P	implementation:Cursor
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    field: Option<u64>,$/;"	m	struct:DeserializeError
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    field: u64,$/;"	m	struct:DeByteRecord
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    field: u64,$/;"	m	struct:DeStringRecord
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    pub fn field(&self) -> Option<u64> {$/;"	P	implementation:DeserializeError
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    field: usize,$/;"	m	struct:Utf8Error
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn field(&self) -> usize {$/;"	P	implementation:Utf8Error
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    field: &'a Field,$/;"	m	struct:FieldWithDefaults
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    field: FieldMeta,$/;"	m	struct:Field
field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    field: FieldMeta,$/;"	m	struct:Options
field_count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn field_count(&self) -> usize {$/;"	P	implementation:Options
field_enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn field_enabled(&self) -> Option<bool> {$/;"	P	implementation:FieldLevelSetter
field_enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn field_enabled(&self) -> bool {$/;"	P	implementation:FieldWithDefaults
field_i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn field_i(i: usize) -> Ident {$/;"	f
field_ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn field_ident(&self) -> &syn::Ident {$/;"	P	implementation:FieldWithDefaults
field_vis	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn field_vis(&self) -> Visibility {$/;"	P	implementation:FieldWithDefaults
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fields: Vec<u8>,$/;"	m	struct:ByteRecordInner
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn fields<'a>(&'a self) -> FieldIter<'a> {$/;"	P	implementation:Options
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fields: &'static [&'static str],$/;"	m	struct:FlatStructAccess
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStruct
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariant
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariantAsMapValue
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleStruct
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariant
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fields: Vec<(&'static str, Content)>,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub fields: Vec<Field<'a>>,$/;"	m	struct:Variant
fields_from_ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^fn fields_from_ast<'a>($/;"	f
fields_written	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fields_written: u64,$/;"	m	struct:WriterState
file_not_found	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn file_not_found() { test::from_file("src\/test_file_not_found_tests.txt", |_, _| Ok(())); /;"	f	module:tests
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn fill<T: AsByteSliceMut + ?Sized>(&mut self, dest: &mut T) {$/;"	P	interface:Rng
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn fill(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:Jitter
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn fill(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:NoSource
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn fill(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:Os
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn fill(&mut self, dest: &mut [u8]) -> Result<(), Error>;$/;"	P	interface:EntropySource
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn fill(dest: &mut [u8], value: u8) {$/;"	f	module:slice
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> { fill_impl(dest) }$/;"	P	implementation:SystemRandom
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified>;$/;"	P	interface:SecureRandom
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:darwin
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:sysrand
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:sysrand_or_urandom
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:urandom
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	P	implementation:rand::FixedByteRandom
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	P	implementation:rand::FixedSliceRandom
fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^        fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	P	implementation:rand::FixedSliceSequenceRandom
fill_be_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn fill_be_bytes(&self, out: &mut [u8]) {$/;"	P	implementation:Elem
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:ChaChaRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:EntropyRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:Hc128Rng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:Isaac64Rng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:IsaacRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:JitterRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:OsRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:ReadRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:StdRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:ThreadRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:XorShiftRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	f
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^        fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:test::TestRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:ReadRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	f
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:EntropyRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:StepRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:SmallRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:StdRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:ThreadRng
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	f
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:Box
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:R
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]);$/;"	P	interface:RngCore
fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:Fortuna
fill_bytes_via_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^pub fn fill_bytes_via_next<R: RngCore + ?Sized>(rng: &mut R, dest: &mut [u8]) {$/;"	f
fill_via_chunks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^macro_rules! fill_via_chunks {$/;"	M
fill_via_u32_chunks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^pub fn fill_via_u32_chunks(src: &[u32], dest: &mut [u8]) -> (usize, usize) {$/;"	f
fill_via_u64_chunks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^pub fn fill_via_u64_chunks(src: &[u64], dest: &mut [u8]) -> (usize, usize) {$/;"	f
finalize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	P	implementation:Blake2b
finalize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	P	implementation:Blake2s
finalize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn finalize(&mut self) {$/;"	P	implementation:Sha3
finalized	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    finalized : bool,$/;"	m	struct:Poly1305
finalized	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    finalized: bool,$/;"	m	struct:Whirlpool
find_error_msg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^fn find_error_msg(attrs: &[syn::Attribute]) -> Result<Option<syn::MetaList>, Error> {$/;"	f
find_root_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn find_root_cause(&self) -> &dyn Fail {$/;"	P	implementation:Error
find_root_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    pub fn find_root_cause(&self) -> &dyn Fail {$/;"	P	implementation:Fail
find_root_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^fn find_root_cause(mut fail: &dyn Fail) -> &dyn Fail {$/;"	f
finish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub fn finish(mut self) -> Digest {$/;"	P	implementation:Context
finish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Poly1305
finish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Engine256
finish	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Engine512
finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    finished: bool,$/;"	m	struct:AesGcm
finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    finished: bool,$/;"	m	struct:ChaCha20Poly1305
finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    finished: bool$/;"	m	struct:Ghash
finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    finished: bool$/;"	m	struct:Hmac
finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    finished: bool,$/;"	m	struct:Md5
finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    finished: bool,$/;"	m	struct:Engine256
finished	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    finished: bool,$/;"	m	struct:Engine512
finite_mask	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn finite_mask(self) -> Self::Mask;$/;"	P	interface:FloatSIMDUtils
first	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    first: bool,$/;"	m	struct:ReaderState
first_dup_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    first_dup_tokens: TokenStream,$/;"	m	struct:VecAttr
first_err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn first_err() { err_one(0) }$/;"	f	module:tests
first_field_count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    first_field_count: Option<u64>,$/;"	m	struct:ReaderState
first_field_count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    first_field_count: Option<u64>,$/;"	m	struct:WriterState
first_panic	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn first_panic() { panic_one(0) }$/;"	f	module:tests
fixed_time_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn fixed_time_eq(lhs: &[u8], rhs: &[u8]) -> bool {$/;"	f
flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn flatten() {$/;"	f	module:tests
flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    flatten: bool,$/;"	m	struct:Field
flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn flatten(&self) -> bool {$/;"	P	implementation:Field
flexible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    flexible: bool,$/;"	m	struct:ReaderBuilder
flexible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    flexible: bool,$/;"	m	struct:ReaderState
flexible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn flexible(&mut self, yes: bool) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
flexible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    flexible: bool,$/;"	m	struct:WriterBuilder
flexible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    flexible: bool,$/;"	m	struct:WriterState
flexible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn flexible(&mut self, yes: bool) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn float() {$/;"	f	module:tests
float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn float() {$/;"	f	module:tests
float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn float() {$/;"	f	module:tests
float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn float(input: TokenStream) -> TokenStream {$/;"	f
float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod float;$/;"	n
float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^mod float;$/;"	n
float32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn float32(&self) -> Option<f32> {$/;"	P	implementation:Cursor
float64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn float64(&self) -> Option<f64> {$/;"	P	implementation:Cursor
float_const_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^macro_rules! float_const_impl {$/;"	M
float_impl_libm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^macro_rules! float_impl_libm {$/;"	M
float_impl_std	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^macro_rules! float_impl_std {$/;"	M
float_impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^mod float_impls {$/;"	n
float_impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^macro_rules! float_impls {$/;"	M
float_nan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn float_nan() {$/;"	f	module:tests
float_to_int_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! float_to_int_unchecked {$/;"	M
float_trait_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^macro_rules! float_trait_impl {$/;"	M
floor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn floor(self) -> Self {$/;"	P	implementation:f32
floor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn floor(self) -> Self {$/;"	P	implementation:f64
floor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn floor(self) -> Self {$/;"	P	interface:FloatCore
floor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn floor(self) -> Self;$/;"	P	interface:Float
floor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn floor(self) -> Self;$/;"	P	interface:Real
flush	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:tests::full_buffer_should_not_flush_underlying::MarkWriteAndFlush
flush	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Writer
flush	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn flush(&mut self) {$/;"	P	implementation:Ghash
flush_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn flush_buf(&mut self) -> io::Result<()> {$/;"	P	implementation:Writer
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:DecodeError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:EncodeError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:ReadSliceError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ByteRecord
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:DeserializeError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:DeserializeErrorKind
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:FromUtf8Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IntoInnerError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Utf8Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringRecord
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:InternalBacktrace
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/box_std.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BoxStd
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/compat.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Compat
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error_message.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ErrorMessage
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:FromHexError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result {$/;"	P	implementation:HidError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:DeviceInfo
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ParseFloatError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:WeightedError
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BlockRng
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BlockRng64
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {$/;"	P	implementation:Digest
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> Result<(), core::fmt::Error> {$/;"	P	implementation:EdDSAParameters
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {$/;"	P	implementation:Unspecified
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn fmt(&self, fmt: &mut ::core::fmt::Formatter) -> Result<(), ::core::fmt::Error> {$/;"	P	implementation:Modulus
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> Result<(), core::fmt::Error> {$/;"	P	implementation:RSAParameters
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Unexpected
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OneOf
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:a
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:str
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Expected
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInMap
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInSeq
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Unsupported
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^mod fmt;$/;"	n
fmt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/symbol.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Symbol
fmt	/home/pme/src/rust/ctap/src/error.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	P	implementation:CborErrorCode
fmt	/home/pme/src/rust/ctap/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:FidoError
fmt_primitives	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^macro_rules! fmt_primitives {$/;"	M
follows_general_if_failure_is_not_set	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    fn follows_general_if_failure_is_not_set() {$/;"	f	module:tests
foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            foo: i32,$/;"	m	struct:tests::serialize_no_headers::Row
foo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            foo: i32,$/;"	m	struct:tests::serialize_with_headers::Row
for_each_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^macro_rules! for_each_tuple {$/;"	M
for_each_tuple_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^macro_rules! for_each_tuple_ {$/;"	M
for_flt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn for_flt(p: &Modulus<M>) -> Self {$/;"	P	implementation:PrivateExponent
fork	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^mod fork {$/;"	n
fork_counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fork_counter: usize,$/;"	m	struct:ReseedingCore
fork_handler	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    extern fn fork_handler() {$/;"	f	module:fork
format	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub format: String,$/;"	m	struct:MakeCredentialResponse
format_err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/macros.rs	/^macro_rules! format_err {$/;"	M
format_integer_tlv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn format_integer_tlv(ops: &ScalarOps, a: &Scalar, out: &mut [u8]) -> usize {$/;"	f	function:format_rs_asn1
format_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    format_output: fn(input: &State) -> Output,$/;"	m	struct:Algorithm
format_rs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    format_rs:$/;"	m	struct:Algorithm
format_rs_asn1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^fn format_rs_asn1<'a>($/;"	f
format_rs_fixed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^fn format_rs_fixed<'a>($/;"	f
fortuna	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod fortuna;$/;"	n
fortuna_new_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_1k(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_32(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64k(bh: &mut Bencher) {$/;"	f	module:bench
forward	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/macros.rs	/^macro_rules! forward {$/;"	M
forward_to_deserialize_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/macros.rs	/^macro_rules! forward_to_deserialize_any {$/;"	M
forward_to_deserialize_any_helper	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/macros.rs	/^macro_rules! forward_to_deserialize_any_helper {$/;"	M
forward_to_deserialize_any_method	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/macros.rs	/^macro_rules! forward_to_deserialize_any_method {$/;"	M
forward_to_deserialize_other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^macro_rules! forward_to_deserialize_other {$/;"	M
forwarded_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! forwarded_impl {$/;"	M
fract	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn fract(self) -> Self {$/;"	P	interface:FloatCore
fract	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn fract(self) -> Self;$/;"	P	interface:Float
fract	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn fract(self) -> Self;$/;"	P	interface:Real
fragment	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod fragment;$/;"	n
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn from(e: ReadSliceError) -> DecodeError {$/;"	P	implementation:DecodeError
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn from(e: Utf8Error) -> DecodeError {$/;"	P	implementation:DecodeError
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn from(e: io::Error) -> DecodeError {$/;"	P	implementation:DecodeError
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn from(e: string::FromUtf8Error) -> DecodeError {$/;"	P	implementation:DecodeError
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn from(e: io::Error) -> EncodeError {$/;"	P	implementation:EncodeError
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn from(record: StringRecord) -> ByteRecord {$/;"	P	implementation:ByteRecord
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn from(xs: &'a [T]) -> ByteRecord {$/;"	P	implementation:ByteRecord
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn from(xs: Vec<T>) -> ByteRecord {$/;"	P	implementation:ByteRecord
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn from(err: Error) -> io::Error {$/;"	P	implementation:Error
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn from(err: io::Error) -> Error {$/;"	P	implementation:Error
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn from(xs: &'a [T]) -> StringRecord {$/;"	P	implementation:StringRecord
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn from(xs: Vec<T>) -> StringRecord {$/;"	P	implementation:StringRecord
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn from(v: FieldSetterMeta) -> Self {$/;"	P	implementation:FieldLevelSetter
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/context.rs	/^    fn from(display: D) -> Context<D> {$/;"	f
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^    fn from(failure: F) -> ErrorImpl {$/;"	P	implementation:ErrorImpl
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    fn from(failure: F) -> ErrorImpl {$/;"	P	implementation:ErrorImpl
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    fn from(failure: F) -> Error {$/;"	P	implementation:Error
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn from(failure: F) -> Error {$/;"	P	implementation:Error
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^    fn from(e: syn::Error) -> Error {$/;"	P	implementation:Error
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from<T: ToPrimitive>(n: T) -> Option<Self>;$/;"	P	interface:NumCast
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from<U: ToPrimitive>(n: U) -> Option<Self> {$/;"	P	implementation:Wrapping
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn from(r: ::core::ops::Range<X>) -> Uniform<X> {$/;"	P	implementation:Uniform
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn from(r: ::core::ops::RangeInclusive<X>) -> Uniform<X> {$/;"	P	implementation:Uniform
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn from(v: Vec<u32>) -> Self {$/;"	P	implementation:IndexVec
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn from(v: Vec<usize>) -> Self {$/;"	P	implementation:IndexVec
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    fn from(error: Error) -> Self {$/;"	P	implementation:Error
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^    fn from(ret: Result) -> Self {$/;"	P	implementation:Result
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/error.rs	/^    fn from(_: untrusted::EndOfInput) -> Self { Unspecified }$/;"	P	implementation:Unspecified
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn from(n0: u64) -> Self {$/;"	P	implementation:N0
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn from(n: Nonnegative) -> Result<Self, error::Unspecified> {$/;"	P	implementation:Modulus
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn from(self) -> Self::Deserializer {$/;"	f
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn from(self) -> Self::Deserializer;$/;"	P	interface:IdentifierDeserializer
from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn from(bytes: &'a [u8]) -> Input<'a> {$/;"	P	implementation:Input
from	/home/pme/src/rust/ctap/src/error.rs	/^    fn from(code: u8) -> Self {$/;"	P	implementation:CborErrorCode
from	/home/pme/src/rust/ctap/src/error.rs	/^    fn from(err: DecodeError) -> FidoError {$/;"	P	implementation:FidoError
from	/home/pme/src/rust/ctap/src/error.rs	/^    fn from(err: EncodeError) -> FidoError {$/;"	P	implementation:FidoError
from	/home/pme/src/rust/ctap/src/error.rs	/^    fn from(inner: Context<FidoErrorKind>) -> FidoError {$/;"	P	implementation:FidoError
from	/home/pme/src/rust/ctap/src/error.rs	/^    fn from(kind: FidoErrorKind) -> FidoError {$/;"	P	implementation:FidoError
from_ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub fn from_ast($/;"	P	implementation:Container
from_ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn from_ast($/;"	P	implementation:Field
from_ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, item: &syn::DeriveInput) -> Self {$/;"	P	implementation:Container
from_ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, variant: &syn::Variant) -> Self {$/;"	P	implementation:Variant
from_attrs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn from_attrs($/;"	P	implementation:Name
from_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn from_be(x: Self) -> Self;$/;"	P	interface:PrimInt
from_be_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn from_be_bytes($/;"	P	implementation:PublicExponent
from_be_bytes_padded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn from_be_bytes_padded($/;"	P	implementation:Elem
from_be_bytes_padded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn from_be_bytes_padded($/;"	P	implementation:PrivateExponent
from_be_bytes_padded_less_than	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn from_be_bytes_padded_less_than($/;"	P	implementation:BoxedLimbs
from_be_bytes_with_bit_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn from_be_bytes_with_bit_length($/;"	P	implementation:Modulus
from_be_bytes_with_bit_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn from_be_bytes_with_bit_length($/;"	P	implementation:Nonnegative
from_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn from_bits(v: Self::Bits) -> Self;$/;"	P	interface:Float
from_bounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pub fn from_bounds<I>(iter: &I) -> Option<usize>$/;"	f	module:size_hint
from_boxed_compat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn from_boxed_compat(err: Box<dyn StdError + Sync + Send + 'static>) -> Error {$/;"	P	implementation:Error
from_boxed_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn from_boxed_limbs(n: BoxedLimbs<M>) -> Result<Self, error::Unspecified> {$/;"	P	implementation:Modulus
from_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn from_byte_record($/;"	P	implementation:StringRecord
from_byte_record_lossy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn from_byte_record_lossy(record: ByteRecord) -> StringRecord {$/;"	P	implementation:StringRecord
from_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub fn from_bytes($/;"	P	implementation:PrivateKey
from_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes(s: &[u8]) -> Fe {$/;"	P	implementation:Fe
from_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn from_bytes(bytes: &[u8]) -> Gf128 {$/;"	P	implementation:Gf128
from_bytes	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn from_bytes(bytes: &[u8]) -> FidoResult<Self> {$/;"	P	implementation:AuthenticatorData
from_bytes	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn from_bytes(bytes: &[u8]) -> FidoResult<Self> {$/;"	P	implementation:P256Key
from_bytes	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn from_bytes(cur: &mut Cursor<&[u8]>) -> FidoResult<Self> {$/;"	P	implementation:AttestedCredentialData
from_bytes_negate_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes_negate_vartime(s: &[u8]) -> Option<GeP3> {$/;"	P	implementation:GeP3
from_cose	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn from_cose(cose: &CoseKey) -> FidoResult<Self> {$/;"	P	implementation:P256Key
from_decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn from_decoder(d: Decoder<R>) -> GenericDecoder<R> {$/;"	P	implementation:GenericDecoder
from_der	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    pub fn from_der(input: untrusted::Input) -> Result<Self, error::Unspecified> {$/;"	P	implementation:KeyPair
from_encoded_point_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    pub fn from_encoded_point_vartime(encoded: &EncodedPoint) -> Result<Self, error::Unspecified/;"	P	implementation:ExtPoint
from_encoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn from_encoder(e: Encoder<W>) -> GenericEncoder<W> {$/;"	P	implementation:GenericEncoder
from_entropy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn from_entropy() -> R {$/;"	P	implementation:R
from_entropy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn from_entropy() -> Self;$/;"	P	interface:FromEntropy
from_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_f32(n: f32) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_f64(n: f64) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_file	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn from_file<F>(test_data_relative_file_path: &str, mut f: F)$/;"	f
from_hex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {$/;"	P	implementation:Vec
from_hex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error>;$/;"	P	interface:FromHex
from_hex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn from_hex(hex_str: &str) -> Result<Vec<u8>, String> {$/;"	f
from_hex_array_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^macro_rules! from_hex_array_impl {$/;"	M
from_hex_digit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^fn from_hex_digit(d: u8) -> Result<u8, String> {$/;"	f
from_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_i128(n: i128) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_i16(n: i16) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_i16(n: i16) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_i32(n: i32) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_i32(n: i32) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn from_i64(n: i64) -> Int {$/;"	P	implementation:Int
from_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_i64(n: i64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_i64(n: i64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_i8(n: i8) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_i8(n: i8) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_isize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_isize(n: isize) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> ByteRecord {$/;"	P	implementation:ByteRecord
from_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> StringRecord {$/;"	P	implementation:StringRecord
from_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    pub fn from_key(key: Key) -> SigningContext {$/;"	P	implementation:SigningContext
from_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn from_le(x: Self) -> Self;$/;"	P	interface:PrimInt
from_meta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn from_meta(value: &syn::Meta) -> darling::Result<Self> {$/;"	P	implementation:FieldSetterMeta
from_modulus_and_exponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^    pub fn from_modulus_and_exponent($/;"	P	implementation:Key
from_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn from_path<P: AsRef<Path>>(&self, path: P) -> Result<Reader<File>> {$/;"	P	implementation:ReaderBuilder
from_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn from_path<P: AsRef<Path>>(path: P) -> Result<Reader<File>> {$/;"	P	implementation:Reader
from_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn from_path<P: AsRef<Path>>(&self, path: P) -> Result<Writer<File>> {$/;"	P	implementation:WriterBuilder
from_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn from_path<P: AsRef<Path>>(path: P) -> Result<Writer<File>> {$/;"	P	implementation:Writer
from_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_pkcs8(input: untrusted::Input) -> Result<Self, error::Unspecified> {$/;"	P	implementation:KeyPair
from_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn from_pkcs8($/;"	P	implementation:Algorithm
from_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn from_pkcs8($/;"	P	implementation:Key
from_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    pub fn from_pkcs8(input: untrusted::Input) -> Result<Self, error::Unspecified> {$/;"	P	implementation:KeyPair
from_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^    fn from_pkcs8(&'static self, input: untrusted::Input) -> Result<KeyPair, error::Unspecified>/;"	P	interface:SigningAlgorithm
from_pkcs8_maybe_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_pkcs8_maybe_unchecked(input: untrusted::Input) -> Result<Self, error::Unspecifie/;"	P	implementation:KeyPair
from_primitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn from_primitive(input: TokenStream) -> TokenStream {$/;"	f
from_primitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^mod from_primitive;$/;"	n
from_private_key_and_public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn from_private_key_and_public_key($/;"	P	implementation:Key
from_ratio	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^    pub fn from_ratio(numerator: u32, denominator: u32) -> Bernoulli {$/;"	P	implementation:Bernoulli
from_reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn from_reader(rdr: R) -> Reader<R> {$/;"	P	implementation:Reader
from_reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn from_reader<R: io::Read>(&self, rdr: R) -> Reader<R> {$/;"	P	implementation:ReaderBuilder
from_reader	/home/pme/src/rust/ctap/src/packet.rs	/^    pub fn from_reader<R: Read>($/;"	P	implementation:ContPacket
from_reader	/home/pme/src/rust/ctap/src/packet.rs	/^    pub fn from_reader<R: Read>(mut reader: R, report_size: usize) -> FidoResult<InitPacket> {$/;"	P	implementation:InitPacket
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:ChaChaRng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:Hc128Rng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:Isaac64Rng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:IsaacRng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:StdRng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:XorShiftRng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:SmallRng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    fn from_rng<R: RngCore>(rng: R) -> Result<Self, Error> {$/;"	P	implementation:StdRng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn from_rng<S: RngCore>(rng: S) -> Result<Self, Error> {$/;"	P	implementation:BlockRng
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn from_rng<S: RngCore>(rng: S) -> Result<Self, Error> {$/;"	P	implementation:BlockRng64
from_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {$/;"	P	interface:SeedableRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:ChaChaRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:Hc128Rng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:Isaac64Rng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:IsaacRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:StdRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:XorShiftRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:SmallRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:StdRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:BlockRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:BlockRng64
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^            fn from_seed(seed: Self::Seed) -> Self {$/;"	P	implementation:test::test_seed_from_u64::SeedableNum
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn from_seed(seed: Self::Seed) -> Self;$/;"	P	interface:SeedableRng
from_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn from_seed(seed: &'a [u8]) -> Fortuna {$/;"	P	implementation:Fortuna
from_seed_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    fn from_seed_(seed: &Seed) -> Self {$/;"	P	implementation:KeyPair
from_seed_and_public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_seed_and_public_key($/;"	P	implementation:KeyPair
from_seed_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_seed_unchecked(seed: untrusted::Input) -> Result<Self, error::Unspecified> {$/;"	P	implementation:KeyPair
from_slice_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_f32(numbers: &mut [f32]) {$/;"	P	implementation:BigEndian
from_slice_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_f32(numbers: &mut [f32]) {$/;"	P	implementation:LittleEndian
from_slice_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_f32(numbers: &mut [f32]);$/;"	P	interface:ByteOrder
from_slice_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_f64(numbers: &mut [f64]) {$/;"	P	implementation:BigEndian
from_slice_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_f64(numbers: &mut [f64]) {$/;"	P	implementation:LittleEndian
from_slice_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_f64(numbers: &mut [f64]);$/;"	P	interface:ByteOrder
from_slice_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_i128(src: &mut [i128]) {$/;"	P	interface:ByteOrder
from_slice_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_i16(src: &mut [i16]) {$/;"	P	interface:ByteOrder
from_slice_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_i32(src: &mut [i32]) {$/;"	P	interface:ByteOrder
from_slice_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_i64(src: &mut [i64]) {$/;"	P	interface:ByteOrder
from_slice_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u128(numbers: &mut [u128]) {$/;"	P	implementation:BigEndian
from_slice_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u128(numbers: &mut [u128]) {$/;"	P	implementation:LittleEndian
from_slice_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u128(numbers: &mut [u128]);$/;"	P	interface:ByteOrder
from_slice_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u16(numbers: &mut [u16]) {$/;"	P	implementation:BigEndian
from_slice_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u16(numbers: &mut [u16]) {$/;"	P	implementation:LittleEndian
from_slice_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u16(numbers: &mut [u16]);$/;"	P	interface:ByteOrder
from_slice_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u32(numbers: &mut [u32]) {$/;"	P	implementation:BigEndian
from_slice_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u32(numbers: &mut [u32]) {$/;"	P	implementation:LittleEndian
from_slice_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u32(numbers: &mut [u32]);$/;"	P	interface:ByteOrder
from_slice_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u64(numbers: &mut [u64]) {$/;"	P	implementation:BigEndian
from_slice_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u64(numbers: &mut [u64]) {$/;"	P	implementation:LittleEndian
from_slice_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn from_slice_u64(numbers: &mut [u64]);$/;"	P	interface:ByteOrder
from_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^    fn from_str(rename_all_str: &str) -> Result<Self, Self::Err> {$/;"	P	implementation:RenameRule
from_str_radix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr> {$/;"	f
from_str_radix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>;$/;"	P	interface:Num
from_str_radix_multi_byte_fail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn from_str_radix_multi_byte_fail() {$/;"	f
from_str_radix_unwrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn from_str_radix_unwrap() {$/;"	f
from_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^    fn from_string(value: &str) -> darling::Result<Self> {$/;"	P	implementation:DefaultExpression
from_to_bytes_preserves	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn from_to_bytes_preserves() {$/;"	f	module:tests
from_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_u128(n: u128) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_u16(n: u16) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_u16(n: u16) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_u32(n: u32) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_u32(n: u32) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn from_u64(n: u64) -> Int {$/;"	P	implementation:Int
from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_u64(n: u64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_u64(n: u64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_u8(n: u8) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^    fn from_u8(n: u8) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_usize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn from_usize(n: usize) -> Option<Self> {$/;"	P	interface:FromPrimitive
from_usize_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^    pub fn from_usize_bits(bits: usize) -> BitLength { BitLength(bits) }$/;"	P	implementation:BitLength
from_usize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^    pub fn from_usize_bytes(bytes: usize) -> Result<BitLength, error::Unspecified> {$/;"	P	implementation:BitLength
from_utf8_lossy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/export.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> &str {$/;"	f	module:string
from_utf8_lossy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/export.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> Cow<str> {$/;"	f	module:string
from_word	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn from_word() -> darling::Result<Self> {$/;"	P	implementation:FieldSetterMeta
from_word	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^    fn from_word() -> darling::Result<Self> {$/;"	P	implementation:DefaultExpression
from_writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn from_writer(wtr: W) -> Writer<W> {$/;"	P	implementation:Writer
from_writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn from_writer<W: io::Write>(&self, wtr: W) -> Writer<W> {$/;"	P	implementation:WriterBuilder
fsm_r	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fsm_r: [u32; 2],$/;"	m	struct:Sosemanuk
full_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn full_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	P	interface:FixedBuffer
full_buffer_should_not_flush_underlying	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn full_buffer_should_not_flush_underlying() {$/;"	f	module:tests
fun	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    fn fun(t: Tag, b: &Value) -> bool {$/;"	f	function:check
func	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    func: Funcs$/;"	m	struct:SigningContext
g	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn g(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
gamma	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod gamma;$/;"	n
gamma_a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    gamma_a: Gamma,$/;"	m	struct:Beta
gamma_b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    gamma_b: Gamma,$/;"	m	struct:Beta
ge_mask	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn ge_mask(self, other: Self) -> Self::Mask;$/;"	P	interface:FloatSIMDUtils
ge_scalarmult_base	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn ge_scalarmult_base(a: &[u8]) -> GeP3 {$/;"	f
gen	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn gen<T>(&mut self) -> T where Standard: Distribution<T> {$/;"	P	interface:Rng
gen_array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_array<G: Gen>(level: u16, g: &mut G) -> Vec<Value> {$/;"	f
gen_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn gen_bool(&mut self, p: f64) -> bool {$/;"	P	interface:Rng
gen_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_bytes<G: Gen>(g: &mut G) -> Bytes {$/;"	f
gen_chunks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_chunks<A: Arbitrary, G: Gen>(g: &mut G) -> LinkedList<A> {$/;"	f
gen_decoder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn gen_decoder(s: &str) -> GenericDecoder<Cursor<Vec<u8>>> {$/;"	f	module:tests
gen_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_int<G: Gen>(g: &mut G) -> Int {$/;"	f
gen_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_key<G: Gen>(g: &mut G) -> Key {$/;"	f
gen_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_map<G: Gen>(level: u16, g: &mut G) -> BTreeMap<Key, Value> {$/;"	f
gen_range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn gen_range<T: SampleUniform, B1, B2>(&mut self, low: B1, high: B2) -> T$/;"	P	interface:Rng
gen_ratio	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool {$/;"	P	interface:Rng
gen_simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_simple<G: Gen>(g: &mut G) -> Simple {$/;"	f
gen_tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_tag<G: Gen>(g: &mut G) -> Tag {$/;"	f
gen_tagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_tagged<G: Gen>(g: &mut G) -> Value {$/;"	f
gen_text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^fn gen_text<G: Gen>(g: &mut G) -> Text {$/;"	f
gen_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/random.rs	/^pub fn gen_value<G: Gen>(level: u16, g: &mut G) -> Value {$/;"	f
generate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn generate(&mut self, results: &mut Self::Results) {$/;"	f
generate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn generate(&mut self, results: &mut Self::Results);$/;"	P	interface:BlockRngCore
generate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^    pub fn generate($/;"	P	implementation:EphemeralPrivateKey
generate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub fn generate($/;"	P	implementation:PrivateKey
generate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn generate($/;"	P	implementation:SigningKey
generate_and_set	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn generate_and_set(&mut self, index: usize) {$/;"	P	implementation:BlockRng
generate_and_set	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn generate_and_set(&mut self, index: usize) {$/;"	P	implementation:BlockRng64
generate_blocks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_blocks(&mut self, k: usize, out: &mut [u8]) {$/;"	P	implementation:FortunaGenerator
generate_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^fn generate_iter(len: usize) -> impl Iterator<Item = (usize, usize)> {$/;"	f
generate_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    pub fn generate_pkcs8($/;"	P	implementation:KeyPair
generate_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn generate_pkcs8($/;"	P	implementation:Key
generate_private_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    generate_private_key: fn(rng: &rand::SecureRandom) -> Result<PrivateKey, error::Unspecified>/;"	m	struct:Curve
generate_private_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn generate_private_key($/;"	f
generate_random_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_random_data(&mut self, out: &mut [u8]) {$/;"	P	implementation:FortunaGenerator
generate_serializable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn generate_serializable($/;"	P	implementation:SigningKey
generate_serializable_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn generate_serializable_tests() {$/;"	f	module:tests
generator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    generator: FortunaGenerator,$/;"	m	struct:Fortuna
generics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    generics: Generics,$/;"	m	struct:Options
generics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
generics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub generics: &'a syn::Generics,$/;"	m	struct:Container
generics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn get(&self, k: Key) -> Cursor<'r> {$/;"	P	implementation:Cursor
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn get(&self, i: usize) -> Option<Range<usize>> {$/;"	P	implementation:Bounds
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn get(&self, i: usize) -> Option<&[u8]> {$/;"	P	implementation:ByteRecord
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn get(&self, i: usize) -> Option<&str> {$/;"	P	implementation:StringRecord
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn get(&self) -> bool {$/;"	P	implementation:BoolAttr
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn get(self) -> Option<T> {$/;"	P	implementation:Attr
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn get(self) -> Vec<T> {$/;"	P	implementation:VecAttr
get	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn get(&self, i: usize) -> Option<&u8> { self.bytes.get(i) }$/;"	P	implementation:no_panic::Slice
get_assertion	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn get_assertion(&self, device: &mut FidoDevice) -> FidoResult<&'a FidoCredential> {$/;"	P	implementation:FidoAssertionRequest
get_assertion	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn get_assertion<'a, 'b>($/;"	P	implementation:FidoDevice
get_assertion_devices	/home/pme/src/rust/ctap/src/util.rs	/^pub fn get_assertion_devices<'a>($/;"	f
get_cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CbcTest
get_cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CtrTest
get_cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::EcbTest
get_cipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8];$/;"	P	interface:test::CipherTest
get_devices	/home/pme/src/rust/ctap/src/lib.rs	/^pub fn get_devices() -> FidoResult<impl Iterator<Item = hid::DeviceInfo>> {$/;"	f
get_feature_report	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn get_feature_report(&self, buf: &mut [u8]) -> HidResult<usize> {$/;"	P	implementation:HidDevice
get_fork_counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    pub fn get_fork_counter() -> usize { 0 }$/;"	f	module:fork
get_fork_counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    pub fn get_fork_counter() -> usize {$/;"	f	module:fork
get_hid_device_info_vector	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    unsafe fn get_hid_device_info_vector() -> HidResult<Vec<DeviceInfo>> {$/;"	P	implementation:HidApi
get_indexed_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn get_indexed_string(&self, index: i32) -> HidResult<Option<String>> {$/;"	P	implementation:HidDevice
get_input_between_marks	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn get_input_between_marks(&self, mark1: Mark, mark2: Mark)$/;"	P	implementation:Reader
get_lit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn get_lit_str<'a>(cx: &Ctxt, attr_name: Symbol, lit: &'a syn::Lit) -> Result<&'a syn::LitStr, (/;"	f
get_lit_str2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn get_lit_str2<'a>($/;"	f
get_manufacturer_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn get_manufacturer_string(&self) -> HidResult<Option<String>> {$/;"	P	implementation:HidDevice
get_member	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn get_member(params: &Parameters, field: &Field, member: &Member) -> TokenStream {$/;"	f
get_multiple_renames	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn get_multiple_renames<'a>($/;"	f
get_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn get_mut(&mut self) -> &mut R {$/;"	P	implementation:Reader
get_plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CbcTest
get_plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CtrTest
get_plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::EcbTest
get_plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8];$/;"	P	interface:test::CipherTest
get_product_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn get_product_string(&self) -> HidResult<Option<String>> {$/;"	P	implementation:HidDevice
get_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn get_ref(&self) -> &R {$/;"	P	implementation:Reader
get_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/compat.rs	/^    pub fn get_ref(&self) -> &E {$/;"	P	implementation:Compat
get_renames	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn get_renames<'a>($/;"	f
get_ser_and_de	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn get_ser_and_de<'a, 'b, T, F>($/;"	f
get_serde_meta_items	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^pub fn get_serde_meta_items(cx: &Ctxt, attr: &syn::Attribute) -> Result<Vec<syn::NestedMeta>, ()/;"	f
get_serial_number_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn get_serial_number_string(&self) -> HidResult<Option<String>> {$/;"	P	implementation:HidDevice
get_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn get_slice(&self, r: core::ops::Range<usize>)$/;"	P	implementation:no_panic::Slice
get_test_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn get_test_vectors()-> [TestVector; 5]{$/;"	f	module:test
get_test_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn get_test_vectors()-> Vec<TestVector>{$/;"	f	module:test
get_weight	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn get_weight<T>(item: &(u32, T)) -> u32 {$/;"	f	function:test::test_weighted
get_where_predicates	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn get_where_predicates($/;"	f
get_with_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn get_with_tokens(self) -> Option<(TokenStream, T)> {$/;"	P	implementation:Attr
get_word_pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn get_word_pos(&self) -> u128 {$/;"	P	implementation:ChaChaRng
getter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    getter: Option<syn::ExprPath>,$/;"	m	struct:Field
getter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn getter(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
ghash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ghash;$/;"	n
ghash_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_10(bh: & mut Bencher) {$/;"	f	module:bench
ghash_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_1k(bh: & mut Bencher) {$/;"	f	module:bench
ghash_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_64k(bh: & mut Bencher) {$/;"	f	module:bench
go	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^        fn go<A: ReadBytesExt>(d: &mut Decoder<A>, level: usize) -> DecodeResult<TypeInfo> {$/;"	f	method:Decoder::typeinfo
greater_than	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^fn greater_than(a: &Nonnegative, b: &Nonnegative) -> bool {$/;"	f
gsm_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_10(bh: & mut Bencher) {$/;"	f	module:bench
gsm_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_1k(bh: & mut Bencher) {$/;"	f	module:bench
gsm_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_64k(bh: & mut Bencher) {$/;"	f	module:bench
gt_mask	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn gt_mask(self, other: Self) -> Self::Mask;$/;"	P	interface:FloatSIMDUtils
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    h: [u64; 8],$/;"	m	struct:Blake2b
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    h: [u32; 8],$/;"	m	struct:Blake2s
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn h(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    h         : [u32; 5],$/;"	m	struct:Poly1305
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    h: [u32; DIGEST_BUF_LEN],$/;"	m	struct:Ripemd160
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    h: [u32; STATE_LEN],$/;"	m	struct:Sha1
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    h: [u32; 8],$/;"	m	struct:Engine256State
h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    h: [u64; 8]$/;"	m	struct:Engine512State
h1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            h1: String,$/;"	m	struct:tests::partially_invalid_utf8::Row
h2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            h2: BString,$/;"	m	struct:tests::partially_invalid_utf8::Row
h3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            h3: String,$/;"	m	struct:tests::partially_invalid_utf8::Row
h_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    h_len: usize,$/;"	m	struct:PSSMetrics
half_rounded_up	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^    pub fn half_rounded_up(&self) -> BitLength {$/;"	P	implementation:BitLength
half_used	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    half_used: bool, \/\/ true if only half of the previous result is used$/;"	m	struct:BlockRng64
handle_container	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn handle_container<T: fmt::Display>($/;"	P	implementation:SeHeader
handle_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn handle_scalar<T: fmt::Display>($/;"	P	implementation:SeHeader
has_flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    has_flatten: bool,$/;"	m	struct:Container
has_flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn has_flatten(&self) -> bool {$/;"	P	implementation:Container
has_getter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    has_getter: bool,$/;"	m	struct:Parameters
has_getter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub fn has_getter(&self) -> bool {$/;"	P	implementation:Data
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn has_headers(&self) -> bool {$/;"	P	implementation:DeByteRecord
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn has_headers(&self) -> bool {$/;"	P	implementation:DeRecordWrap
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn has_headers(&self) -> bool {$/;"	P	implementation:DeStringRecord
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn has_headers(&self) -> bool;$/;"	P	interface:DeRecord
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    has_headers: bool,$/;"	m	struct:ReaderBuilder
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    has_headers: bool,$/;"	m	struct:ReaderState
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn has_headers(&mut self, yes: bool) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn has_headers(&self) -> bool {$/;"	P	implementation:Reader
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    has_headers: bool,$/;"	m	struct:WriterBuilder
has_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn has_headers(&mut self, yes: bool) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
has_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn has_next<R: ReadBuffer, W: WriteBuffer>($/;"	f	method:BlockEngine::fast_mode
hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn hash() {$/;"	f	module:test
hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hash(&mut self) {$/;"	P	implementation:Salsa20
hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    hash: [u64; 8],$/;"	m	struct:Whirlpool
hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/prng/mod.rs	/^#[doc(hidden)] pub mod hc128 {$/;"	n
hc128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hc128;$/;"	n
hc128_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_10(bh: & mut Bencher) {$/;"	f	module:bench
hc128_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_1k(bh: & mut Bencher) {$/;"	f	module:bench
hc128_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_64k(bh: & mut Bencher) {$/;"	f	module:bench
hchacha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn hchacha20(&mut self, out: &mut [u8]) -> () {$/;"	P	implementation:ChaCha20
header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    header: HeaderState,$/;"	m	struct:WriterState
header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    header: InnerHeader,$/;"	m	struct:InnerRaw
header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    header: InnerHeader,$/;"	m	struct:InnerRaw
headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    headers: Option<ByteRecordIter<'r>>,$/;"	m	struct:DeByteRecord
headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    headers: Option<StringRecordIter<'r>>,$/;"	m	struct:DeStringRecord
headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    headers: Option<Headers>,$/;"	m	struct:ReaderState
headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    headers: Option<StringRecord>,$/;"	m	struct:DeserializeRecordsIntoIter
headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    headers: Option<StringRecord>,$/;"	m	struct:DeserializeRecordsIter
headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn headers(&mut self) -> Result<&StringRecord> {$/;"	P	implementation:Reader
headers_on_empty_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn headers_on_empty_data() {$/;"	f	module:tests
helper	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn helper(bounds: (usize, Option<usize>)) -> Option<usize> {$/;"	f	module:size_hint
hex_to_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn hex_to_bytes(raw_hex: &str) -> Vec<u8> {$/;"	f	module:test
hid_close	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_close(device: *mut HidDevice);$/;"	f
hid_common	/home/pme/src/rust/ctap/src/lib.rs	/^mod hid_common;$/;"	n
hid_enumerate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_enumerate(vendor_id: c_ushort, product_id: c_ushort) -> *mut HidDeviceInfo;$/;"	f
hid_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_error(device: *mut HidDevice) -> *const wchar_t;$/;"	f
hid_exit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_exit() -> c_int;$/;"	f
hid_free_enumeration	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_free_enumeration(hid_device_info: *mut HidDeviceInfo);$/;"	f
hid_get_feature_report	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_get_feature_report($/;"	f
hid_get_indexed_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_get_indexed_string($/;"	f
hid_get_manufacturer_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_get_manufacturer_string($/;"	f
hid_get_product_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_get_product_string($/;"	f
hid_get_serial_number_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_get_serial_number_string($/;"	f
hid_init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_init() -> c_int;$/;"	f
hid_linux	/home/pme/src/rust/ctap/src/lib.rs	/^mod hid_linux;$/;"	n
hid_macwin	/home/pme/src/rust/ctap/src/lib.rs	/^mod hid_macwin;$/;"	n
hid_open	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_open($/;"	f
hid_open_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_open_path(path: *const c_char) -> *mut HidDevice;$/;"	f
hid_read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_read(device: *mut HidDevice, data: *mut c_uchar, length: size_t) -> c_int;$/;"	f
hid_read_timeout	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_read_timeout($/;"	f
hid_send_feature_report	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_send_feature_report($/;"	f
hid_set_nonblocking	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_set_nonblocking(device: *mut HidDevice, nonblock: c_int) -> c_int;$/;"	f
hid_write	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub fn hid_write(device: *mut HidDevice, data: *const c_uchar, length: size_t) -> c_int;$/;"	f
hint_total_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        hint_total_size: bool,$/;"	m	struct:test::ChunkHintedIterator
hint_total_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        hint_total_size: bool,$/;"	m	struct:test::WindowHintedIterator
hkdf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod hkdf;$/;"	n
hkdf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hkdf;$/;"	n
hkdf_expand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_expand<D: Digest>(mut digest: D, prk: &[u8], info: &[u8], okm: &mut [u8]) {$/;"	f
hkdf_extract	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_extract<D: Digest>(mut digest: D, salt: &[u8], ikm: &[u8], prk: &mut [u8]) {$/;"	f
hmac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod hmac;$/;"	n
hmac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hmac;$/;"	n
hmac	/home/pme/src/rust/ctap/src/extensions/mod.rs	/^pub mod hmac;$/;"	n
hmac_challange	/home/pme/src/rust/ctap/src/extensions/hmac.rs	/^    fn hmac_challange($/;"	P	interface:HmacExtension
hmac_signing_key_coverage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn hmac_signing_key_coverage() {$/;"	f	module:tests
hpass	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            hpass: [u8; 64],$/;"	m	struct:test::test_bcrypt_hash::Test
hs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    hs: [Gf128; 128],$/;"	m	struct:Ghash
hs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    hs: [Gf128; 128],$/;"	m	struct:GhashWithC
hsalsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^pub fn hsalsa20(key: &[u8], nonce: &[u8], out: &mut [u8]) {$/;"	f
hsalsa20_hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hsalsa20_hash(&mut self, out: &mut [u8]) {$/;"	P	implementation:Salsa20
hsalt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            hsalt: [u8; 64],$/;"	m	struct:test::test_bcrypt_hash::Test
hypot	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn hypot(self, other: Self) -> Self {$/;"	P	implementation:f32
hypot	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn hypot(self, other: Self) -> Self {$/;"	P	implementation:f64
hypot	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn hypot(self, other: Self) -> Self;$/;"	P	interface:Float
hypot	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn hypot(self, other: Self) -> Self;$/;"	P	interface:Real
i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn i(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    i: u8,$/;"	m	struct:Rc4
i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    i: usize$/;"	m	struct:Mark
i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    i: usize$/;"	m	struct:Reader
i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i16(&mut self) -> DecodeResult<i16> {$/;"	P	implementation:Decoder
i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i16(&mut self, ti: &TypeInfo) -> DecodeResult<i16> {$/;"	P	implementation:Kernel
i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn i16(&mut self, x: i16) -> EncodeResult {$/;"	P	implementation:Encoder
i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn i16(&self) -> Option<i16> {$/;"	P	implementation:Cursor
i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i32(&mut self) -> DecodeResult<i32> {$/;"	P	implementation:Decoder
i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i32(&mut self, ti: &TypeInfo) -> DecodeResult<i32> {$/;"	P	implementation:Kernel
i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn i32(&mut self, x: i32) -> EncodeResult {$/;"	P	implementation:Encoder
i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn i32(&self) -> Option<i32> {$/;"	P	implementation:Cursor
i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i64(&mut self) -> DecodeResult<i64> {$/;"	P	implementation:Decoder
i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i64(&mut self, ti: &TypeInfo) -> DecodeResult<i64> {$/;"	P	implementation:Kernel
i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn i64(&mut self, x: i64) -> EncodeResult {$/;"	P	implementation:Encoder
i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn i64(&self) -> Option<i64> {$/;"	P	implementation:Cursor
i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn i64(&self) -> Option<i64> {$/;"	P	implementation:Int
i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn i64(n: i64) -> Key {$/;"	P	implementation:Key
i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i8(&mut self) -> DecodeResult<i8> {$/;"	P	implementation:Decoder
i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn i8(&mut self, ti: &TypeInfo) -> DecodeResult<i8> {$/;"	P	implementation:Kernel
i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn i8(&mut self, x: i8) -> EncodeResult {$/;"	P	implementation:Encoder
i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn i8(&self) -> Option<i8> {$/;"	P	implementation:Cursor
i_forward	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    i_forward: usize,$/;"	m	struct:ByteRecordIter
i_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    i_key: Vec<u8>,$/;"	m	struct:Hmac
i_reverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    i_reverse: usize,$/;"	m	struct:ByteRecordIter
icon	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub icon: Option<&'a str>,$/;"	m	struct:PublicKeyCredentialRpEntity
icon	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub icon: Option<&'a str>,$/;"	m	struct:PublicKeyCredentialUserEntity
id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub id: CurveID,$/;"	m	struct:Curve
id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    id: RSAParametersID,$/;"	m	struct:RSAParameters
id	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub id: &'a [u8],$/;"	m	struct:PublicKeyCredentialUserEntity
id	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub id: &'a str,$/;"	m	struct:PublicKeyCredentialRpEntity
id	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub id: Vec<u8>,$/;"	m	struct:PublicKeyCredentialDescriptor
id	/home/pme/src/rust/ctap/src/lib.rs	/^    pub id: Vec<u8>,$/;"	m	struct:FidoCredential
ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    ident: Ident,$/;"	m	struct:Options
ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    ident: Option<Ident>,$/;"	m	struct:Field
ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Container
ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Variant
identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    identifier: Identifier,$/;"	m	struct:Container
identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn identifier(&self) -> Identifier {$/;"	P	implementation:Container
identities	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod identities;$/;"	n
ignored_any	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^mod ignored_any;$/;"	n
ikm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        ikm: Vec<u8>,$/;"	m	struct:test::TestVector
imp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    imp: ErrorImpl,$/;"	m	struct:Error
impl_as_byte_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^macro_rules! impl_as_byte_slice {$/;"	M
impl_as_byte_slice_arrays	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^macro_rules! impl_as_byte_slice_arrays {$/;"	M
impl_as_primitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_as_primitive {$/;"	M
impl_copy_clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^macro_rules! impl_copy_clone {$/;"	M
impl_deserialize_num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! impl_deserialize_num {$/;"	M
impl_fixed_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^macro_rules! impl_fixed_buffer( ($name:ident, $size:expr) => ($/;"	M
impl_from_primitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_from_primitive {$/;"	M
impl_from_primitive_for_float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_float {$/;"	M
impl_from_primitive_for_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_int {$/;"	M
impl_from_primitive_for_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_uint {$/;"	M
impl_from_primitive_wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_from_primitive_wrapping {$/;"	M
impl_int_from_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^macro_rules! impl_int_from_uint {$/;"	M
impl_num_cast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_num_cast {$/;"	M
impl_to_primitive_float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_float {$/;"	M
impl_to_primitive_float_to_float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_float_to_float {$/;"	M
impl_to_primitive_float_to_signed_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_float_to_signed_int {$/;"	M
impl_to_primitive_float_to_unsigned_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_float_to_unsigned_int {$/;"	M
impl_to_primitive_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_int {$/;"	M
impl_to_primitive_int_to_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_int_to_int {$/;"	M
impl_to_primitive_int_to_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_int_to_uint {$/;"	M
impl_to_primitive_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_uint {$/;"	M
impl_to_primitive_uint_to_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_uint_to_int {$/;"	M
impl_to_primitive_uint_to_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_uint_to_uint {$/;"	M
impl_to_primitive_wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^macro_rules! impl_to_primitive_wrapping {$/;"	M
impl_uint_from_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^macro_rules! impl_uint_from_fill {$/;"	M
impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^pub mod impls;$/;"	n
impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^mod impls;$/;"	n
impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^mod impls;$/;"	n
impossible	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^mod impossible;$/;"	n
in_hist	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    in_hist: Vec<u8>,$/;"	m	struct:BlockEngine
in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn in_place(self) -> InPlaceImplGenerics<'a> {$/;"	P	implementation:DeImplGenerics
in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn in_place(self) -> InPlaceTypeGenerics<'a> {$/;"	P	implementation:DeTypeGenerics
in_scratch	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    in_scratch: OwnedWriteBuffer,$/;"	m	struct:BlockEngine
increment_counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn increment_counter(&mut self, inc : u64) {$/;"	P	implementation:Blake2b
increment_counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn increment_counter(&mut self, inc : u32) {$/;"	P	implementation:Blake2s
increment_counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn increment_counter(&mut self) {$/;"	P	implementation:FortunaGenerator
indefinite_array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn indefinite_array() {$/;"	f	module:tests
indefinite_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn indefinite_bytes() {$/;"	f	module:tests
indefinite_object	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn indefinite_object() {$/;"	f	module:tests
indefinite_text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn indefinite_text() {$/;"	f	module:tests
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn index(&self, i: usize) -> &[u8] {$/;"	P	implementation:ByteRecord
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn index(&self, i: usize) -> &str {$/;"	P	implementation:StringRecord
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    pub fn index(&self, index: usize) -> usize {$/;"	P	implementation:IndexVec
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^#[cfg(feature="alloc")] pub mod index;$/;"	n
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    index: usize,$/;"	m	struct:BlockRng
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    index: usize,$/;"	m	struct:BlockRng64
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn index(&self) -> usize {$/;"	P	implementation:BlockRng
index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn index(&self) -> usize {$/;"	P	implementation:BlockRng64
indices	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    indices: index::IndexVecIntoIter,$/;"	m	struct:SliceChooseIter
infer_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn infer_deserialize<'de, V: Visitor<'de>>($/;"	P	implementation:DeByteRecord
infer_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn infer_deserialize<'de, V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
infer_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn infer_deserialize<'de, V: Visitor<'de>>($/;"	P	implementation:DeStringRecord
infer_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn infer_deserialize<'de, V: Visitor<'de>>($/;"	P	interface:DeRecord
infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn infinity() -> Self;$/;"	P	interface:Float
infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn infinity() -> Self;$/;"	P	interface:FloatCore
info	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/log_disabled.rs	/^macro_rules! info {$/;"	M
info	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^#[cfg(not(feature = "log"))] macro_rules! info { ($($x:tt)*) => () }$/;"	M
info	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        info: Vec<u8>,$/;"	m	struct:test::TestVector
init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    init: fn(ctx_buf: &mut [u8], key: &[u8]) -> Result<(), error::Unspecified>,$/;"	m	struct:Algorithm
init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod init;$/;"	n
init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^fn init(state: &mut Opaque, key: &KeyBytes, func: &mut Funcs) -> Result<(), error::Unspecified> /;"	f
init	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn init(&mut self, key : &[u8], nonce : &[u8]) {$/;"	P	implementation:Hc128
init	/home/pme/src/rust/ctap/src/lib.rs	/^    fn init(&mut self) -> FidoResult<()> {$/;"	P	implementation:FidoDevice
init0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init0(param: Blake2bParam, digest_length: u8, key: &[u8]) -> Blake2b {$/;"	P	implementation:Blake2b
init0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init0(param: Blake2sParam, digest_length: u8, key: &[u8]) -> Blake2s {$/;"	P	implementation:Blake2s
init_once	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/init.rs	/^pub fn init_once() {$/;"	f
init_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init_param( p: Blake2bParam, key: &[u8] ) -> Blake2b {$/;"	P	implementation:Blake2b
init_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init_param( p: Blake2sParam, key: &[u8] ) -> Blake2s {$/;"	P	implementation:Blake2s
init_shared_secret	/home/pme/src/rust/ctap/src/lib.rs	/^    fn init_shared_secret(&mut self) -> FidoResult<()> {$/;"	P	implementation:FidoDevice
init_state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn init_state() -> Blowfish {$/;"	P	implementation:Blowfish
initial_state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    initial_state: State,$/;"	m	struct:Algorithm
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl.rs	/^    inner: Box<Inner<dyn Fail>>,$/;"	m	struct:ErrorImpl
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    inner: &'static mut Inner,$/;"	m	struct:ErrorImpl
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    inner: &'static mut Inner,$/;"	m	struct:Error
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^    inner: Mutex<T>,$/;"	m	struct:SyncFailure
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    inner: ::core::slice::Iter<'a, u8>,$/;"	m	struct:BytesToHexChars
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^            inner: UniformFloat<f32>,$/;"	m	struct:tests::test_custom_uniform::UniformMyF32
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    inner: X::Sampler,$/;"	m	struct:Uniform
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    pub struct TestRng<R> { inner: R }$/;"	m	struct:test::TestRng
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    inner: R,$/;"	m	struct:ReseedingCore
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    inner: digest::Context,$/;"	m	struct:SigningContext
inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^    inner: std::boxed::Box<KeyPairImpl + Send + Sync>,$/;"	m	struct:KeyPair
inner_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    inner_length: u8,$/;"	m	struct:Blake2bParam
inner_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    inner_length: u8,$/;"	m	struct:Blake2sParam
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            input: Input,$/;"	m	struct:tests::flatten::Row
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        input: Vec<u8>,$/;"	m	struct:test::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        input: Vec<u8>,$/;"	m	struct:digest_tests::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Blake2b
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	P	implementation:Blake2b
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        input: Vec<u8>,$/;"	m	struct:digest_tests::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Blake2s
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	P	implementation:Blake2s
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn input<F: FnMut(&[u8])>(&mut self, input: &[u8], func: F);$/;"	P	interface:FixedBuffer
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn input(&mut self, input: &[u8]);$/;"	P	interface:Digest
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Pool
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Ghash
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Hmac
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn input(&mut self, data: &[u8]);$/;"	P	interface:Mac
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Md5
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Poly1305
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        input: &'static str,$/;"	m	struct:test::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn input(&mut self, msg: &[u8]) {$/;"	P	implementation:Ripemd160
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn input(&mut self, msg: &[u8]) { add_input(self, msg); }$/;"	P	implementation:Sha1
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha224
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha256
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha384
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512Trunc224
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512Trunc256
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Engine256
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Engine512
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Sha3
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn input(&mut self, source: &[u8]) {$/;"	P	implementation:Whirlpool
input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    input: no_panic::Slice<'a>,$/;"	m	struct:Reader
input_a	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_a(mut self, a: &[u8]) -> Ghash {$/;"	P	implementation:Ghash
input_c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_c(mut self, c: &[u8]) -> GhashWithC {$/;"	P	implementation:Ghash
input_c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_c(mut self, c: &[u8]) -> GhashWithC {$/;"	P	implementation:GhashWithC
input_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn input_str(&mut self, input: &str) {$/;"	P	interface:Digest
insert	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn insert<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:VecAttr
int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn int() {$/;"	f	module:tests
int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn int(&mut self) -> DecodeResult<Int> {$/;"	P	implementation:Decoder
int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn int(&mut self, ti: &TypeInfo) -> DecodeResult<Int> {$/;"	P	implementation:Kernel
int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn int(&mut self, x: Int) -> EncodeResult {$/;"	P	implementation:Encoder
int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod int;$/;"	n
int_to_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^macro_rules! int_to_int {$/;"	M
int_to_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^macro_rules! int_to_uint {$/;"	M
int_trait_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^macro_rules! int_trait_impl {$/;"	M
integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn integer() {$/;"	f	module:tests
integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^mod integer;$/;"	n
integer128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^mod integer128;$/;"	n
integer_decode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn integer_decode(self) -> (u64, i16, i8) {$/;"	P	implementation:f32
integer_decode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn integer_decode(self) -> (u64, i16, i8) {$/;"	P	implementation:f64
integer_decode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn integer_decode(self) -> (u64, i16, i8);$/;"	P	interface:Float
integer_decode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn integer_decode(self) -> (u64, i16, i8);$/;"	P	interface:FloatCore
integer_decode_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^fn integer_decode_f32(f: f32) -> (u64, i16, i8) {$/;"	f
integer_decode_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^fn integer_decode_f64(f: f64) -> (u64, i16, i8) {$/;"	f
integerify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn integerify(x: &[u8], n: usize) -> usize {$/;"	f	function:scrypt_ro_mix
interface_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub interface_number: c_int,$/;"	m	struct:HidDeviceInfo
interface_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    interface_number: i32,$/;"	m	struct:DeviceInfo
interface_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn interface_number(&self) -> i32 {$/;"	P	implementation:DeviceInfo
interface_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub interface_number: i32,$/;"	m	struct:HidDeviceInfo
internal_benches	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^mod internal_benches {$/;"	n
internal_benches	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^mod internal_benches {$/;"	n
internal_benches	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^mod internal_benches {$/;"	n
internals	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod internals;$/;"	n
into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    into: Option<bool>,$/;"	m	struct:FieldLevelSetter
into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    into: Option<bool>,$/;"	m	struct:StructLevelSetter
into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    fn into(self) -> HidDeviceInfo {$/;"	P	implementation:DeviceInfo
into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    fn into(self) -> Option<String> {$/;"	P	implementation:WcharString
into_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn into_byte_record(self) -> ByteRecord {$/;"	P	implementation:FromUtf8Error
into_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn into_byte_record(self) -> ByteRecord {$/;"	P	implementation:StringRecord
into_byte_records	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn into_byte_records(self) -> ByteRecordsIntoIter<R> {$/;"	P	implementation:Reader
into_deserialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn into_deserialize<D>(self) -> DeserializeRecordsIntoIter<R, D>$/;"	P	implementation:Reader
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn into_deserializer(self) -> Self::Deserializer;$/;"	P	interface:IntoDeserializer
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn into_deserializer(self) -> CowStrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn into_deserializer(self) -> Self::Deserializer {$/;"	f
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn into_deserializer(self) -> StrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn into_deserializer(self) -> StringDeserializer<E> {$/;"	f
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn into_deserializer(self) -> U32Deserializer<E> {$/;"	f
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn into_deserializer(self) -> UnitDeserializer<E> {$/;"	f
into_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn into_deserializer(self) -> Self {$/;"	f	module:content
into_encoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn into_encoded<M>(a: Elem<M, Unencoded>, m: &Modulus<M>) -> Elem<M, R> {$/;"	f	module:tests
into_encoded_point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    pub fn into_encoded_point(self) -> EncodedPoint { encode_point(self.x, self.y, self.z) }$/;"	P	implementation:ExtPoint
into_encoded_point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    pub fn into_encoded_point(self) -> EncodedPoint { encode_point(self.x, self.y, self.z) }$/;"	P	implementation:Point
into_float_with_exponent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^    fn into_float_with_exponent(self, exponent: i32) -> Self::F;$/;"	P	interface:IntoFloat
into_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn into_inner(self) -> Decoder<R> {$/;"	P	implementation:GenericDecoder
into_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn into_inner(self) -> Encoder<W> {$/;"	P	implementation:GenericEncoder
into_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn into_inner(self) -> W {$/;"	P	implementation:IntoInnerError
into_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn into_inner(self) -> R {$/;"	P	implementation:Reader
into_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn into_inner($/;"	P	implementation:Writer
into_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/compat.rs	/^    pub fn into_inner(self) -> E {$/;"	P	implementation:Compat
into_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn into_iter(self) -> ByteRecordIter<'r> {$/;"	P	implementation:ByteRecord
into_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn into_iter(self) -> StringRecordIter<'a> {$/;"	P	implementation:StringRecord
into_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    pub fn into_iter(self) -> IndexVecIntoIter {$/;"	P	implementation:IndexVec
into_kind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn into_kind(self) -> ErrorKind {$/;"	P	implementation:Error
into_modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn into_modulus<MM>(self) -> Result<Modulus<MM>, error::Unspecified> {$/;"	P	implementation:Elem
into_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_read_buffer(self) -> OwnedReadBuffer {$/;"	P	implementation:OwnedWriteBuffer
into_reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn into_reader(self) -> R {$/;"	P	implementation:Decoder
into_reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn into_reader(self) -> R {$/;"	P	implementation:Kernel
into_reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn into_reader(self) -> Reader<R> {$/;"	P	implementation:ByteRecordsIntoIter
into_reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn into_reader(self) -> Reader<R> {$/;"	P	implementation:DeserializeRecordsIntoIter
into_reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn into_reader(self) -> Reader<R> {$/;"	P	implementation:StringRecordsIntoIter
into_records	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn into_records(self) -> StringRecordsIntoIter<R> {$/;"	P	implementation:Reader
into_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^    fn into_tokens(self) -> TokenStream {$/;"	P	implementation:Error
into_unencoded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn into_unencoded(self, m: &Modulus<M>) -> Elem<M, Unencoded> { self.decode_once(m) }$/;"	P	implementation:Elem
into_vec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    pub fn into_vec(self) -> Vec<usize> {$/;"	P	implementation:IndexVec
into_write_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_write_buffer(self) -> OwnedWriteBuffer {$/;"	P	implementation:OwnedReadBuffer
into_writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn into_writer(self) -> W {$/;"	P	implementation:Encoder
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^    fn inv(self) -> Self::Output;$/;"	P	interface:Inv
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^    fn inv(self) -> f32 {$/;"	P	implementation:f32
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs	/^    fn inv(self) -> f64 {$/;"	P	implementation:f64
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs	/^pub mod inv;$/;"	n
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Self;$/;"	P	interface:Gf8Ops
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs4State<T> {$/;"	P	implementation:Bs4State
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Self;$/;"	P	interface:Gf2Ops
inv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Self;$/;"	P	interface:Gf4Ops
inv_mcol	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn inv_mcol(x: u32) -> u32 {$/;"	f
inv_mix_columns	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_mix_columns	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Self;$/;"	P	interface:AesOps
inv_neg_shape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^    inv_neg_shape: f64,$/;"	m	struct:Pareto
inv_shape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    inv_shape: f64,$/;"	m	struct:GammaSmallShape
inv_shape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^    inv_shape: f64,$/;"	m	struct:Weibull
inv_shift_row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> Self;$/;"	P	interface:AesBitValueOps
inv_shift_row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u16 {$/;"	P	implementation:u16
inv_shift_row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u32x4 {$/;"	P	implementation:u32x4
inv_shift_rows	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_shift_rows	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Self;$/;"	P	interface:AesOps
inv_sub_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_sub_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Self;$/;"	P	interface:AesOps
invalid	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^    fn invalid() {$/;"	f	module:tests
invalid	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^    fn invalid() {$/;"	f	module:tests
invalid_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^pub fn invalid_option<'de, D, T>(de: D) -> result::Result<Option<T>, D::Error>$/;"	f
invalid_type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn invalid_type(self, exp: &Expected) -> E {$/;"	f	module:content
invert	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn invert(&self) -> Fe {$/;"	P	implementation:Fe
invert_inverts	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn invert_inverts() {$/;"	f	module:tests
invert_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    pub fn invert_vartime(&mut self) {$/;"	P	implementation:ExtPoint
io	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^mod io;$/;"	n
is_backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^fn is_backtrace(bi: &&synstructure::BindingInfo) -> bool {$/;"	f
is_backtrace_enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^fn is_backtrace_enabled<F: Fn(&str) -> Option<OsString>>(get_var: F) -> bool {$/;"	f
is_break	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^fn is_break(e: &DecodeError) -> bool {$/;"	f
is_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^fn is_cause(bi: &&synstructure::BindingInfo) -> bool {$/;"	f
is_cow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_cow(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_done	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn is_done(&self) -> bool {$/;"	P	implementation:Reader
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:ByteRecord
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:StringRecord
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:BorrowedWriteBuffer
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:OwnedWriteBuffer
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:RefWriteBuffer
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.buff.len() }$/;"	P	implementation:RefReadBuffer
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.len }$/;"	P	implementation:OwnedReadBuffer
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool;$/;"	P	interface:ReadBuffer
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool;$/;"	P	interface:WriteBuffer
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn is_empty(&self) -> bool { self.bytes.is_empty() }$/;"	P	implementation:no_panic::Slice
is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn is_empty(&self) -> bool { self.value.is_empty() }$/;"	P	implementation:Input
is_finite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_finite(self) -> bool {$/;"	P	interface:FloatCore
is_finite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_finite(self) -> bool;$/;"	P	interface:Float
is_finite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn is_finite(self) -> bool;$/;"	P	interface:Float
is_forked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn is_forked(&self, global_fork_counter: usize) -> bool {$/;"	f
is_full	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == 0 }$/;"	P	implementation:OwnedReadBuffer
is_full	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == 0 }$/;"	P	implementation:RefReadBuffer
is_full	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:BorrowedWriteBuffer
is_full	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:OwnedWriteBuffer
is_full	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:RefWriteBuffer
is_full	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool;$/;"	P	interface:ReadBuffer
is_full	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool;$/;"	P	interface:WriteBuffer
is_human_readable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Deserializer
is_human_readable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Serializer
is_implicitly_borrowed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_implicitly_borrowed(ty: &syn::Type) -> bool {$/;"	f
is_implicitly_borrowed_reference	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_implicitly_borrowed_reference(ty: &syn::Type) -> bool {$/;"	f
is_infinite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_infinite(self) -> bool {$/;"	P	interface:FloatCore
is_infinite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_infinite(self) -> bool;$/;"	P	interface:Float
is_infinite	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn is_infinite(self) -> bool;$/;"	P	interface:Float
is_io_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn is_io_error(&self) -> bool {$/;"	P	implementation:Error
is_keccak	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_keccak(&self) -> bool {$/;"	P	implementation:Sha3Mode
is_nan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_nan(self) -> bool {$/;"	P	interface:FloatCore
is_nan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_nan(self) -> bool;$/;"	P	interface:Float
is_nan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn is_nan(self) -> bool;$/;"	P	interface:Float
is_negative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn is_negative(&self) -> bool {$/;"	f
is_negative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn is_negative(&self) -> bool;$/;"	P	interface:Signed
is_negative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_negative(&self) -> bool {$/;"	P	implementation:Fe
is_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    pub(super) fn is_none(&self) -> bool {$/;"	P	implementation:InternalBacktrace
is_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn is_none(&self) -> bool {$/;"	P	implementation:Default
is_nonzero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_nonzero(&self) -> bool {$/;"	P	implementation:Fe
is_normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_normal(self) -> bool {$/;"	P	interface:FloatCore
is_normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_normal(self) -> bool;$/;"	P	interface:Float
is_null	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^fn is_null(e: &DecodeError) -> bool {$/;"	f
is_odd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn is_odd(&self) -> bool {$/;"	P	implementation:Nonnegative
is_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn is_one(&self) -> bool$/;"	P	interface:One
is_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn is_one(&self) -> bool {$/;"	P	implementation:Elem
is_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_option(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_packed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    is_packed: bool,$/;"	m	struct:Container
is_packed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn is_packed(&self) -> bool {$/;"	P	implementation:Container
is_packed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    is_packed: bool,$/;"	m	struct:Parameters
is_positive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn is_positive(&self) -> bool {$/;"	f
is_positive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn is_positive(&self) -> bool;$/;"	P	interface:Signed
is_primitive_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_primitive_path(path: &syn::Path, primitive: &str) -> bool {$/;"	f
is_primitive_type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_primitive_type(ty: &syn::Type, primitive: &str) -> bool {$/;"	f
is_reference	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_reference(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_remote	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    is_remote: bool,$/;"	m	struct:Parameters
is_shake	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_shake(&self) -> bool {$/;"	P	implementation:Sha3Mode
is_sign_negative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_sign_negative(self) -> bool {$/;"	P	interface:FloatCore
is_sign_negative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_sign_negative(self) -> bool;$/;"	P	interface:Float
is_sign_negative	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn is_sign_negative(self) -> bool;$/;"	P	interface:Real
is_sign_positive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_sign_positive(self) -> bool {$/;"	P	interface:FloatCore
is_sign_positive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn is_sign_positive(self) -> bool;$/;"	P	interface:Float
is_sign_positive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn is_sign_positive(self) -> bool;$/;"	P	interface:Real
is_slice_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_slice_u8(ty: &syn::Type) -> bool {$/;"	f
is_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn is_some(self) -> bool {$/;"	P	implementation:Identifier
is_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn is_str(ty: &syn::Type) -> bool {$/;"	f
is_supported	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn is_supported() -> bool { false }$/;"	P	implementation:NoSource
is_supported	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn is_supported() -> bool { true }$/;"	P	interface:EntropySource
is_undefined	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^fn is_undefined(e: &DecodeError) -> bool {$/;"	f
is_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn is_zero(&self) -> bool {$/;"	f
is_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn is_zero(&self) -> bool;$/;"	P	interface:Zero
is_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn is_zero<M, E: Encoding>(&self, a: &elem::Elem<M, E>) -> bool {$/;"	P	implementation:CommonOps
is_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn is_zero(&self) -> bool {$/;"	P	implementation:BoxedLimbs
is_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn is_zero(&self) -> bool { self.limbs.is_zero() }$/;"	P	implementation:Elem
isaac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod isaac {$/;"	n
isaac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/prng/mod.rs	/^#[doc(hidden)] pub mod isaac {$/;"	n
isaac64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/prng/mod.rs	/^#[doc(hidden)] pub mod isaac64 {$/;"	n
it	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    it: iter::Peekable<ByteRecordIter<'r>>,$/;"	m	struct:DeByteRecord
it	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    it: iter::Peekable<StringRecordIter<'r>>,$/;"	m	struct:DeStringRecord
item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    pub item: T,$/;"	m	struct:Weighted
items	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    items: &'a mut [Weighted<T>],$/;"	m	struct:WeightedChoice
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn iter() {$/;"	f	module:tests
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn iter(&self) -> ByteRecordIter {$/;"	P	implementation:ByteRecord
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn iter(&self) -> StringRecordIter {$/;"	P	implementation:StringRecord
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    pub fn iter<'a>(&'a self) -> IndexVecIter<'a> {$/;"	P	implementation:IndexVec
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        iter: I,$/;"	m	struct:test::ChunkHintedIterator
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        iter: I,$/;"	m	struct:test::UnhintedIterator
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        iter: I,$/;"	m	struct:test::WindowHintedIterator
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:MapDeserializer
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:SeqDeserializer
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        iter: <&'a [(Content<'de>, Content<'de>)] as IntoIterator>::IntoIter,$/;"	m	struct:content::MapRefDeserializer
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        iter: <&'a [Content<'de>] as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqRefDeserializer
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        iter: <Vec<(Content<'de>, Content<'de>)> as IntoIterator>::IntoIter,$/;"	m	struct:content::MapDeserializer
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        iter: <Vec<Content<'de>> as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqDeserializer
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    iter: slice::Iter<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatMapAccess
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatInternallyTaggedAccess
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatStructAccess
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn iter(&self) -> <&'a [u8] as IntoIterator>::IntoIter {$/;"	P	implementation:no_panic::Slice
iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn iter(&self) -> <&[u8] as IntoIterator>::IntoIter {$/;"	P	implementation:Input
iter_causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn iter_causes(&self) -> Causes {$/;"	P	implementation:Error
iter_causes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    pub fn iter_causes(&self) -> Causes {$/;"	P	implementation:Fail
iter_chain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn iter_chain(&self) -> Causes {$/;"	P	implementation:Error
iter_chain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    pub fn iter_chain(&self) -> Causes {$/;"	P	implementation:Fail
iter_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub(crate) fn iter_eq<I, T>(&self, other: I) -> bool$/;"	P	implementation:ByteRecord
iter_forward_and_reverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn iter_forward_and_reverse() {$/;"	f	module:tests
iter_reverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn iter_reverse() {$/;"	f	module:tests
iterator_len_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^fn iterator_len_hint<I>(iter: &I) -> Option<usize>$/;"	f
iv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                iv:  Vec<u8>,$/;"	m	struct:test::TestVector
iv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        iv: Vec<u8>,$/;"	m	struct:test::CbcTest
j	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    j: u8,$/;"	m	struct:Rc4
jitter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod jitter {$/;"	n
join	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs2State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs2State
join	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs4State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs4State
kSecRandomDefault	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^        static kSecRandomDefault: &'static SecRandomRef;$/;"	v	module:darwin
k_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^    k_1: chacha::Key,$/;"	m	struct:Key
k_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^    k_2: chacha::Key,$/;"	m	struct:Key
keccak224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak224() -> Sha3 {$/;"	P	implementation:Sha3
keccak256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak256() -> Sha3 {$/;"	P	implementation:Sha3
keccak384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak384() -> Sha3 {$/;"	P	implementation:Sha3
keccak512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak512() -> Sha3 {$/;"	P	implementation:Sha3
keccak_f	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^fn keccak_f(state: &mut [u8]) {$/;"	f
kernel	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    kernel: Kernel<R>,$/;"	m	struct:Decoder
kernel	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn kernel(&mut self) -> &mut Kernel<R> {$/;"	P	implementation:Decoder
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn key(&mut self, x: &Key) -> EncodeResult {$/;"	P	implementation:GenericEncoder
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^    key: Key,$/;"	m	struct:OpeningKey
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^    key: Key,$/;"	m	struct:SealingKey
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    key: Key,$/;"	m	struct:OpeningKey
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    key: Key,$/;"	m	struct:SealingKey
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CtrTest
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                key:  Vec<u8>,$/;"	m	struct:test::TestVector
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        key: Option<Vec<u8>>,$/;"	m	struct:digest_tests::Test
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key: [u8; BLAKE2B_KEYBYTES],$/;"	m	struct:Blake2b
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        key: Option<Vec<u8>>,$/;"	m	struct:digest_tests::Test
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key: [u8; BLAKE2S_KEYBYTES],$/;"	m	struct:Blake2s
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CbcTest
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CtrTest
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::EcbTest
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            key:   [u8; 32],$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            key:   [u8; 32],$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    key:   [u8; 32],$/;"	m	struct:test::TestVector
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    key: [u8; KEY_LEN],$/;"	m	struct:FortunaGenerator
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        key: &'static str,$/;"	m	struct:test::Test
key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        key: Option<Content>,$/;"	m	struct:content::SerializeMap
key_agreement	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub key_agreement: Option<&'a CoseKey>,$/;"	m	struct:ClientPinRequest
key_agreement	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub key_agreement: Option<CoseKey>,$/;"	m	struct:ClientPinResponse
key_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    key_len: usize,$/;"	m	struct:Algorithm
key_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    pub fn key_len(&self) -> usize { self.key_len }$/;"	P	implementation:Algorithm
key_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key_length: u8,$/;"	m	struct:Blake2b
key_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key_length: u8,$/;"	m	struct:Blake2bParam
key_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key_length: u8,$/;"	m	struct:Blake2s
key_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key_length: u8,$/;"	m	struct:Blake2sParam
key_pair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    key_pair: std::sync::Arc<KeyPair>,$/;"	m	struct:SigningState
key_pair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    pub fn key_pair(&self) -> &KeyPair { self.key_pair.as_ref() }$/;"	P	implementation:SigningState
key_pair_from_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^pub fn key_pair_from_bytes($/;"	f
key_pair_from_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^pub(crate) fn key_pair_from_pkcs8($/;"	f
key_pair_from_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub fn key_pair_from_pkcs8($/;"	f
key_type	/home/pme/src/rust/ctap/src/cbor.rs	/^    key_type: u16,$/;"	m	struct:CoseKey
keypair_cases	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_cases() {$/;"	f	module:tests
keypair_matches_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_matches_mont() {$/;"	f	module:tests
keystream	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            keystream: Vec<u8>,$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
keystream	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            keystream: Vec<u8>,$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
kind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    kind: DeserializeErrorKind,$/;"	m	struct:DeserializeError
kind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    pub fn kind(&self) -> &DeserializeErrorKind {$/;"	P	implementation:DeserializeError
kind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn kind(&self) -> &ErrorKind {$/;"	P	implementation:Error
kind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    pub kind: FloatErrorKind,$/;"	m	struct:ParseFloatError
kind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub kind: ErrorKind,$/;"	m	struct:Error
kind	/home/pme/src/rust/ctap/src/error.rs	/^    pub fn kind(&self) -> FidoErrorKind {$/;"	P	implementation:FidoError
l	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        l: usize,$/;"	m	struct:test::TestVector
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            label: Label,$/;"	m	struct:tests::enum_label_simple_tagged::Row
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            label: String,$/;"	m	struct:tests::seq_in_struct_tail::Foo
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label: String,$/;"	m	struct:tests::struct_headers_inside_nested_tuple_seq::Foo
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label: String,$/;"	m	struct:tests::struct_headers_inside_seq::Foo
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label: String,$/;"	m	struct:tests::struct_headers_inside_tuple::Foo
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label: String,$/;"	m	struct:tests::struct_headers_inside_tuple_scalar_after::Foo
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label: String,$/;"	m	struct:tests::struct_headers_inside_tuple_scalar_before::Foo
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label: String,$/;"	m	struct:tests::struct_headers_nested::Foo
label	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label: String,$/;"	m	struct:tests::struct_headers_nested_seq::Foo
label2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label2: Baz,$/;"	m	struct:tests::struct_headers_inside_nested_tuple_seq::Bar
label2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label2: String,$/;"	m	struct:tests::struct_headers_nested::Nested
label2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            label2: bool,$/;"	m	struct:tests::struct_headers_inside_tuple::Bar
lambda	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    lambda: f64,$/;"	m	struct:Poisson
lambda_inverse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^    lambda_inverse: f64$/;"	m	struct:Exp
lanes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn lanes() -> usize { 1 }$/;"	P	interface:FloatAsSIMD
large_shape	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    large_shape: GammaLargeShape$/;"	m	struct:GammaSmallShape
last_end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    last_end: usize,$/;"	m	struct:ByteRecordIter
last_err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn last_err() { err_one(2) }$/;"	f	module:tests
last_node	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    last_node: u8,$/;"	m	struct:Blake2b
last_node	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    last_node: u8,$/;"	m	struct:Blake2s
last_panic	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn last_panic() { panic_one(2) }$/;"	f	module:tests
last_reseed_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    last_reseed_time: f64$/;"	m	struct:Fortuna
last_start	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    last_start: usize,$/;"	m	struct:ByteRecordIter
ldexpf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^        pub fn ldexpf(x: f32, exp: c_int) -> f32;$/;"	f	module:ffi
le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^pub mod le;$/;"	n
leading_zeros	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn leading_zeros(self) -> u32;$/;"	P	interface:PrimInt
leaf_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    leaf_length: u32,$/;"	m	struct:Blake2bParam
leaf_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    leaf_length: u32,$/;"	m	struct:Blake2sParam
leftover	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    leftover  : usize,$/;"	m	struct:Poly1305
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Bounds
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    len: usize,$/;"	m	struct:Bounds
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:ByteRecord
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:StringRecord
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    len: usize,$/;"	m	struct:Buffer
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:BytesToHexChars
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:IndexVec
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:SliceChooseIter
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    len: usize,$/;"	m	struct:Document
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature_impl.rs	/^    len: usize,$/;"	m	struct:Signature
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize$/;"	m	struct:BorrowedWriteBuffer
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:OwnedReadBuffer
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:OwnedWriteBuffer
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:RefWriteBuffer
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        len: usize,$/;"	m	struct:private::SeedTupleVariant
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn len(&self) -> usize { self.bytes.len() }$/;"	P	implementation:no_panic::Slice
len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn len(&self) -> usize { self.value.len() }$/;"	P	implementation:Input
len_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    len_len: usize,$/;"	m	struct:Algorithm
length_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    length_bits: u64,$/;"	m	struct:Ripemd160
length_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    length_bits: u64,$/;"	m	struct:Sha1
length_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    length_bits: (u64, u64),$/;"	m	struct:Engine512
length_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    length_bits: u64,$/;"	m	struct:Engine256
length_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    length_bytes: u64,$/;"	m	struct:Md5
lfsr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    lfsr: [u32; 10],$/;"	m	struct:Sosemanuk
lib	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^mod lib {$/;"	n
lifetime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    lifetime: PhantomData<&'de ()>,$/;"	m	struct:MapDeserializer
limb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod limb;$/;"	n
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    limbs: [limb::Limb; ELEM_LIMBS], \/\/ This is called `v` in the C code.$/;"	m	struct:Elem
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^    pub limbs: [Limb; MAX_LIMBS],$/;"	m	struct:Elem
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^macro_rules! limbs {$/;"	M
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    limbs: &'a [limb::Limb],$/;"	m	struct:PartialModulus
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    limbs: BoxedLimbs<M>, \/\/ Also `value >= 3`.$/;"	m	struct:Modulus
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    limbs: BoxedLimbs<M>,$/;"	m	struct:Elem
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    limbs: BoxedLimbs<M>,$/;"	m	struct:PrivateExponent
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    limbs: std::boxed::Box<[limb::Limb]>,$/;"	m	struct:BoxedLimbs
limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    limbs: std::vec::Vec<limb::Limb>,$/;"	m	struct:Nonnegative
limbs_are_even_constant_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_are_even_constant_time(limbs: &[Limb]) -> LimbMask {$/;"	f
limbs_are_zero_constant_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_are_zero_constant_time(limbs: &[Limb]) -> LimbMask {$/;"	f
limbs_as_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_as_bytes(src: &[Limb]) -> &[u8] {$/;"	f
limbs_equal_limb_constant_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_equal_limb_constant_time(a: &[Limb], b: Limb) -> LimbMask {$/;"	f
limbs_less_than_limb_constant_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_less_than_limb_constant_time(a: &[Limb], b: Limb) -> LimbMask {$/;"	f
limbs_less_than_limbs_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_less_than_limbs_consttime(a: &[Limb], b: &[Limb]) -> LimbMask {$/;"	f
limbs_less_than_limbs_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_less_than_limbs_vartime(a: &[Limb], b: &[Limb]) -> bool {$/;"	f
limbs_minimal_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_minimal_bits(a: &[Limb]) -> bits::BitLength {$/;"	f
limbs_reduce_once_constant_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn limbs_reduce_once_constant_time(r: &mut [Limb], m: &[Limb]) {$/;"	f
line	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    line: u64,$/;"	m	struct:Position
line	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn line(&self) -> u64 {$/;"	P	implementation:Position
ln	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ln(self) -> Self {$/;"	P	implementation:f32
ln	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ln(self) -> Self {$/;"	P	implementation:f64
ln	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ln(self) -> Self;$/;"	P	interface:Float
ln	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn ln(self) -> Self;$/;"	P	interface:Real
ln_1p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ln_1p(self) -> Self {$/;"	P	implementation:f32
ln_1p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ln_1p(self) -> Self {$/;"	P	implementation:f64
ln_1p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn ln_1p(self) -> Self;$/;"	P	interface:Float
ln_1p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn ln_1p(self) -> Self;$/;"	P	interface:Real
load_3i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3i(s: &[u8]) -> i64 {$/;"	f
load_3u	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3u(s: &[u8]) -> u64 {$/;"	f
load_4i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4i(s: &[u8]) -> i64 {$/;"	f
load_4u	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4u(s: &[u8]) -> u64 {$/;"	f
local	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    local: syn::Ident,$/;"	m	struct:Parameters
log	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/log_disabled.rs	/^macro_rules! log {$/;"	M
log	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn log(self, base: Self) -> Self;$/;"	P	interface:Float
log	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn log(self, base: Self) -> Self;$/;"	P	interface:Real
log10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn log10(self) -> Self {$/;"	P	implementation:f32
log10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn log10(self) -> Self {$/;"	P	implementation:f64
log10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn log10(self) -> Self;$/;"	P	interface:Float
log10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn log10(self) -> Self;$/;"	P	interface:Real
log2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn log2(self) -> Self {$/;"	P	implementation:f32
log2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn log2(self) -> Self {$/;"	P	implementation:f64
log2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn log2(self) -> Self;$/;"	P	interface:Float
log2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn log2(self) -> Self;$/;"	P	interface:Real
log_disabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/lib.rs	/^mod log_disabled;$/;"	n
log_enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/log_disabled.rs	/^macro_rules! log_enabled {$/;"	M
log_gamma	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^pub fn log_gamma(x: f64) -> f64 {$/;"	f
log_lambda	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    log_lambda: f64,$/;"	m	struct:Poisson
log_n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        log_n: u8,$/;"	m	struct:test::Test
log_n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    log_n: u8,$/;"	m	struct:ScryptParams
low	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    low: X,$/;"	m	struct:UniformFloat
low	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    low: X,$/;"	m	struct:UniformInt
lsh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn lsh(self, s: u32) -> u32x4 {$/;"	P	implementation:u32x4
m	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^    pub m: PhantomData<M>,$/;"	m	struct:Elem
m	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    m: PhantomData<M>,$/;"	m	struct:BoxedLimbs
m	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    m: PhantomData<M>,$/;"	m	struct:PartialModulus
m	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    m: PhantomData<M>,$/;"	m	struct:Width
mac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    mac: Ghash,$/;"	m	struct:AesGcm
mac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    mac: Poly1305,$/;"	m	struct:ChaCha20Poly1305
mac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod mac;$/;"	n
mac_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod mac_tests {$/;"	n
mac_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod mac_tests {$/;"	n
macros	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^mod macros;$/;"	n
macros	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^mod macros;$/;"	n
macros	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/mod.rs	/^mod macros;$/;"	n
magic_val	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    magic_val: f64,$/;"	m	struct:Poisson
maj	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/sha1.rs	/^fn maj(x: W32, y: W32, z: W32) -> W32 { (x & y) | (x & z) | (y & z) }$/;"	f
major	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    pub fn major(&self) -> u8 {$/;"	P	implementation:Type
make_counter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305_openssh.rs	/^fn make_counter(sequence_number: u32) -> chacha::Counter {$/;"	f
make_credential	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn make_credential($/;"	P	implementation:FidoDevice
make_credential	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn make_credential(&self, device: &mut FidoDevice) -> FidoResult<FidoCredential> {$/;"	P	implementation:FidoCredentialRequest
make_credential_devices	/home/pme/src/rust/ctap/src/util.rs	/^pub fn make_credential_devices<'a>($/;"	f
make_hmac_credential	/home/pme/src/rust/ctap/src/extensions/hmac.rs	/^    fn make_hmac_credential($/;"	P	implementation:FidoDevice
make_hmac_credential	/home/pme/src/rust/ctap/src/extensions/hmac.rs	/^    fn make_hmac_credential($/;"	P	interface:HmacExtension
manufacturer_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub manufacturer_string: *mut wchar_t,$/;"	m	struct:HidDeviceInfo
manufacturer_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    manufacturer_string: WcharString,$/;"	m	struct:DeviceInfo
manufacturer_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn manufacturer_string(&self) -> Option<&str> {$/;"	P	implementation:DeviceInfo
manufacturer_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub manufacturer_string: Option<String>,$/;"	m	struct:HidDeviceInfo
manufacturer_string_raw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn manufacturer_string_raw(&self) -> Option<&[wchar_t]> {$/;"	P	implementation:DeviceInfo
map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        map: A,$/;"	m	struct:private::MapAsEnum
map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    map: A,$/;"	m	struct:MapAccessDeserializer
map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeStructVariantAsMapValue
map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    map: &'a mut M,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
map_as_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn map_as_enum<A>(map: A) -> MapAsEnum<A> {$/;"	f	module:private
map_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn map_headers() {$/;"	f	module:tests
map_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! map_impl {$/;"	M
map_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! map_impl {$/;"	M
map_no_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn map_no_headers() {$/;"	f	module:tests
mark	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn mark(&self) -> Mark { Mark { i: self.i } }$/;"	P	implementation:Reader
mark_has_flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn mark_has_flatten(&mut self) {$/;"	P	implementation:Container
mark_transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn mark_transparent(&mut self) {$/;"	P	implementation:Field
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            marker: PhantomData<T>,$/;"	m	struct:deserialize::VecVisitor
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    marker: PhantomData<A>,$/;"	m	struct:ArrayVisitor
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:OptionVisitor
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:PhantomDataVisitor
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        marker: PhantomData<E>,$/;"	m	struct:private::UnitOnly
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedBytesDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedStrDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:CowStrDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:NeverDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:SeqDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StringDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:U32Deserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:UnitDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BytesDeserializer
marker	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn max(self, other: Self) -> Self {$/;"	P	interface:FloatCore
max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn max(self, other: Self) -> Self;$/;"	P	interface:Float
max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn max(self, other: Self) -> Self;$/;"	P	interface:Real
max	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^    max: f64,$/;"	m	struct:Triangular
max_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    mod max_input {$/;"	n	module:tests
max_input_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    max_input_len: u64,$/;"	m	struct:Algorithm
max_input_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^macro_rules! max_input_len {$/;"	M
max_input_len_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^    fn max_input_len_test() {$/;"	f	module:tests
max_input_len_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305.rs	/^    fn max_input_len_test() {$/;"	f	module:tests
max_input_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^        fn max_input_test(alg: &'static digest::Algorithm) {$/;"	f	module:tests::max_input
max_input_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^        macro_rules! max_input_tests {$/;"	M	module:tests::max_input
max_len_array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub max_len_array: usize,$/;"	m	struct:Config
max_len_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub max_len_bytes: usize,$/;"	m	struct:Config
max_len_text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub max_len_text: usize,$/;"	m	struct:Config
max_msg_size	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub max_msg_size: u16,$/;"	m	struct:GetInfoResponse
max_nesting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub max_nesting: usize,$/;"	m	struct:Config
max_size_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub max_size_map: usize,$/;"	m	struct:Config
max_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^    fn max_value() -> Self {$/;"	P	implementation:Wrapping
max_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^    fn max_value() -> Self;$/;"	P	interface:Bounded
max_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn max_value() -> Self;$/;"	P	interface:Float
max_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn max_value() -> Self;$/;"	P	interface:FloatCore
max_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn max_value() -> Self;$/;"	P	interface:Real
maybe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub fn maybe<A>(r: DecodeResult<A>) -> DecodeResult<Option<A>> {$/;"	f
maybe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn maybe(&self) -> Option<Cursor<'r>> {$/;"	P	implementation:Cursor
maybe_set	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &Fe, do_swap: i32) {$/;"	P	implementation:Fe
maybe_set	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &GePrecomp, do_swap: i32) {$/;"	P	implementation:GePrecomp
maybe_swap_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_swap_with(&mut self, other: &mut Fe, do_swap: i32) {$/;"	P	implementation:Fe
md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod md5;$/;"	n
md5_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_10(bh: & mut Bencher) {$/;"	f	module:bench
md5_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_1k(bh: & mut Bencher) {$/;"	f	module:bench
md5_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_64k(bh: & mut Bencher) {$/;"	f	module:bench
mean	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    mean: f64,$/;"	m	struct:Normal
median	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    fn median(mut numbers: &mut [f64]) -> f64 {$/;"	f	module:test
median	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    median: f64,$/;"	m	struct:Cauchy
member	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub member: syn::Member,$/;"	m	struct:Field
member_message	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/check.rs	/^fn member_message(member: &Member) -> String {$/;"	f
methods_seem_to_work	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    fn methods_seem_to_work() {$/;"	f	module:test
methods_seem_to_work	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    fn methods_seem_to_work() {$/;"	f	module:test
mgf1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^fn mgf1($/;"	f
middle_err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn middle_err() { err_one(1) }$/;"	f	module:tests
middle_panic	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn middle_panic() { panic_one(1) }$/;"	f	module:tests
min	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn min(self, other: Self) -> Self {$/;"	P	interface:FloatCore
min	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn min(self, other: Self) -> Self;$/;"	P	interface:Float
min	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn min(self, other: Self) -> Self;$/;"	P	interface:Real
min	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^    min: f64,$/;"	m	struct:Triangular
min_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    min_bits: bits::BitLength,$/;"	m	struct:RSAParameters
min_positive_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn min_positive_value() -> Self;$/;"	P	interface:Float
min_positive_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn min_positive_value() -> Self;$/;"	P	interface:FloatCore
min_positive_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn min_positive_value() -> Self;$/;"	P	interface:Real
min_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^    fn min_value() -> Self {$/;"	P	implementation:Wrapping
min_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^    fn min_value() -> Self;$/;"	P	interface:Bounded
min_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn min_value() -> Self;$/;"	P	interface:Float
min_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn min_value() -> Self;$/;"	P	interface:FloatCore
min_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn min_value() -> Self;$/;"	P	interface:Real
minimal_width_from_unpadded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn minimal_width_from_unpadded(limbs: &[limb::Limb]) -> Self {$/;"	P	implementation:BoxedLimbs
missing_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>$/;"	f
mix_columns	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
mix_columns	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Self;$/;"	P	interface:AesOps
mixed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn mixed() {$/;"	f	module:tests
mixed_hex_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn mixed_hex_seq() {$/;"	f	module:tests
mk_result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn mk_result(st: &mut Sha1, rs: &mut [u8]) {$/;"	f
mock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mod.rs	/^pub mod mock;   \/\/ Public so we don't export `StepRng` directly, making it a bit$/;"	n
mode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^    mode: f64,$/;"	m	struct:Triangular
mode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    mode: UniformDurationMode,$/;"	m	struct:UniformDuration
mode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    mode: Sha3Mode,$/;"	m	struct:Sha3
modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    modulus: bigint::Modulus<M>,$/;"	m	struct:PrivatePrime
modulus_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^    pub fn modulus_len(&self) -> usize { self.n_bits.as_usize_bytes_rounded_up() }$/;"	P	implementation:Key
montgomery	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/arithmetic/mod.rs	/^pub mod montgomery;$/;"	n
move_last	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn move_last(slice: &mut [usize], pos: usize) {$/;"	f	function:test::test_shuffle
msg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error_message.rs	/^    msg: D,$/;"	m	struct:ErrorMessage
msg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    fn msg(&self) -> &str {$/;"	P	implementation:WeightedError
msg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub msg: &'static str,$/;"	m	struct:Error
mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn mul(a: &Scalar<R>, b: &Scalar<R>) -> Scalar<R> { binary_op(GFp_p256_scalar_mul_mont, a, b/;"	f	function:p256_scalar_inv_to_mont
mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn mul(a: &Scalar<R>, b: &Scalar<R>) -> Scalar<R> { binary_op(GFp_p384_scalar_mul_mont, a, b/;"	f	function:p384_scalar_inv_to_mont
mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs2State<T>) -> Bs2State<T> {$/;"	P	implementation:Bs2State
mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs4State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs4State
mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Self) -> Self;$/;"	P	interface:Gf2Ops
mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Self) -> Self;$/;"	P	interface:Gf4Ops
mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
mul_121666	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_121666(&self) -> Fe {$/;"	P	implementation:Fe
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn mul_add(self, a: Self, b: Self) -> Self {$/;"	P	implementation:f32
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn mul_add(self, a: Self, b: Self) -> Self {$/;"	P	implementation:f64
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn mul_add(self, a: Self, b: Self) -> Self;$/;"	P	interface:Float
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs	/^pub mod mul_add;$/;"	n
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add(self, a: A, b: B) -> Self::Output;$/;"	P	interface:MulAdd
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add(self, a: Self, b: Self) -> Self::Output {$/;"	P	implementation:f32
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add(self, a: Self, b: Self) -> Self::Output {$/;"	P	implementation:f64
mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn mul_add(self, a: Self, b: Self) -> Self;$/;"	P	interface:Real
mul_add_assign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add_assign(&mut self, a: A, b: B);$/;"	P	interface:MulAddAssign
mul_add_assign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add_assign(&mut self, a: Self, b: Self) {$/;"	P	implementation:f32
mul_add_assign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add_assign(&mut self, a: Self, b: Self) {$/;"	P	implementation:f64
mul_add_assign_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^macro_rules! mul_add_assign_impl {$/;"	M
mul_add_float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add_float() {$/;"	f	module:tests
mul_add_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^macro_rules! mul_add_impl {$/;"	M
mul_add_integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^    fn mul_add_integer() {$/;"	f	module:tests
mul_assoc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_assoc() {$/;"	f	module:tests
mul_commutes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_commutes() {$/;"	f	module:tests
mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^pub fn mul_mont<M, EA: Encoding, EB: Encoding>($/;"	f
mut_if	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn mut_if(is_mut: bool) -> Option<TokenStream> {$/;"	f
n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    n: u64,$/;"	m	struct:Binomial
n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub n: Elem<Unencoded>,$/;"	m	struct:CommonOps
n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^    pub n: bigint::Modulus<N>,$/;"	m	struct:Key
n0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    n0: N0,$/;"	m	struct:Modulus
n0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    n0: N0,$/;"	m	struct:PartialModulus
n_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^    pub n_bits: bits::BitLength,$/;"	m	struct:Key
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    name: Ident,$/;"	m	struct:BuildFn
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    name: Option<Ident>,$/;"	m	struct:FieldLevelSetter
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    name: Option<Ident>,$/;"	m	struct:Options
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn name(&self) -> Option<&str> {$/;"	P	implementation:Error
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error_message.rs	/^    fn name(&self) -> Option<&str> {$/;"	P	implementation:ErrorMessage
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn name(&self) -> Option<&str> {$/;"	P	interface:Fail
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        name: &'static str,$/;"	m	struct:content::TagOrContentVisitor
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStruct
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariant
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariantAsMapValue
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleStruct
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariant
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    name: &'static str,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Container
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Field
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Variant
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    name: Symbol,$/;"	m	struct:Attr
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    name: Symbol,$/;"	m	struct:VecAttr
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Container
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Field
name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Variant
name	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub name: &'a str,$/;"	m	struct:PublicKeyCredentialUserEntity
name	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub name: Option<&'a str>,$/;"	m	struct:PublicKeyCredentialRpEntity
name	/home/pme/src/rust/ctap/src/error.rs	/^    pub fn name(&self) -> Option<&'static str> {$/;"	P	implementation:CborErrorCode
names	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    names: &'static [&'static str],$/;"	m	struct:OneOf
nan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn nan() -> Self;$/;"	P	interface:Float
nan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn nan() -> Self;$/;"	P	interface:FloatCore
nearly_full_context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^        fn nearly_full_context(alg: &'static digest::Algorithm) -> digest::Context {$/;"	f	module:tests::max_input
needs_deserialize_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn needs_deserialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
needs_pin	/home/pme/src/rust/ctap/src/lib.rs	/^    needs_pin: bool,$/;"	m	struct:FidoDevice
needs_pin	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn needs_pin(&self) -> bool {$/;"	P	implementation:FidoDevice
needs_serialize_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn needs_serialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn neg(&self) -> Fe {$/;"	P	implementation:Fe
neg_infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn neg_infinity() -> Self;$/;"	P	interface:Float
neg_infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn neg_infinity() -> Self;$/;"	P	interface:FloatCore
neg_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn neg_zero() -> Self;$/;"	P	interface:Float
neg_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn neg_zero() -> Self;$/;"	P	interface:FloatCore
negate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn negate(&mut self) {$/;"	P	implementation:Elem
nest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            nest: Nested,$/;"	m	struct:tests::struct_headers_nested::Foo
nested	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^pub fn nested<'a, F, R, E: Copy>($/;"	f
never	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    never: !,$/;"	m	struct:NeverDeserializer
never_enabled_if_failure_is_set_to_no	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    fn never_enabled_if_failure_is_set_to_no() {$/;"	f	module:tests
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn new(c: Config, r: R) -> Decoder<R> {$/;"	P	implementation:Decoder
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn new(c: Config, r: R) -> GenericDecoder<R> {$/;"	P	implementation:GenericDecoder
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn new(r: R) -> Kernel<R> {$/;"	P	implementation:Kernel
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn new(w: W) -> Encoder<W> {$/;"	P	implementation:Encoder
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn new(w: W) -> GenericEncoder<W> {$/;"	P	implementation:GenericEncoder
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn new(v: &'r Value) -> Cursor<'r> {$/;"	P	implementation:Cursor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn new() -> ByteRecord {$/;"	P	implementation:ByteRecord
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn new() -> Position {$/;"	P	implementation:Position
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub(crate) fn new(kind: ErrorKind) -> Error {$/;"	P	implementation:Error
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub(crate) fn new(rec: ByteRecord, err: Utf8Error) -> FromUtf8Error {$/;"	P	implementation:FromUtf8Error
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub(crate) fn new(wtr: W, err: io::Error) -> IntoInnerError<W> {$/;"	P	implementation:IntoInnerError
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn new(builder: &ReaderBuilder, rdr: R) -> Reader<R> {$/;"	P	implementation:Reader
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn new(mut rdr: Reader<R>) -> DeserializeRecordsIntoIter<R, D> {$/;"	P	implementation:DeserializeRecordsIntoIter
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn new(rdr: &'r mut Reader<R>) -> ByteRecordsIter<'r, R> {$/;"	P	implementation:ByteRecordsIter
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn new(rdr: &'r mut Reader<R>) -> DeserializeRecordsIter<'r, R, D> {$/;"	P	implementation:DeserializeRecordsIter
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn new(rdr: &'r mut Reader<R>) -> StringRecordsIter<'r, R> {$/;"	P	implementation:StringRecordsIter
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn new(rdr: Reader<R>) -> ByteRecordsIntoIter<R> {$/;"	P	implementation:ByteRecordsIntoIter
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn new(rdr: Reader<R>) -> StringRecordsIntoIter<R> {$/;"	P	implementation:StringRecordsIntoIter
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn new() -> ReaderBuilder {$/;"	P	implementation:ReaderBuilder
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn new(wtr: &'w mut Writer<W>) -> Self {$/;"	P	implementation:SeHeader
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn new() -> StringRecord {$/;"	P	implementation:StringRecord
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn new(builder: &WriterBuilder, wtr: W) -> Writer<W> {$/;"	P	implementation:Writer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn new() -> WriterBuilder {$/;"	P	implementation:WriterBuilder
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    pub(super) fn new() -> InternalBacktrace {$/;"	P	implementation:InternalBacktrace
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/sync_failure.rs	/^    pub fn new(err: E) -> Self {$/;"	P	implementation:SyncFailure
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure_derive-0.1.8/src/lib.rs	/^    fn new(span: Span, message: &str) -> Error {$/;"	P	implementation:Error
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn new() -> HidResult<Self> {$/;"	P	implementation:HidApi
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new() -> Result<JitterRng, rngs::TimerError> {$/;"	P	implementation:JitterRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new() -> Result<Self, Error> {$/;"	P	implementation:OsRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new() -> Self {$/;"	P	implementation:EntropyRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new(r: R) -> ReadRng<R> {$/;"	P	implementation:ReadRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {$/;"	f
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^    pub fn new(p: f64) -> Bernoulli {$/;"	P	implementation:Bernoulli
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    pub fn new(n: u64, p: f64) -> Binomial {$/;"	P	implementation:Binomial
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    pub fn new(median: f64, scale: f64) -> Cauchy {$/;"	P	implementation:Cauchy
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    pub fn new<V: Into<Vec<f64>>>(alpha: V) -> Dirichlet {$/;"	P	implementation:Dirichlet
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^    pub fn new(lambda: f64) -> Exp {$/;"	P	implementation:Exp
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    pub fn new(alpha: f64, beta: f64) -> Beta {$/;"	P	implementation:Beta
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    pub fn new(k: f64) -> ChiSquared {$/;"	P	implementation:ChiSquared
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    pub fn new(m: f64, n: f64) -> FisherF {$/;"	P	implementation:FisherF
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    pub fn new(n: f64) -> StudentT {$/;"	P	implementation:StudentT
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    pub fn new(shape: f64, scale: f64) -> Gamma {$/;"	P	implementation:Gamma
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    pub fn new(items: &'a mut [Weighted<T>]) -> WeightedChoice<'a, T> {$/;"	P	implementation:WeightedChoice
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    pub fn new(mean: f64, std_dev: f64) -> LogNormal {$/;"	P	implementation:LogNormal
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    pub fn new(mean: f64, std_dev: f64) -> Normal {$/;"	P	implementation:Normal
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^    pub fn new(scale: f64, shape: f64) -> Pareto {$/;"	P	implementation:Pareto
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    pub fn new(lambda: f64) -> Poisson {$/;"	P	implementation:Poisson
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^    pub fn new(min: f64, max: f64, mode: f64) -> Triangular {$/;"	P	implementation:Triangular
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^            fn new<B1, B2>(low: B1, high: B2) -> Self$/;"	P	implementation:tests::test_custom_uniform::UniformMyF32
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn new<B1, B2>(low: B1, high: B2) -> Self$/;"	P	interface:UniformSampler
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn new<B1, B2>(low_b: B1, high_b: B2) -> Self$/;"	P	implementation:UniformDuration
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    pub fn new<B1, B2>(low: B1, high: B2) -> Uniform<X>$/;"	P	implementation:Uniform
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^    pub fn new() -> UnitCircle {$/;"	P	implementation:UnitCircle
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^    pub fn new() -> UnitSphereSurface {$/;"	P	implementation:UnitSphereSurface
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^    pub fn new(scale: f64, shape: f64) -> Weibull {$/;"	P	implementation:Weibull
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    pub fn new<I>(weights: I) -> Result<WeightedIndex<X>, WeightedError>$/;"	P	implementation:WeightedIndex
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    pub fn new(r: R) -> ReadRng<R> {$/;"	P	implementation:ReadRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {$/;"	f
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {$/;"	f
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    pub fn new() -> Self {$/;"	P	implementation:EntropyRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^    pub fn new(initial: u64, increment: u64) -> Self {$/;"	P	implementation:StepRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn new(core: R) -> BlockRng64<R>{$/;"	P	implementation:BlockRng64
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn new(core: R) -> BlockRng<R>{$/;"	P	implementation:BlockRng
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub fn new(kind: ErrorKind, msg: &'static str) -> Self {$/;"	P	implementation:Error
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    fn new(algorithm: &'static Algorithm, key_bytes: &[u8]) -> Result<Self, error::Unspecified> /;"	P	implementation:Key
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    pub fn new(algorithm: &'static Algorithm, key_bytes: &[u8])$/;"	P	implementation:OpeningKey
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    pub fn new(algorithm: &'static Algorithm, key_bytes: &[u8])$/;"	P	implementation:SealingKey
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub fn new(algorithm: &'static Algorithm) -> Context {$/;"	P	implementation:Context
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn new(alg: &'static Algorithm, key_pair: ec::KeyPair) -> Self {$/;"	P	implementation:Key
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn new(digest_alg: &'static digest::Algorithm, key_value: &[u8]) -> SigningKey {$/;"	P	implementation:SigningKey
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn new(digest_alg: &'static digest::Algorithm, key_value: &[u8]) -> VerificationKey {$/;"	P	implementation:VerificationKey
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    pub fn new() -> SystemRandom { SystemRandom }$/;"	P	implementation:SystemRandom
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn new($/;"	P	implementation:PSSMetrics
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    fn new(p: bigint::Nonnegative, dP: untrusted::Input) -> Result<Self, error::Unspecified> {$/;"	P	implementation:PrivatePrime
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    pub fn new(key_pair: std::sync::Arc<KeyPair>) -> Result<Self, error::Unspecified> {$/;"	P	implementation:SigningState
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^    pub(crate) fn new<I: KeyPairImpl + Sync>(inner: I) -> Self {$/;"	P	implementation:KeyPair
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn new (key_size: KeySize, key: &[u8], nonce: &[u8], aad: &[u8]) -> AesGcm<'a> {$/;"	P	implementation:AesGcm
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiDecryptor {$/;"	P	implementation:AesNiDecryptor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiEncryptor {$/;"	P	implementation:AesNiEncryptor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new(outlen: usize) -> Blake2b {$/;"	P	implementation:Blake2b
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new(outlen: usize) -> Blake2s {$/;"	P	implementation:Blake2s
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new(processor: P, padding: X, block_size: usize) -> BlockEngine<P, X> {$/;"	P	implementation:BlockEngine
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: &[u8]) -> CtrModeX8<A> {$/;"	P	implementation:CtrModeX8
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: Vec<u8>) -> CtrMode<A> {$/;"	P	implementation:CtrMode
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbDecryptor<T, DecPadding<X>> {$/;"	P	implementation:EcbDecryptor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbEncryptor<T, EncPadding<X>> {$/;"	P	implementation:EcbEncryptor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcDecryptor<T, DecPadding<X>> {$/;"	P	implementation:CbcDecryptor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcEncryptor<T, EncPadding<X>> {$/;"	P	implementation:CbcEncryptor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn new(key: &[u8]) -> Blowfish {$/;"	P	implementation:Blowfish
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn new(parent: &mut OwnedReadBuffer) -> BorrowedWriteBuffer {$/;"	P	implementation:BorrowedWriteBuffer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &[u8]) -> RefReadBuffer {$/;"	P	implementation:RefReadBuffer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &mut [u8]) -> RefWriteBuffer {$/;"	P	implementation:RefWriteBuffer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedReadBuffer {$/;"	P	implementation:OwnedReadBuffer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedWriteBuffer {$/;"	P	implementation:OwnedWriteBuffer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	P	implementation:ChaCha20
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  pub fn new(key: &[u8], nonce: &[u8], aad: &[u8]) -> ChaCha20Poly1305 {$/;"	P	implementation:ChaCha20Poly1305
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer128 {$/;"	P	implementation:FixedBuffer128
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer64 {$/;"	P	implementation:FixedBuffer64
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        fn new(seed: u32) -> CurveGen {$/;"	P	implementation:tests::CurveGen
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> FortunaGenerator {$/;"	P	implementation:FortunaGenerator
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> Pool {$/;"	P	implementation:Pool
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn new(a: u32, b: u32, c: u32, d: u32) -> Gf128 {$/;"	P	implementation:Gf128
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn new(h: &[u8]) -> Ghash {$/;"	P	implementation:Ghash
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Hc128 {$/;"	P	implementation:Hc128
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    pub fn new(mut digest: D, key: &[u8]) -> Hmac<D> {$/;"	P	implementation:Hmac
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new(code: &[u8]) -> MacResult {$/;"	P	implementation:MacResult
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn new() -> Md5State {$/;"	P	implementation:Md5State
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn new() -> Md5 {$/;"	P	implementation:Md5
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn new(key: &[u8]) -> Poly1305 {$/;"	P	implementation:Poly1305
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn new(key: &[u8]) -> Rc4 {$/;"	P	implementation:Rc4
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn new() -> Ripemd160 {$/;"	P	implementation:Ripemd160
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	P	implementation:Salsa20
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    pub fn new(log_n: u8, r: u32, p: u32) -> ScryptParams {$/;"	P	implementation:ScryptParams
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn new() -> Sha1 {$/;"	P	implementation:Sha1
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha224 {$/;"	P	implementation:Sha224
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha256 {$/;"	P	implementation:Sha256
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha384 {$/;"	P	implementation:Sha384
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512 {$/;"	P	implementation:Sha512
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc224 {$/;"	P	implementation:Sha512Trunc224
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc256 {$/;"	P	implementation:Sha512Trunc256
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn new(mode: Sha3Mode) -> Sha3 {$/;"	P	implementation:Sha3
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Sosemanuk {$/;"	P	implementation:Sosemanuk
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    pub fn new() -> Whirlpool {$/;"	P	implementation:Whirlpool
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn new() -> Self {$/;"	P	implementation:ArrayVisitor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn new(iter: I) -> Self {$/;"	f
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn new(map: A) -> Self {$/;"	P	implementation:MapAccessDeserializer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn new(seq: A) -> Self {$/;"	P	implementation:SeqAccessDeserializer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn new(value: &'de [u8]) -> BorrowedBytesDeserializer<'de, E> {$/;"	P	implementation:BorrowedBytesDeserializer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn new(value: &'de str) -> BorrowedStrDeserializer<'de, E> {$/;"	P	implementation:BorrowedStrDeserializer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn new() -> Self {$/;"	P	implementation:content::ContentVisitor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn new(map: &'a [(Content<'de>, Content<'de>)]) -> Self {$/;"	f	module:content
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn new(map: Vec<(Content<'de>, Content<'de>)>) -> Self {$/;"	f	module:content
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn new(name: &'static str) -> Self {$/;"	P	implementation:content::TagOrContentVisitor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn new(slice: &'a [Content<'de>]) -> Self {$/;"	f	module:content
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn new(vec: Vec<Content<'de>>) -> Self {$/;"	f	module:content
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub fn new(content: &'a Content<'de>) -> Self {$/;"	P	implementation:content::ContentRefDeserializer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub fn new(content: Content<'de>) -> Self {$/;"	P	implementation:content::ContentDeserializer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub fn new(name: &'static str) -> Self {$/;"	P	implementation:content::TaggedContentVisitor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::UntaggedUnitVisitor
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub fn new(variant: Content<'de>, value: Option<Content<'de>>) -> EnumDeserializer<'de, /;"	f	module:content
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatMapAccess
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatStructAccess
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        pub fn new() -> Self {$/;"	P	implementation:content::ContentSerializer
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeStructVariantAsMapValue
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeTupleVariantAsMapValue
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn new(map: &'a mut M, name: &'static str) -> FlatMapSerializeStructVariantAsMapValue<'a, M>/;"	f
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Ctxt
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn new(bytes: &'a [u8]) -> Slice<'a> {$/;"	P	implementation:no_panic::Slice
new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn new(input: Input<'a>) -> Reader<'a> {$/;"	P	implementation:Reader
new	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub fn new(peer_key: &CoseKey) -> FidoResult<Self> {$/;"	P	implementation:SharedSecret
new	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn new(device: &hid::DeviceInfo) -> error::FidoResult<Self> {$/;"	P	implementation:FidoDevice
newRR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn newRR(m: &PartialModulus<M>) -> One<M, RR> {$/;"	P	implementation:One
new_and_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn new_and_fill(dest: &mut [u8]) -> Result<Self, Error> {$/;"	P	implementation:Jitter
new_and_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn new_and_fill(dest: &mut [u8]) -> Result<Self, Error> {$/;"	P	implementation:NoSource
new_and_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn new_and_fill(dest: &mut [u8]) -> Result<Self, Error> {$/;"	P	implementation:Os
new_and_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn new_and_fill(dest: &mut [u8]) -> Result<Self, Error>$/;"	P	interface:EntropySource
new_at_infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    pub fn new_at_infinity() -> Self {$/;"	P	implementation:ExtPoint
new_at_infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    pub fn new_at_infinity() -> Self {$/;"	P	implementation:Point
new_at_infinity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn new_at_infinity() -> Point {$/;"	P	implementation:Point
new_from_owned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new_from_owned(code: Vec<u8>) -> MacResult {$/;"	P	implementation:MacResult
new_from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new_from_u64(seed: u64) -> Self {$/;"	P	implementation:Isaac64Rng
new_from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new_from_u64(seed: u64) -> Self {$/;"	P	implementation:IsaacRng
new_inclusive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^            fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self$/;"	P	implementation:tests::test_custom_uniform::UniformMyF32
new_inclusive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self$/;"	P	interface:UniformSampler
new_inclusive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn new_inclusive<B1, B2>(low_b: B1, high_b: B2) -> Self$/;"	P	implementation:UniformDuration
new_inclusive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    pub fn new_inclusive<B1, B2>(low: B1, high: B2) -> Uniform<X>$/;"	P	implementation:Uniform
new_keyed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2b {$/;"	P	implementation:Blake2b
new_keyed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2s {$/;"	P	implementation:Blake2s
new_pin_enc	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub new_pin_enc: Option<Vec<u8>>,$/;"	m	struct:ClientPinRequest
new_raw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn new_raw(shape: f64, scale: f64) -> GammaLargeShape {$/;"	P	implementation:GammaLargeShape
new_raw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn new_raw(shape: f64, scale: f64) -> GammaSmallShape {$/;"	P	implementation:GammaSmallShape
new_unseeded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn new_unseeded() -> Fortuna {$/;"	P	implementation:Fortuna
new_utf8_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^pub fn new_utf8_error(field: usize, valid_up_to: usize) -> Utf8Error {$/;"	f
new_with_history	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new_with_history($/;"	P	implementation:BlockEngine
new_with_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new_with_len<'a>(buff: Vec<u8>, len: usize) -> OwnedReadBuffer {$/;"	P	implementation:OwnedReadBuffer
new_with_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    pub fn new_with_param(alpha: f64, size: usize) -> Dirichlet {$/;"	P	implementation:Dirichlet
new_with_timer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn new_with_timer(timer: fn() -> u64) -> JitterRng {$/;"	P	implementation:JitterRng
new_xchacha20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new_xchacha20(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	P	implementation:ChaCha20
new_xsalsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new_xsalsa20(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	P	implementation:Salsa20
newpos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn newpos(byte: u64, line: u64, record: u64) -> Position {$/;"	f	module:tests
newtype_inner	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^fn newtype_inner(data: &syn::Data) -> Option<syn::Type> {$/;"	f
newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn newtype_variant<T>(self) -> Result<T, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn newtype_variant_seed<U: DeserializeSeed<'de>>($/;"	P	implementation:DeRecordWrap
newtype_variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn newtype_variant_seed<T>(mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:private
newtype_variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:private
newtype_variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, E>$/;"	f	module:content
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn next(&mut self) -> Option<DecodeResult<String>> {$/;"	P	implementation:TextIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn next(&mut self) -> Option<DecodeResult<Vec<u8>>> {$/;"	P	implementation:BytesIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn next(&mut self) -> Option<&'r [u8]> {$/;"	P	implementation:ByteRecordIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn next(&mut self) -> Option<Result<ByteRecord>> {$/;"	P	implementation:ByteRecordsIntoIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn next(&mut self) -> Option<Result<ByteRecord>> {$/;"	P	implementation:ByteRecordsIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn next(&mut self) -> Option<Result<D>> {$/;"	P	implementation:DeserializeRecordsIntoIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn next(&mut self) -> Option<Result<D>> {$/;"	P	implementation:DeserializeRecordsIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn next(&mut self) -> Option<Result<StringRecord>> {$/;"	P	implementation:StringRecordsIntoIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn next(&mut self) -> Option<Result<StringRecord>> {$/;"	P	implementation:StringRecordsIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn next(&mut self) -> Option<&'r str> {$/;"	P	implementation:StringRecordIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:FieldIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn next(&mut self) -> Option<&'f dyn Fail> {$/;"	P	implementation:Causes
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:BytesToHexChars
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    next: Option<char>,$/;"	m	struct:BytesToHexChars
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub next: *mut HidDeviceInfo,$/;"	m	struct:HidDeviceInfo
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn next(&mut self) -> Option<T> {$/;"	f
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:IndexVecIntoIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn next(&mut self) -> Option<usize> {$/;"	P	implementation:IndexVecIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:test::ChunkHintedIterator
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:test::UnhintedIterator
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:test::WindowHintedIterator
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:SliceChooseIter
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn next<'s>(&'s mut self, len: usize) -> &'s mut [u8];$/;"	P	interface:FixedBuffer
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        fn next(&mut self) -> Option<Fe> {$/;"	P	implementation:tests::CurveGen
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Hc128
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Rc4
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Sosemanuk
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn next(&mut self) -> Option<T> {$/;"	f
next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    next: T,$/;"	m	struct:StepUp
next_back	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn next_back(&mut self) -> Option<&'r [u8]> {$/;"	P	implementation:ByteRecordIter
next_back	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn next_back(&mut self) -> Option<&'r str> {$/;"	P	implementation:StringRecordIter
next_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	P	interface:SeqAccess
next_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	f
next_element_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_element_seed<U: DeserializeSeed<'de>>($/;"	P	implementation:DeRecordWrap
next_element_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	P	interface:SeqAccess
next_element_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn next_element_seed<V>(&mut self, seed: V) -> Result<Option<V::Value>, Self::Error>$/;"	f
next_element_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_entry	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	P	interface:MapAccess
next_entry	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	f
next_entry_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	P	interface:MapAccess
next_entry_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	f
next_entry_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn next_entry_seed<TK, TV>($/;"	f
next_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field(&mut self) -> Result<&'r str, DeserializeError> {$/;"	P	implementation:DeByteRecord
next_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field(&mut self) -> Result<&'r str, DeserializeError> {$/;"	P	implementation:DeRecordWrap
next_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field(&mut self) -> Result<&'r str, DeserializeError> {$/;"	P	implementation:DeStringRecord
next_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field(&mut self) -> Result<&'r str, DeserializeError>;$/;"	P	interface:DeRecord
next_field_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field_bytes(&mut self) -> Result<&'r [u8], DeserializeError> {$/;"	P	implementation:DeByteRecord
next_field_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field_bytes(&mut self) -> Result<&'r [u8], DeserializeError> {$/;"	P	implementation:DeRecordWrap
next_field_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field_bytes(&mut self) -> Result<&'r [u8], DeserializeError> {$/;"	P	implementation:DeStringRecord
next_field_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_field_bytes(&mut self) -> Result<&'r [u8], DeserializeError>;$/;"	P	interface:DeRecord
next_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header(&mut self) -> Result<Option<&'r str>, DeserializeError> {$/;"	P	implementation:DeByteRecord
next_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header(&mut self) -> Result<Option<&'r str>, DeserializeError> {$/;"	P	implementation:DeRecordWrap
next_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header(&mut self) -> Result<Option<&'r str>, DeserializeError> {$/;"	P	implementation:DeStringRecord
next_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header(&mut self) -> Result<Option<&'r str>, DeserializeError>;$/;"	P	interface:DeRecord
next_header_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header_bytes($/;"	P	implementation:DeByteRecord
next_header_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header_bytes($/;"	P	implementation:DeRecordWrap
next_header_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header_bytes($/;"	P	implementation:DeStringRecord
next_header_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_header_bytes($/;"	P	interface:DeRecord
next_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	P	interface:MapAccess
next_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	f
next_key_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_key_seed<K: DeserializeSeed<'de>>($/;"	P	implementation:DeRecordWrap
next_key_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	P	interface:MapAccess
next_key_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	f
next_key_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_key_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_key_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_pair	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn next_pair(&mut self) -> Option<(First<I::Item>, Second<I::Item>)> {$/;"	f
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:ChaChaRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:EntropyRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:Hc128Rng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:Isaac64Rng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:IsaacRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:JitterRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:OsRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:ReadRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:StdRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:ThreadRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:XorShiftRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	f
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^        fn next_u32(&mut self) -> u32 {$/;"	P	implementation:test::TestRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:ReadRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	f
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:EntropyRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:StepRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:SmallRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:StdRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:ThreadRng
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	f
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:Box
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:R
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn next_u32(&mut self) -> u32;$/;"	P	interface:RngCore
next_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:Fortuna
next_u32_via_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^pub fn next_u32_via_fill<R: RngCore + ?Sized>(rng: &mut R) -> u32 {$/;"	f
next_u32_wrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^fn next_u32_wrap(buf: &[u8], offset: &mut usize) -> u32 {$/;"	f
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:ChaChaRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:EntropyRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:Hc128Rng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:Isaac64Rng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:IsaacRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:JitterRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:OsRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:ReadRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:StdRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:ThreadRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:XorShiftRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	f
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^        fn next_u64(&mut self) -> u64 {$/;"	P	implementation:test::TestRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:ReadRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	f
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:EntropyRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:StepRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:SmallRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:StdRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:ThreadRng
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	f
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:Box
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn next_u64(&mut self) -> u64 {$/;"	P	implementation:R
next_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn next_u64(&mut self) -> u64;$/;"	P	interface:RngCore
next_u64_via_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^pub fn next_u64_via_fill<R: RngCore + ?Sized>(rng: &mut R) -> u64 {$/;"	f
next_u64_via_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs	/^pub fn next_u64_via_u32<R: RngCore + ?Sized>(rng: &mut R) -> u64 {$/;"	f
next_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	P	interface:MapAccess
next_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	f
next_value_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn next_value_seed<K: DeserializeSeed<'de>>($/;"	P	implementation:DeRecordWrap
next_value_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	P	interface:MapAccess
next_value_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	f
next_value_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
next_value_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:content
next_value_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
nfa	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn nfa(&mut self, yes: bool) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
no_chars	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn no_chars() {$/;"	f	module:tests
no_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn no_fields() {$/;"	f	module:tests
no_headers_on_empty_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn no_headers_on_empty_data() {$/;"	f	module:tests
no_headers_on_empty_data_after_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn no_headers_on_empty_data_after_headers() {$/;"	f	module:tests
no_panic	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^mod no_panic {$/;"	n
no_std	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    no_std: Flag,$/;"	m	struct:Options
node_depth	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    node_depth: u8,$/;"	m	struct:Blake2bParam
node_depth	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    node_depth: u8,$/;"	m	struct:Blake2sParam
node_offset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    node_offset: u64,$/;"	m	struct:Blake2bParam
node_offset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    node_offset: [u8; 6],$/;"	m	struct:Blake2sParam
nonce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    nonce: [u32; 4],$/;"	m	struct:SigningContext
nonce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            nonce: [u8; 12],$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
nonce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            nonce: [u8; 8],$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
nonce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    nonce: [u8; 8],$/;"	m	struct:test::TestVector
nonce_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    pub fn nonce_len(&self) -> usize { NONCE_LEN }$/;"	P	implementation:Algorithm
none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    pub(super) fn none() -> InternalBacktrace {$/;"	P	implementation:InternalBacktrace
none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn none(self) -> bool { !self }$/;"	P	implementation:bool
none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn none(self) -> bool;$/;"	P	interface:BoolAsSIMD
none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:Attr
none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:BoolAttr
none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:VecAttr
nonnegative_integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^fn nonnegative_integer<'a>($/;"	f
nonzero_integers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! nonzero_integers {$/;"	M
nonzero_integers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! nonzero_integers {$/;"	M
nop_reserve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^fn nop_reserve<T>(_seq: T, _n: usize) {}$/;"	f
norm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    norm: Normal$/;"	m	struct:LogNormal
norm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^    fn norm() {$/;"	f	module:tests
norm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^    fn norm() {$/;"	f	module:tests
normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod normal;$/;"	n
not	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn not(self) -> u32x4 {$/;"	P	implementation:u32x4
null	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn null(&mut self) -> EncodeResult {$/;"	P	implementation:Encoder
num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            num: f64,$/;"	m	struct:tests::struct_headers_inside_nested_tuple_seq::Foo
num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            num: f64,$/;"	m	struct:tests::struct_headers_inside_seq::Foo
num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            num: f64,$/;"	m	struct:tests::struct_headers_inside_tuple::Foo
num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            num: f64,$/;"	m	struct:tests::struct_headers_inside_tuple_scalar_after::Foo
num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            num: f64,$/;"	m	struct:tests::struct_headers_inside_tuple_scalar_before::Foo
num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn num(input: TokenStream) -> TokenStream {$/;"	f
num_cast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn num_cast(input: TokenStream) -> TokenStream {$/;"	f
num_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub num_limbs: usize,$/;"	m	struct:CommonOps
num_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    num_limbs: usize,$/;"	m	struct:Width
num_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn num_ops(input: TokenStream) -> TokenStream {$/;"	f
num_pending	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    num_pending: usize,$/;"	m	struct:Context
numer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    numer: ChiSquared,$/;"	m	struct:FisherF
o_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    o_key: Vec<u8>,$/;"	m	struct:Hmac
object	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn object() {$/;"	f	module:tests
object	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn object(&mut self) -> DecodeResult<usize> {$/;"	P	implementation:Decoder
object	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn object() {$/;"	f	module:tests
object	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn object(&mut self, len: usize) -> EncodeResult {$/;"	P	implementation:Encoder
object_begin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn object_begin(&mut self) -> DecodeResult<()> {$/;"	P	implementation:Decoder
object_begin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn object_begin(&mut self) -> EncodeResult {$/;"	P	implementation:Encoder
object_end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn object_end(&mut self) -> EncodeResult {$/;"	P	implementation:Encoder
object_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn object_value() {$/;"	f	module:tests
of	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    pub fn of(x: u64) -> Tag {$/;"	P	implementation:Tag
of	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    fn of(v: Option<&'r Value>) -> Cursor<'r> {$/;"	P	implementation:Cursor
offset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    offset: u32,$/;"	m	struct:UniformDuration
offset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    offset : usize,$/;"	m	struct:ChaCha20
offset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    offset: usize,$/;"	m	struct:Salsa20
offset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    offset: usize  \/\/ Enqueued bytes in state for absorb phase$/;"	m	struct:Sha3
offset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    offset: u32$/;"	m	struct:Sosemanuk
ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    ok: PhantomData<Ok>,$/;"	m	struct:Impossible
okm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        okm: Vec<u8>,$/;"	m	struct:test::TestVector
one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn one(input: TokenStream) -> TokenStream {$/;"	f
one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn one() -> Self {$/;"	f
one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn one() -> Self;$/;"	P	interface:One
one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^pub fn one<T: One>() -> T {$/;"	f
one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn one(&self) -> Elem<M, Unencoded> {$/;"	P	implementation:Modulus
oneRR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    oneRR: One<M, RR>,$/;"	m	struct:Modulus
oneRR	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn oneRR(&self) -> &One<M, RR> { &self.oneRR }$/;"	P	implementation:Modulus
oneRR_mod_n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub oneRR_mod_n: Scalar<RR>, \/\/ 1 * R**2 (mod n). TOOD: Use One<RR>.$/;"	m	struct:PrivateScalarOps
one_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn one_byte_record() {$/;"	f	module:tests
one_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn one_char() {$/;"	f	module:tests
one_empty_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn one_empty_record() {$/;"	f	module:tests
one_err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn one_err() {$/;"	f	module:tests
one_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn one_field() {$/;"	f	module:tests
one_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^macro_rules! one_impl {$/;"	M
one_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn one_ok() {$/;"	f	module:tests
one_panics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn one_panics() {$/;"	f	module:tests
one_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn one_record() {$/;"	f	module:tests
one_string_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn one_string_record() {$/;"	f	module:tests
op_f	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_g	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_h	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
opaque	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    opaque: Opaque,$/;"	m	struct:SigningContext
open	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn open(&self, vid: u16, pid: u16) -> HidResult<HidDevice> {$/;"	P	implementation:HidApi
open	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    open: fn(ctx: &[u64; KEY_CTX_BUF_ELEMS], nonce: &[u8; NONCE_LEN],$/;"	m	struct:Algorithm
open_device	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn open_device(&self, hidapi: &HidApi) -> HidResult<HidDevice> {$/;"	P	implementation:DeviceInfo
open_device	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn open_device(&self, hidapi: &HidApi) -> HidResult<HidDevice> {$/;"	P	implementation:HidDeviceInfo
open_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^pub fn open_in_place<'a>(key: &OpeningKey, nonce: &[u8], ad: &[u8],$/;"	f
open_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn open_path(&self, device_path: &CStr) -> HidResult<HidDevice> {$/;"	P	implementation:HidApi
open_serial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn open_serial(&self, vid: u16, pid: u16, sn: &str) -> HidResult<HidDevice> {$/;"	P	implementation:HidApi
openwall_test_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn openwall_test_vectors() -> Vec<Test> {$/;"	f	module:test
ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod ops;$/;"	n
ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/mod.rs	/^mod ops;$/;"	n
ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^        &'static ops::CommonOps,$/;"	v	module:tests
ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    ops: &'static PublicScalarOps,$/;"	m	struct:Algorithm
ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^mod ops;$/;"	n
opt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub fn opt<A>(r: DecodeResult<A>) -> DecodeResult<Option<A>> {$/;"	f
opt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn opt(&self) -> Option<Cursor<'r>> {$/;"	P	implementation:Cursor
option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn option() {$/;"	f	module:tests
option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn option() {$/;"	f	module:tests
option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn option() {$/;"	f	module:tests
option_empty_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn option_empty_field() {$/;"	f	module:tests
option_invalid_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn option_invalid_field() {$/;"	f	module:tests
options	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/lib.rs	/^mod options;$/;"	n
options	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub options: Option<AuthenticatorOptions>,$/;"	m	struct:GetAssertionRequest
options	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub options: Option<AuthenticatorOptions>,$/;"	m	struct:MakeCredentialRequest
options	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub options: OptionsInfo,$/;"	m	struct:GetInfoResponse
optry	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^    macro_rules! optry {$/;"	M	function:checked_pow
or_break	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^pub fn or_break<A>(r: DecodeResult<A>) -> DecodeResult<Option<A>> {$/;"	f
original	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub original: &'a syn::DeriveInput,$/;"	m	struct:Container
original	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub original: &'a syn::Field,$/;"	m	struct:Field
original	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub original: &'a syn::Variant,$/;"	m	struct:Variant
os	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod os {$/;"	n
other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^mod other;$/;"	n
other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    other: bool,$/;"	m	struct:Variant
other	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn other(&self) -> bool {$/;"	P	implementation:Variant
out	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            out:   [u8; 32],$/;"	m	struct:test::test_bcrypt_hash::Test
out	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            out: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
out_hist	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_hist: Vec<u8>,$/;"	m	struct:BlockEngine
out_read_scratch	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_read_scratch: Option<OwnedReadBuffer>,$/;"	m	struct:BlockEngine
out_write_scratch	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_write_scratch: Option<OwnedWriteBuffer>,$/;"	m	struct:BlockEngine
outer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    outer: digest::Context,$/;"	m	struct:SigningContext
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        output: Vec<u8>$/;"	m	struct:test::Test
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        output: Vec<u8>,$/;"	m	struct:digest_tests::Test
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        output: Vec<u8>,$/;"	m	struct:digest_tests::Test
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    output : [u8; 64],$/;"	m	struct:ChaCha20
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    output: [u8; 4],$/;"	m	struct:Hc128
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        output: Vec<u8>$/;"	m	struct:test::Test
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        output: Vec<u8>,$/;"	m	struct:tests::Test
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    output: [u8; 64],$/;"	m	struct:Salsa20
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        output: Vec<u8>,$/;"	m	struct:tests::Test
output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    output: [u8; 80],$/;"	m	struct:Sosemanuk
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	P	implementation:Blake2b
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	P	implementation:Blake2s
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bits(&self) -> usize;$/;"	P	interface:Digest
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn output_bits(&self) -> usize { 128 }$/;"	P	implementation:Md5
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	P	implementation:Ripemd160
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	P	implementation:Sha1
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 224 }$/;"	P	implementation:Sha224
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 224 }$/;"	P	implementation:Sha512Trunc224
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 256 }$/;"	P	implementation:Sha256
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 256 }$/;"	P	implementation:Sha512Trunc256
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 384 }$/;"	P	implementation:Sha384
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 512 }$/;"	P	implementation:Sha512
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn output_bits(&self) -> usize {$/;"	P	implementation:Sha3
output_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn output_bits(&self) -> usize {$/;"	P	implementation:Whirlpool
output_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	P	implementation:Blake2b
output_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	P	implementation:Blake2s
output_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bytes(&self) -> usize {$/;"	P	interface:Digest
output_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	P	implementation:Ghash
output_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn output_bytes(&self) -> usize { self.digest.output_bytes() }$/;"	P	implementation:Hmac
output_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn output_bytes(&self) -> usize;$/;"	P	interface:Mac
output_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	P	implementation:Poly1305
output_index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    output_index: usize$/;"	m	struct:Hc128
output_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub output_len: usize,$/;"	m	struct:Algorithm
output_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
overflowing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs	/^pub mod overflowing;$/;"	n
overflowing_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^    fn overflowing_add(&self, v: &Self) -> (Self, bool);$/;"	P	interface:OverflowingAdd
overflowing_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^    fn overflowing_add<T: OverflowingAdd>(a: T, b: T) -> (T, bool) {$/;"	f	function:test_overflowing_traits
overflowing_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^macro_rules! overflowing_impl {$/;"	M
overflowing_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^    fn overflowing_mul(&self, v: &Self) -> (Self, bool);$/;"	P	interface:OverflowingMul
overflowing_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^    fn overflowing_mul<T: OverflowingMul>(a: T, b: T) -> (T, bool) {$/;"	f	function:test_overflowing_traits
overflowing_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^    fn overflowing_sub(&self, v: &Self) -> (Self, bool);$/;"	P	interface:OverflowingSub
overflowing_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^    fn overflowing_sub<T: OverflowingSub>(a: T, b: T) -> (T, bool) {$/;"	f	function:test_overflowing_traits
p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    p: f64,$/;"	m	struct:Binomial
p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    p: [Limb; MAX_LIMBS],$/;"	m	struct:Modulus
p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    p: PrivatePrime<P>,$/;"	m	struct:KeyPair
p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    p: [u32; 18]$/;"	m	struct:Blowfish
p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    p: [u32; 512],$/;"	m	struct:Hc128
p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        p: u32,$/;"	m	struct:test::Test
p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    p: u32$/;"	m	struct:ScryptParams
p256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub mod p256;$/;"	n
p256_elem_add_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_elem_add_test() {$/;"	f	module:tests
p256_elem_inv_squared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^fn p256_elem_inv_squared(a: &Elem<R>) -> Elem<R> {$/;"	f
p256_elem_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_elem_mul_test() {$/;"	f	module:tests
p256_elem_neg_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_elem_neg_test() {$/;"	f	module:tests
p256_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^macro_rules! p256_limbs {$/;"	M
p256_point_double_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_point_double_test() {$/;"	f	module:tests
p256_point_mul_base_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^fn p256_point_mul_base_impl(g_scalar: &Scalar) -> Point {$/;"	f
p256_point_mul_base_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_point_mul_base_test() {$/;"	f	module:tests
p256_point_mul_serialized_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_point_mul_serialized_test() {$/;"	f	module:tests
p256_point_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_point_mul_test() {$/;"	f	module:tests
p256_point_sum_mixed_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_point_sum_mixed_test() {$/;"	f	module:tests
p256_point_sum_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_point_sum_test() {$/;"	f	module:tests
p256_q_minus_n_plus_n_equals_0_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_q_minus_n_plus_n_equals_0_test() {$/;"	f	module:tests
p256_scalar_inv_to_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^fn p256_scalar_inv_to_mont(a: &Scalar<Unencoded>) -> Scalar<R> {$/;"	f
p256_scalar_inv_to_mont_zero_panic_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_scalar_inv_to_mont_zero_panic_test() {$/;"	f	module:tests
p256_scalar_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_scalar_mul_test() {$/;"	f	module:tests
p256_scalar_square_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p256_scalar_square_test() {$/;"	f	module:tests
p384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub mod p384;$/;"	n
p384_elem_add_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_elem_add_test() {$/;"	f	module:tests
p384_elem_div_by_2_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_elem_div_by_2_test() {$/;"	f	module:tests
p384_elem_inv_squared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^fn p384_elem_inv_squared(a: &Elem<R>) -> Elem<R> {$/;"	f
p384_elem_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_elem_mul_test() {$/;"	f	module:tests
p384_elem_neg_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_elem_neg_test() {$/;"	f	module:tests
p384_elem_sub_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_elem_sub_test() {$/;"	f	module:tests
p384_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^macro_rules! p384_limbs {$/;"	M
p384_point_double_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_point_double_test() {$/;"	f	module:tests
p384_point_mul_base_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^fn p384_point_mul_base_impl(a: &Scalar) -> Point {$/;"	f
p384_point_mul_base_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_point_mul_base_test() {$/;"	f	module:tests
p384_point_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_point_mul_test() {$/;"	f	module:tests
p384_point_sum_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_point_sum_test() {$/;"	f	module:tests
p384_q_minus_n_plus_n_equals_0_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_q_minus_n_plus_n_equals_0_test() {$/;"	f	module:tests
p384_scalar_inv_to_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^fn p384_scalar_inv_to_mont(a: &Scalar<Unencoded>) -> Scalar<R> {$/;"	f
p384_scalar_inv_to_mont_zero_panic_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_scalar_inv_to_mont_zero_panic_test() {$/;"	f	module:tests
p384_scalar_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn p384_scalar_mul_test() {$/;"	f	module:tests
p_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^    p_int: u64,$/;"	m	struct:Bernoulli
pack_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^fn pack_size(n: u64) -> usize {$/;"	f
pack_size128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^fn pack_size128(n: u128) -> usize {$/;"	f
packet	/home/pme/src/rust/ctap/src/lib.rs	/^mod packet;$/;"	n
packet_size	/home/pme/src/rust/ctap/src/lib.rs	/^    packet_size: u16,$/;"	m	struct:FidoCancelHandle
packet_size	/home/pme/src/rust/ctap/src/lib.rs	/^    packet_size: u16,$/;"	m	struct:FidoDevice
pad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pad       : [u32; 4],$/;"	m	struct:Poly1305
pad_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, _: &mut W) { }$/;"	P	implementation:DecPadding
pad_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, _: &mut W) { }$/;"	P	implementation:NoPadding
pad_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, a: &mut W) { self.padding.pad_input(a); }$/;"	P	implementation:EncPadding
pad_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W) {$/;"	P	implementation:PkcsPadding
pad_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W);$/;"	P	interface:PaddingProcessor
pad_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn pad_len(ds_len: usize, offset: usize, rate: usize) -> usize {$/;"	f	method:Sha3::finalize
padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^mod padding;$/;"	n
padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X$/;"	m	struct:DecPadding
padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X$/;"	m	struct:EncPadding
padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X,$/;"	m	struct:BlockEngine
padding_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^    padding_alg: &'static padding::RSAVerification,$/;"	m	struct:RSAParameters
panic_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn panic_one(test_to_fail: usize) {$/;"	f	module:tests
panicked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    panicked: bool,$/;"	m	struct:WriterState
param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    param: Blake2bParam$/;"	m	struct:Blake2b
param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    param: Blake2sParam$/;"	m	struct:Blake2s
parameters	/home/pme/src/rust/ctap/src/cbor.rs	/^    parameters: HashMap<i16, Value>,$/;"	m	struct:CoseKey
parent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    parent: &'a Options,$/;"	m	struct:FieldWithDefaults
parent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    parent: &'a mut OwnedReadBuffer,$/;"	m	struct:BorrowedWriteBuffer
pareto	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod pareto;$/;"	n
parity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/sha1.rs	/^fn parity(x: W32, y: W32, z: W32) -> W32 { x ^ y ^ z }$/;"	f
parse	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^        fn parse(input: ParseStream) -> parse::Result<Self> {$/;"	P	implementation:parse_lit_into_lifetimes::BorrowedLifetimes
parse_big_endian_and_pad_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn parse_big_endian_and_pad_consttime($/;"	f
parse_big_endian_fixed_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^fn parse_big_endian_fixed_consttime<M>($/;"	f
parse_big_endian_in_range_and_pad_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn parse_big_endian_in_range_and_pad_consttime($/;"	f
parse_big_endian_in_range_partially_reduced_and_pad_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^pub fn parse_big_endian_in_range_partially_reduced_and_pad_consttime($/;"	f
parse_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/mod.rs	/^    pub fn parse_block(&self, no_std: bool) -> Block {$/;"	P	implementation:DefaultExpression
parse_ip_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! parse_ip_impl {$/;"	M
parse_lit_into_expr_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn parse_lit_into_expr_path($/;"	f
parse_lit_into_lifetimes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn parse_lit_into_lifetimes($/;"	f
parse_lit_into_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn parse_lit_into_path(cx: &Ctxt, attr_name: Symbol, lit: &syn::Lit) -> Result<syn::Path, ()> {$/;"	f
parse_lit_into_ty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn parse_lit_into_ty(cx: &Ctxt, attr_name: Symbol, lit: &syn::Lit) -> Result<syn::Type, ()> {$/;"	f
parse_lit_into_where	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn parse_lit_into_where($/;"	f
parse_lit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn parse_lit_str<T>(s: &syn::LitStr) -> parse::Result<T>$/;"	f
parse_public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^fn parse_public_key($/;"	f
parse_socket_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! parse_socket_impl {$/;"	M
parse_test_case	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^fn parse_test_case(current_section: &mut String, lines: &mut FileLines) -> Option<TestCase> {$/;"	f
parse_uncompressed_point	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/public_key.rs	/^pub fn parse_uncompressed_point($/;"	f
parse_uncompressed_point_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/public_key.rs	/^    fn parse_uncompressed_point_test() {$/;"	f	module:tests
partial_shuffle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn partial_shuffle<R>(&mut self, rng: &mut R, amount: usize)$/;"	P	implementation:T
partial_shuffle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn partial_shuffle<R>(&mut self, rng: &mut R, amount: usize)$/;"	P	interface:SliceRandom
partially_invalid_utf8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn partially_invalid_utf8() {$/;"	f	module:tests
password	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            password: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
password	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        password: Vec<u8>,$/;"	m	struct:test::Test
password	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        password: &'static str,$/;"	m	struct:test::Test
path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub path: *mut c_char,$/;"	m	struct:HidDeviceInfo
path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    path: CString,$/;"	m	struct:DeviceInfo
path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn path(&self) -> &CStr {$/;"	P	implementation:DeviceInfo
path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub path: CString,$/;"	m	struct:HidDeviceInfo
path	/home/pme/src/rust/ctap/src/hid_common.rs	/^    pub path: PathBuf,$/;"	m	struct:DeviceInfo
path_to_device	/home/pme/src/rust/ctap/src/hid_linux.rs	/^fn path_to_device(path: &PathBuf) -> io::Result<DeviceInfo> {$/;"	f
path_to_device	/home/pme/src/rust/ctap/src/hid_macwin.rs	/^fn path_to_device(path: &PathBuf) -> io::Result<DeviceInfo> {$/;"	f
pattern	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pattern: BuilderPattern,$/;"	m	struct:Options
pattern	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pattern: Option<BuilderPattern>,$/;"	m	struct:Field
pattern	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn pattern(&self) -> BuilderPattern {$/;"	P	implementation:FieldWithDefaults
payload	/home/pme/src/rust/ctap/src/packet.rs	/^    pub payload: Vec<u8>,$/;"	m	struct:ContPacket
payload	/home/pme/src/rust/ctap/src/packet.rs	/^    pub payload: Vec<u8>,$/;"	m	struct:InitPacket
pb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u16, bit: u32, shift: u32) -> u32 {$/;"	f	function:un_bit_slice_4x4_with_u16
pb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u32, bit: u32, shift: u32) -> u16 {$/;"	f	function:bit_slice_4x4_with_u16
pbkdf2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod pbkdf2;$/;"	n
pbkdf2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod pbkdf2;$/;"	n
pbkdf2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2<M: Mac>(mac: &mut M, salt: &[u8], c: u32, output: &mut [u8]) {$/;"	f
pbkdf2_check	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
pbkdf2_simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_simple(password: &str, c: u32) -> io::Result<String> {$/;"	f
pdf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^        fn pdf(x: f64) -> f64 {$/;"	f	method:Exp1::sample
pdf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^        fn pdf(x: f64) -> f64 {$/;"	f	method:StandardNormal::sample
peek	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn peek(&self, b: u8) -> bool {$/;"	P	implementation:Reader
peek_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn peek_field(&mut self) -> Option<&'r [u8]> {$/;"	P	implementation:DeByteRecord
peek_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn peek_field(&mut self) -> Option<&'r [u8]> {$/;"	P	implementation:DeRecordWrap
peek_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn peek_field(&mut self) -> Option<&'r [u8]> {$/;"	P	implementation:DeStringRecord
peek_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn peek_field(&mut self) -> Option<&'r [u8]>;$/;"	P	interface:DeRecord
peek_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8] { &self.buff[self.pos..count] }$/;"	P	implementation:OwnedReadBuffer
peek_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8] { &self.buff[self.pos..count] }$/;"	P	implementation:RefReadBuffer
peek_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8];$/;"	P	interface:ReadBuffer
peek_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:BorrowedWriteBuffer
peek_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:RefWriteBuffer
peek_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer;$/;"	P	interface:WriteBuffer
peek_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	P	implementation:OwnedWriteBuffer
peek_remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_remaining(&self) -> &[u8] {$/;"	P	interface:ReadBuffer
pending	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pending: [u8; MAX_BLOCK_LEN],$/;"	m	struct:Context
pending	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pending: Option<&'a Content<'de>>,$/;"	m	struct:FlatInternallyTaggedAccess
pending_content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pending_content: Option<&'a Content<'de>>,$/;"	m	struct:FlatMapAccess
pending_content	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    pending_content: Option<Content<'de>>,$/;"	m	struct:FlatStructAccess
personal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    personal: [u8; BLAKE2B_PERSONALBYTES],$/;"	m	struct:Blake2bParam
personal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    personal: [u8; BLAKE2S_PERSONALBYTES],$/;"	m	struct:Blake2sParam
phantom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    phantom: ::core::marker::PhantomData<T>,$/;"	m	struct:DistIter
phantom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        pub phantom: PhantomData<Idx>,$/;"	m	struct:range::RangeVisitor
pin_auth	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_auth: Option<[u8; 16]>,$/;"	m	struct:ClientPinRequest
pin_auth	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_auth: Option<[u8; 16]>,$/;"	m	struct:GetAssertionRequest
pin_auth	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_auth: Option<[u8; 16]>,$/;"	m	struct:MakeCredentialRequest
pin_hash_enc	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_hash_enc: Option<[u8; 16]>,$/;"	m	struct:ClientPinRequest
pin_protocol	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_protocol: Option<u8>,$/;"	m	struct:GetAssertionRequest
pin_protocol	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_protocol: Option<u8>,$/;"	m	struct:MakeCredentialRequest
pin_protocol	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_protocol: u8,$/;"	m	struct:ClientPinRequest
pin_protocols	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_protocols: Vec<u8>,$/;"	m	struct:GetInfoResponse
pin_token	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pin_token: Option<[u8; 16]>,$/;"	m	struct:ClientPinResponse
pin_token	/home/pme/src/rust/ctap/src/lib.rs	/^    pin_token: Option<crypto::PinToken>,$/;"	m	struct:FidoDevice
pkcs1_digestinfo_prefix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^macro_rules! pkcs1_digestinfo_prefix {$/;"	M
pkcs1_encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^fn pkcs1_encode(pkcs1: &PKCS1, m_hash: &digest::Digest, m_out: &mut [u8]) {$/;"	f
pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod pkcs8;$/;"	n
pkcs8_template	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    pkcs8_template: &'static pkcs8::Template,$/;"	m	struct:Algorithm
place_lifetime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn place_lifetime() -> syn::LifetimeDef {$/;"	f
plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CtrTest
plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::TestData
plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CbcTest
plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CtrTest
plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::EcbTest
plain_text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                plain_text: Vec<u8>,$/;"	m	struct:test::TestVector
plain_text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    plain_text: Vec<u8>,$/;"	m	struct:test::TestVector
plaintext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        plaintext: Vec<u8>,$/;"	m	struct:test::Test
plat	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub plat: bool,$/;"	m	struct:OptionsInfo
point_add_jacobian_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    point_add_jacobian_impl: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:CommonOps
point_double_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn point_double_test($/;"	f	module:tests
point_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn point_mul(&self, p_scalar: &Scalar, (p_x, p_y): &(Elem<R>, Elem<R>)) -> Point {$/;"	P	implementation:PrivateKeyOps
point_mul_base	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn point_mul_base(&self, a: &Scalar) -> Point { (self.point_mul_base_impl)(a) }$/;"	P	implementation:PrivateKeyOps
point_mul_base_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    point_mul_base_impl: fn(a: &Scalar) -> Point,$/;"	m	struct:PrivateKeyOps
point_mul_base_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn point_mul_base_tests(ops: &PrivateKeyOps, file_path: &str) {$/;"	f	module:tests
point_mul_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    point_mul_impl: unsafe extern "C" fn($/;"	m	struct:PrivateKeyOps
point_mul_serialized_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn point_mul_serialized_test($/;"	f	module:tests
point_mul_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn point_mul_tests(ops: &PrivateKeyOps, file_path: &str) {$/;"	f	module:tests
point_sum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn point_sum(&self, a: &Point, b: &Point) -> Point {$/;"	P	implementation:CommonOps
point_sum_mixed_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn point_sum_mixed_test($/;"	f	module:tests
point_sum_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn point_sum_test(ops: &PrivateKeyOps, file_path: &str) {$/;"	f	module:tests
point_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn point_x(&self, p: &Point) -> Elem<R> {$/;"	P	implementation:CommonOps
point_y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn point_y(&self, p: &Point) -> Elem<R> {$/;"	P	implementation:CommonOps
point_z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn point_z(&self, p: &Point) -> Elem<R> {$/;"	P	implementation:CommonOps
poisson	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod poisson;$/;"	n
poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod poly1305;$/;"	n
poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod poly1305;$/;"	n
poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn poly1305(key: &[u8], msg: &[u8], mac: &mut [u8]) {$/;"	f	module:test
poly1305_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_10(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_1k(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_64k(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_update_padded_16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305.rs	/^fn poly1305_update_padded_16(ctx: &mut poly1305::SigningContext, data: &[u8]) {$/;"	f
polyfill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod polyfill;$/;"	n
pool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pool: [Pool; NUM_POOLS],$/;"	m	struct:Fortuna
pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pos: Option<Position>,$/;"	m	struct:ByteRecordInner
pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:OwnedReadBuffer
pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:OwnedWriteBuffer
pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:RefReadBuffer
pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:RefWriteBuffer
pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize,$/;"	m	struct:BorrowedWriteBuffer
pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/utf8.rs	/^    pos: usize,$/;"	m	struct:Encode
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn position(&self) -> Option<&Position> {$/;"	P	implementation:ByteRecord
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn position(&self) -> Option<&Position> {$/;"	P	implementation:Error
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn position(&self) -> Option<&Position> {$/;"	P	implementation:ErrorKind
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn position(&self) -> &Position {$/;"	P	implementation:Reader
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn position(&self) -> Option<&Position> {$/;"	P	implementation:StringRecord
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn position(&self) -> usize { self.capacity() - self.remaining() }$/;"	P	interface:ReadBuffer
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn position(&self) -> usize { self.capacity() - self.remaining() }$/;"	P	interface:WriteBuffer
position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn position(&self) -> usize;$/;"	P	interface:FixedBuffer
positions_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn positions_headers() {$/;"	f	module:tests
positions_no_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn positions_no_headers() {$/;"	f	module:tests
positive_integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^pub fn positive_integer<'a>($/;"	f
positive_minimal_width_from_be_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn positive_minimal_width_from_be_bytes($/;"	P	implementation:BoxedLimbs
pow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn pow(self, exp: u32) -> Self;$/;"	P	interface:PrimInt
pow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod pow;$/;"	n
pow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^    fn pow(self, rhs: RHS) -> Self::Output;$/;"	P	interface:Pow
pow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^pub fn pow<T: Clone + One + Mul<T, Output = T>>(mut base: T, mut exp: usize) -> T {$/;"	f
pow25523	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn pow25523(&self) -> Fe {$/;"	P	implementation:Fe
pow_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs	/^macro_rules! pow_impl {$/;"	M
powf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn powf(self, n: Self) -> Self {$/;"	P	implementation:f32
powf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn powf(self, n: Self) -> Self {$/;"	P	implementation:f64
powf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn powf(self, n: Self) -> Self;$/;"	P	interface:Float
powf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn powf(self, n: Self) -> Self;$/;"	P	interface:Real
powi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn powi(mut self, mut exp: i32) -> Self {$/;"	P	interface:FloatCore
powi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn powi(self, n: i32) -> Self;$/;"	P	interface:Float
powi	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn powi(self, n: i32) -> Self;$/;"	P	interface:Real
precondition	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_no_de_lifetime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn precondition_no_de_lifetime(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_sized	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn precondition_sized(cx: &Ctxt, cont: &Container) {$/;"	f
prefix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    prefix: Option<Ident>,$/;"	m	struct:FieldLevelSetter
prefix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    prefix: Option<Ident>,$/;"	m	struct:StructLevelSetter
prelude	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod prelude;$/;"	n
prepare_columnround	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_columnround {$/;"	M
prepare_enum_variant_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn prepare_enum_variant_enum($/;"	f
prepare_rowround	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_rowround {$/;"	M
pretend	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod pretend;$/;"	n
pretend_fields_used	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/pretend.rs	/^fn pretend_fields_used(cont: &Container) -> TokenStream {$/;"	f
pretend_used	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/pretend.rs	/^pub fn pretend_used(cont: &Container) -> TokenStream {$/;"	f
pretend_variants_used	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/pretend.rs	/^fn pretend_variants_used(cont: &Container) -> TokenStream {$/;"	f
prim_int_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^macro_rules! prim_int_impl {$/;"	M
primitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub mod primitive {$/;"	n
primitive_deserializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^macro_rules! primitive_deserializer {$/;"	M
primitive_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! primitive_impl {$/;"	M
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^mod private {$/;"	n
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn private(&self) -> &Flag {$/;"	P	implementation:BuildFn
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn private(&self) -> &Flag {$/;"	P	implementation:Field
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn private(&self) -> &Flag {$/;"	P	implementation:FieldMeta
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn private(&self) -> &Flag {$/;"	P	implementation:Options
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn private(&self) -> &Flag;$/;"	P	interface:FlagVisibility
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    private: Flag,$/;"	m	struct:BuildFn
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    private: Flag,$/;"	m	struct:Field
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    private: Flag,$/;"	m	struct:FieldMeta
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    private: Flag,$/;"	m	struct:Options
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod private {$/;"	n
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^mod private {$/;"	n
private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^pub mod private;$/;"	n
private_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^    private_key: ec::PrivateKey,$/;"	m	struct:EphemeralPrivateKey
private_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub private_key: PrivateKey,$/;"	m	struct:KeyPair
private_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^mod private_key;$/;"	n
private_key_as_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn private_key_as_scalar(ops: &PrivateKeyOps, private_key: &ec::PrivateKey) -> Scalar {$/;"	f
private_key_index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^    pub private_key_index: usize,$/;"	m	struct:Template
private_key_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    private_key_ops: &'static PrivateKeyOps,$/;"	m	struct:Algorithm
private_key_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub private_key_ops: &'static PrivateKeyOps,$/;"	m	struct:PublicScalarOps
private_prefix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    private_prefix: Prefix,$/;"	m	struct:KeyPair
private_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    private_scalar: Scalar,$/;"	m	struct:KeyPair
private_scalar_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    private_scalar_ops: &'static PrivateScalarOps,$/;"	m	struct:Algorithm
prk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        prk: Vec<u8>,$/;"	m	struct:test::TestVector
prng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod prng;$/;"	n
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CtrMode
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CtrModeX8
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process<R: ReadBuffer, W: WriteBuffer>($/;"	P	implementation:BlockEngine
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:ChaCha20
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Hc128
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Rc4
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Salsa20
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Sosemanuk
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Box
process	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]);$/;"	P	interface:SynchronousStreamCipher
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:EcbDecryptorProcessor
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:EcbEncryptorProcessor
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CbcEncryptorProcessor
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CbcDecryptorProcessor
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]/;"	P	interface:BlockProcessor
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn process_block(&mut self, input: &[u8]) {$/;"	P	implementation:Md5State
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! process_block($/;"	M
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn process_block(&mut self, data: &[u8]) {$/;"	P	implementation:Engine256State
process_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn process_block(&mut self, data: &[u8]) {$/;"	P	implementation:Engine512State
process_scratch	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn process_scratch<P: BlockProcessor, X: PaddingProcessor>(me: &mut BlockEngine<P, X>) {$/;"	f	method:BlockEngine::process
processor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    processor: P,$/;"	m	struct:BlockEngine
product_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub product_id: c_ushort,$/;"	m	struct:HidDeviceInfo
product_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    product_id: u16,$/;"	m	struct:DeviceInfo
product_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn product_id(&self) -> u16 {$/;"	P	implementation:DeviceInfo
product_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub product_id: u16,$/;"	m	struct:HidDeviceInfo
product_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub product_string: *mut wchar_t,$/;"	m	struct:HidDeviceInfo
product_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    product_string: WcharString,$/;"	m	struct:DeviceInfo
product_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn product_string(&self) -> Option<&str> {$/;"	P	implementation:DeviceInfo
product_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub product_string: Option<String>,$/;"	m	struct:HidDeviceInfo
product_string_raw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn product_string_raw(&self) -> Option<&[wchar_t]> {$/;"	P	implementation:DeviceInfo
prop1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            prop1: f64,$/;"	m	struct:tests::flatten::Properties
prop2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            prop2: f64,$/;"	m	struct:tests::flatten::Properties
properties	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            properties: Properties,$/;"	m	struct:tests::flatten::Row
ps_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    ps_len: usize,$/;"	m	struct:PSSMetrics
pss_digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^fn pss_digest($/;"	f
pub_key_cred_params	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub pub_key_cred_params: &'a [(&'a str, i32)],$/;"	m	struct:MakeCredentialRequest
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn public(&self) -> &Flag {$/;"	P	implementation:BuildFn
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn public(&self) -> &Flag {$/;"	P	implementation:Field
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn public(&self) -> &Flag {$/;"	P	implementation:FieldMeta
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn public(&self) -> &Flag {$/;"	P	implementation:Options
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    fn public(&self) -> &Flag;$/;"	P	interface:FlagVisibility
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    public: Flag,$/;"	m	struct:BuildFn
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    public: Flag,$/;"	m	struct:Field
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    public: Flag,$/;"	m	struct:FieldMeta
public	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    public: Flag,$/;"	m	struct:Options
public_from_private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    public_from_private:$/;"	m	struct:Curve
public_from_private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn public_from_private($/;"	f
public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    public_key: PublicKey,$/;"	m	struct:KeyPair
public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub public_key: [u8; PUBLIC_KEY_MAX_LEN],$/;"	m	struct:KeyPair
public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^mod public_key;$/;"	n
public_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    public_key: verification::Key,$/;"	m	struct:KeyPair
public_key	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub public_key: CoseKey,$/;"	m	struct:SharedSecret
public_key	/home/pme/src/rust/ctap/src/lib.rs	/^    pub public_key: Option<Vec<u8>>,$/;"	m	struct:FidoCredential
public_key_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    pub fn public_key_bytes(&'a self) -> &'a [u8] { &self.public_key }$/;"	P	implementation:KeyPair
public_key_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/agreement.rs	/^    pub fn public_key_len(&self) -> usize { self.alg.i.curve.public_key_len }$/;"	P	implementation:EphemeralPrivateKey
public_key_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^    pub public_key_len: usize,$/;"	m	struct:Curve
public_key_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub public_key_ops: &'static PublicKeyOps,$/;"	m	struct:PublicScalarOps
public_key_ops_from_curve_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/public_key.rs	/^    fn public_key_ops_from_curve_name(curve_name: &str) -> &'static PublicKeyOps {$/;"	f	module:tests
public_modulus_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    pub fn public_modulus_len(&self) -> usize { self.public_key.modulus_len() }$/;"	P	implementation:KeyPair
push_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn push_field(&mut self, field: &[u8]) {$/;"	P	implementation:ByteRecord
push_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn push_field(&mut self, field: &str) {$/;"	P	implementation:StringRecord
push_to	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn push_to<W: WriteBuffer>(&mut self, output: &mut W) {$/;"	P	interface:ReadBuffer
q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    q: Modulus,$/;"	m	struct:CommonOps
q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    q: PrivatePrime<Q>,$/;"	m	struct:KeyPair
q	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    q: [u32; 512],$/;"	m	struct:Hc128
qInv	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    qInv: bigint::Elem<P, R>,$/;"	m	struct:KeyPair
q_minus_n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub q_minus_n: Elem<Unencoded>,$/;"	m	struct:PublicScalarOps
q_minus_n_plus_n_equals_0_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn q_minus_n_plus_n_equals_0_test(ops: &PublicScalarOps) {$/;"	f	module:tests
q_mod_n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    q_mod_n: bigint::Elem<N, R>,$/;"	m	struct:KeyPair
qc_byte_order	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    macro_rules! qc_byte_order {$/;"	M	module:test
qc_bytes_ext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    macro_rules! qc_bytes_ext {$/;"	M	module:stdtests
qc_sized	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    pub fn qc_sized<A: Testable>(f: A, size: u64) {$/;"	f	module:test
qc_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    macro_rules! qc_slice {$/;"	M	module:stdtests
qc_unsized	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn qc_unsized<A: Testable>(f: A) {$/;"	f	module:stdtests
qq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    qq: bigint::Modulus<QQ>,$/;"	m	struct:KeyPair
quote	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn quote(&mut self, quote: u8) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
quote	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn quote(&mut self, quote: u8) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
quote_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^macro_rules! quote_block {$/;"	M
quote_expr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^macro_rules! quote_expr {$/;"	M
quote_style	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn quote_style(&mut self, style: QuoteStyle) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
quoting	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn quoting(&mut self, yes: bool) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
r	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    r: &'r ByteRecord,$/;"	m	struct:ByteRecordIter
r	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    r         : [u32; 5],$/;"	m	struct:Poly1305
r	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        r: u32,$/;"	m	struct:test::Test
r	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    r: u32,$/;"	m	struct:ScryptParams
rand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod rand;$/;"	n
rand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub mod rand {$/;"	n
random	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/lib.rs	/^pub mod random;$/;"	n
random	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub fn random<T>() -> T where Standard: Distribution<T> {$/;"	f
random_scalar	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn random_scalar($/;"	f
range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn range(&self, i: usize) -> Option<Range<usize>> {$/;"	P	implementation:ByteRecord
range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn range(&self, i: usize) -> Option<Range<usize>> {$/;"	P	implementation:StringRecord
range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        fn range<T: SampleUniform>(low: T, high: T) {$/;"	f	function:tests::test_float_assertions
range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    range: X,$/;"	m	struct:UniformInt
range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^mod range {$/;"	n
rate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn rate(&self) -> usize {$/;"	P	implementation:Sha3
raw_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn raw_data(&mut self, begin: u8, max_len: usize) -> DecodeResult<Vec<u8>> {$/;"	P	implementation:Kernel
raw_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn raw_fields<'a>(&'a self) -> Vec<&'a Field> {$/;"	P	implementation:Options
raw_one_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn raw_one_byte_record() {$/;"	f	module:tests
raw_one_empty_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn raw_one_empty_record() {$/;"	f	module:tests
raw_result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Blake2b
raw_result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Blake2s
raw_result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Ghash
raw_result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Hmac
raw_result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn raw_result(&mut self, output: &mut [u8]);$/;"	P	interface:Mac
raw_result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Poly1305
raw_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn raw_slice(&mut self, begin: u8, max_len: usize) -> DecodeResult<&[u8]> {$/;"	P	implementation:Kernel
raw_two_empty_records	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn raw_two_empty_records() {$/;"	f	module:tests
raw_unequal_records_bad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn raw_unequal_records_bad() {$/;"	f	module:tests
raw_unequal_records_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn raw_unequal_records_ok() {$/;"	f	module:tests
rc4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod rc4;$/;"	n
rc4_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_10(bh: & mut Bencher) {$/;"	f	module:bench
rc4_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_1k(bh: & mut Bencher) {$/;"	f	module:bench
rc4_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_64k(bh: & mut Bencher) {$/;"	f	module:bench
rd_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^        pub rd_key: [u32; 4 * (AES_MAX_ROUNDS + 1)],$/;"	m	struct:tests::AES_KEY
rdr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rdr: &'r mut Reader<R>,$/;"	m	struct:ByteRecordsIter
rdr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rdr: &'r mut Reader<R>,$/;"	m	struct:DeserializeRecordsIter
rdr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rdr: &'r mut Reader<R>,$/;"	m	struct:StringRecordsIter
rdr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rdr: Reader<R>,$/;"	m	struct:ByteRecordsIntoIter
rdr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rdr: Reader<R>,$/;"	m	struct:DeserializeRecordsIntoIter
rdr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rdr: Reader<R>,$/;"	m	struct:StringRecordsIntoIter
rdr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rdr: io::BufReader<R>,$/;"	m	struct:Reader
read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    pub fn read<R: ReadBytesExt>(r: &mut R) -> Result<(Type, u8), Error> {$/;"	P	implementation:Type
read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub(crate) fn read<R: io::Read>($/;"	P	implementation:StringRecord
read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn read(&self, buf: &mut [u8]) -> HidResult<usize> {$/;"	P	implementation:HidDevice
read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod read {$/;"	n
read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/mod.rs	/^#[cfg(feature="std")] #[doc(hidden)] pub mod read;$/;"	n
read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn read(&mut self, buf: &mut [u8]) -> Result<usize, std::io::Error> {$/;"	P	implementation:RngCore
read_all	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn read_all<F, R, E>(&self, incomplete_read: E, read: F)$/;"	P	implementation:Input
read_all_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn read_all_mut<F, R, E>(&self, incomplete_read: E, mut read: F)$/;"	P	implementation:Input
read_all_optional	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub fn read_all_optional<F, R, E>(input: Option<Input>,$/;"	f
read_byte	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn read_byte(&mut self) -> Result<u8, EndOfInput> {$/;"	P	implementation:Reader
read_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_byte_record() {$/;"	f	module:tests
read_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn read_byte_record($/;"	P	implementation:Reader
read_byte_record_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_byte_record_impl($/;"	P	implementation:Reader
read_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn read_bytes() {$/;"	f	module:tests
read_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn read_bytes(&mut self, b: &mut [u8]) -> DecodeResult<usize> {$/;"	P	implementation:Decoder
read_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_f32<T: ByteOrder>(&mut self) -> Result<f32> {$/;"	P	interface:ReadBytesExt
read_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_f32(buf: &[u8]) -> f32 {$/;"	P	interface:ByteOrder
read_f32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_f32_into<T: ByteOrder>($/;"	P	interface:ReadBytesExt
read_f32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_f32_into(src: &[u8], dst: &mut [f32]) {$/;"	P	interface:ByteOrder
read_f32_into_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_f32_into_unchecked<T: ByteOrder>($/;"	P	interface:ReadBytesExt
read_f32_into_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_f32_into_unchecked(src: &[u8], dst: &mut [f32]) {$/;"	P	interface:ByteOrder
read_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_f64<T: ByteOrder>(&mut self) -> Result<f64> {$/;"	P	interface:ReadBytesExt
read_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_f64(buf: &[u8]) -> f64 {$/;"	P	interface:ByteOrder
read_f64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_f64_into<T: ByteOrder>($/;"	P	interface:ReadBytesExt
read_f64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_f64_into(src: &[u8], dst: &mut [f64]) {$/;"	P	interface:ByteOrder
read_f64_into_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_f64_into_unchecked<T: ByteOrder>($/;"	P	interface:ReadBytesExt
read_f64_into_unchecked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_f64_into_unchecked(src: &[u8], dst: &mut [f64]) {$/;"	P	interface:ByteOrder
read_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i128<T: ByteOrder>(&mut self) -> Result<i128> {$/;"	P	interface:ReadBytesExt
read_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i128(buf: &[u8]) -> i128 {$/;"	P	interface:ByteOrder
read_i128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i128_into<T: ByteOrder>($/;"	P	interface:ReadBytesExt
read_i128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i128_into(src: &[u8], dst: &mut [i128]) {$/;"	P	interface:ByteOrder
read_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i16<T: ByteOrder>(&mut self) -> Result<i16> {$/;"	P	interface:ReadBytesExt
read_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i16(buf: &[u8]) -> i16 {$/;"	P	interface:ByteOrder
read_i16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i16_into<T: ByteOrder>(&mut self, dst: &mut [i16]) -> Result<()> {$/;"	P	interface:ReadBytesExt
read_i16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i16_into(src: &[u8], dst: &mut [i16]) {$/;"	P	interface:ByteOrder
read_i24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i24<T: ByteOrder>(&mut self) -> Result<i32> {$/;"	P	interface:ReadBytesExt
read_i24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i24(buf: &[u8]) -> i32 {$/;"	P	interface:ByteOrder
read_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i32<T: ByteOrder>(&mut self) -> Result<i32> {$/;"	P	interface:ReadBytesExt
read_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i32(buf: &[u8]) -> i32 {$/;"	P	interface:ByteOrder
read_i32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i32_into<T: ByteOrder>(&mut self, dst: &mut [i32]) -> Result<()> {$/;"	P	interface:ReadBytesExt
read_i32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i32_into(src: &[u8], dst: &mut [i32]) {$/;"	P	interface:ByteOrder
read_i48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i48<T: ByteOrder>(&mut self) -> Result<i64> {$/;"	P	interface:ReadBytesExt
read_i48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i48(buf: &[u8]) -> i64 {$/;"	P	interface:ByteOrder
read_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i64<T: ByteOrder>(&mut self) -> Result<i64> {$/;"	P	interface:ReadBytesExt
read_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i64(buf: &[u8]) -> i64 {$/;"	P	interface:ByteOrder
read_i64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i64_into<T: ByteOrder>(&mut self, dst: &mut [i64]) -> Result<()> {$/;"	P	interface:ReadBytesExt
read_i64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_i64_into(src: &[u8], dst: &mut [i64]) {$/;"	P	interface:ByteOrder
read_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i8(&mut self) -> Result<i8> {$/;"	P	interface:ReadBytesExt
read_i8_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_i8_into(&mut self, dst: &mut [i8]) -> Result<()> {$/;"	P	interface:ReadBytesExt
read_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_int<T: ByteOrder>(&mut self, nbytes: usize) -> Result<i64> {$/;"	P	interface:ReadBytesExt
read_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_int(buf: &[u8], nbytes: usize) -> i64 {$/;"	P	interface:ByteOrder
read_int128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_int128<T: ByteOrder>(&mut self, nbytes: usize) -> Result<i128> {$/;"	P	interface:ReadBytesExt
read_int128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_int128(buf: &[u8], nbytes: usize) -> i128 {$/;"	P	interface:ByteOrder
read_num_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^macro_rules! read_num_bytes {$/;"	M
read_raw_data	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn read_raw_data(&mut self, begin: u8, buf: &mut [u8]) -> DecodeResult<usize> {$/;"	P	implementation:Kernel
read_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn read_record(&mut self, record: &mut StringRecord) -> Result<bool> {$/;"	P	implementation:Reader
read_record_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_record_headers() {$/;"	f	module:tests
read_record_headers_invalid_utf8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_record_headers_invalid_utf8() {$/;"	f	module:tests
read_record_no_headers_after	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_record_no_headers_after() {$/;"	f	module:tests
read_record_no_headers_before	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_record_no_headers_before() {$/;"	f	module:tests
read_record_unequal_continue	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_record_unequal_continue() {$/;"	f	module:tests
read_record_unequal_fails	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_record_unequal_fails() {$/;"	f	module:tests
read_record_unequal_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_record_unequal_ok() {$/;"	f	module:tests
read_row_major	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn read_row_major(data: &[u8]) -> u32x4 {$/;"	f	function:bit_slice_1x128_with_u32x4
read_signed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^macro_rules! read_signed {$/;"	M
read_signed_byte	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^macro_rules! read_signed_byte {$/;"	M
read_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^macro_rules! read_slice {$/;"	M
read_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^    fn read_slice(&mut self, n: usize) -> Result<&[u8], ReadSliceError> {$/;"	P	implementation:Cursor
read_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/slice.rs	/^    fn read_slice(&mut self, n: usize) -> Result<&[u8], ReadSliceError>;$/;"	P	interface:ReadSlice
read_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs	/^macro_rules! read_slice {$/;"	M
read_tag_and_get_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^pub fn read_tag_and_get_value<'a>($/;"	f
read_timeout	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn read_timeout(&self, buf: &mut [u8], timeout: i32) -> HidResult<usize> {$/;"	P	implementation:HidDevice
read_trimed_header_invalid_utf8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_trimed_header_invalid_utf8() {$/;"	f	module:tests
read_trimmed_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_trimmed_header() {$/;"	f	module:tests
read_trimmed_records	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_trimmed_records() {$/;"	f	module:tests
read_trimmed_records_and_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn read_trimmed_records_and_headers() {$/;"	f	module:tests
read_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u128<T: ByteOrder>(&mut self) -> Result<u128> {$/;"	P	interface:ReadBytesExt
read_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u128(buf: &[u8]) -> u128 {$/;"	P	implementation:BigEndian
read_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u128(buf: &[u8]) -> u128 {$/;"	P	implementation:LittleEndian
read_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u128(buf: &[u8]) -> u128;$/;"	P	interface:ByteOrder
read_u128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u128_into<T: ByteOrder>($/;"	P	interface:ReadBytesExt
read_u128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u128_into(src: &[u8], dst: &mut [u128]) {$/;"	P	implementation:BigEndian
read_u128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u128_into(src: &[u8], dst: &mut [u128]) {$/;"	P	implementation:LittleEndian
read_u128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u128_into(src: &[u8], dst: &mut [u128]);$/;"	P	interface:ByteOrder
read_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u16<T: ByteOrder>(&mut self) -> Result<u16> {$/;"	P	interface:ReadBytesExt
read_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u16(buf: &[u8]) -> u16 {$/;"	P	implementation:BigEndian
read_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u16(buf: &[u8]) -> u16 {$/;"	P	implementation:LittleEndian
read_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u16(buf: &[u8]) -> u16;$/;"	P	interface:ByteOrder
read_u16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u16_into<T: ByteOrder>(&mut self, dst: &mut [u16]) -> Result<()> {$/;"	P	interface:ReadBytesExt
read_u16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u16_into(src: &[u8], dst: &mut [u16]) {$/;"	P	implementation:BigEndian
read_u16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u16_into(src: &[u8], dst: &mut [u16]) {$/;"	P	implementation:LittleEndian
read_u16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u16_into(src: &[u8], dst: &mut [u16]);$/;"	P	interface:ByteOrder
read_u24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u24<T: ByteOrder>(&mut self) -> Result<u32> {$/;"	P	interface:ReadBytesExt
read_u24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u24(buf: &[u8]) -> u32 {$/;"	P	interface:ByteOrder
read_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u32<T: ByteOrder>(&mut self) -> Result<u32> {$/;"	P	interface:ReadBytesExt
read_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u32(buf: &[u8]) -> u32 {$/;"	P	implementation:BigEndian
read_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u32(buf: &[u8]) -> u32 {$/;"	P	implementation:LittleEndian
read_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u32(buf: &[u8]) -> u32;$/;"	P	interface:ByteOrder
read_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^        fn read_u32(buf: &[u8]) -> u32 {$/;"	f	method:SigningContext::from_key
read_u32_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_be(input: &[u8]) -> u32 {$/;"	f
read_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u32_into<T: ByteOrder>(&mut self, dst: &mut [u32]) -> Result<()> {$/;"	P	interface:ReadBytesExt
read_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u32_into(src: &[u8], dst: &mut [u32]) {$/;"	P	implementation:BigEndian
read_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u32_into(src: &[u8], dst: &mut [u32]) {$/;"	P	implementation:LittleEndian
read_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u32_into(src: &[u8], dst: &mut [u32]);$/;"	P	interface:ByteOrder
read_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs	/^pub fn read_u32_into(src: &[u8], dst: &mut [u32]) {$/;"	f
read_u32_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_le(input: &[u8]) -> u32 {$/;"	f
read_u32v_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_be(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u32v_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_le(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u48<T: ByteOrder>(&mut self) -> Result<u64> {$/;"	P	interface:ReadBytesExt
read_u48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u48(buf: &[u8]) -> u64 {$/;"	P	interface:ByteOrder
read_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u64<T: ByteOrder>(&mut self) -> Result<u64> {$/;"	P	interface:ReadBytesExt
read_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u64(buf: &[u8]) -> u64 {$/;"	P	implementation:BigEndian
read_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u64(buf: &[u8]) -> u64 {$/;"	P	implementation:LittleEndian
read_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u64(buf: &[u8]) -> u64;$/;"	P	interface:ByteOrder
read_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u64_into<T: ByteOrder>(&mut self, dst: &mut [u64]) -> Result<()> {$/;"	P	interface:ReadBytesExt
read_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u64_into(src: &[u8], dst: &mut [u64]) {$/;"	P	implementation:BigEndian
read_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u64_into(src: &[u8], dst: &mut [u64]) {$/;"	P	implementation:LittleEndian
read_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_u64_into(src: &[u8], dst: &mut [u64]);$/;"	P	interface:ByteOrder
read_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs	/^pub fn read_u64_into(src: &[u8], dst: &mut [u64]) {$/;"	f
read_u64v_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_be(dst: &mut[u64], input: &[u8]) {$/;"	f
read_u64v_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_le(dst: &mut[u64], input: &[u8]) {$/;"	f
read_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_u8(&mut self) -> Result<u8> {$/;"	P	interface:ReadBytesExt
read_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_uint<T: ByteOrder>(&mut self, nbytes: usize) -> Result<u64> {$/;"	P	interface:ReadBytesExt
read_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_uint(buf: &[u8], nbytes: usize) -> u64 {$/;"	P	implementation:BigEndian
read_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_uint(buf: &[u8], nbytes: usize) -> u64 {$/;"	P	implementation:LittleEndian
read_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_uint(buf: &[u8], nbytes: usize) -> u64;$/;"	P	interface:ByteOrder
read_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn read_uint128<T: ByteOrder>(&mut self, nbytes: usize) -> Result<u128> {$/;"	P	interface:ReadBytesExt
read_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_uint128(buf: &[u8], nbytes: usize) -> u128 {$/;"	P	implementation:BigEndian
read_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_uint128(buf: &[u8], nbytes: usize) -> u128 {$/;"	P	implementation:LittleEndian
read_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn read_uint128(buf: &[u8], nbytes: usize) -> u128;$/;"	P	interface:ByteOrder
readable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn readable(&self) -> &[u8] {$/;"	P	implementation:Buffer
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    reader: R$/;"	m	struct:Kernel
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^mod reader;$/;"	n
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader(&self) -> &Reader<R> {$/;"	P	implementation:ByteRecordsIntoIter
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader(&self) -> &Reader<R> {$/;"	P	implementation:ByteRecordsIter
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader(&self) -> &Reader<R> {$/;"	P	implementation:DeserializeRecordsIntoIter
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader(&self) -> &Reader<R> {$/;"	P	implementation:DeserializeRecordsIter
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader(&self) -> &Reader<R> {$/;"	P	implementation:StringRecordsIntoIter
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader(&self) -> &Reader<R> {$/;"	P	implementation:StringRecordsIter
reader	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    reader: R$/;"	m	struct:ReadRng
reader_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader_mut(&mut self) -> &mut Reader<R> {$/;"	P	implementation:ByteRecordsIntoIter
reader_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader_mut(&mut self) -> &mut Reader<R> {$/;"	P	implementation:ByteRecordsIter
reader_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader_mut(&mut self) -> &mut Reader<R> {$/;"	P	implementation:DeserializeRecordsIntoIter
reader_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader_mut(&mut self) -> &mut Reader<R> {$/;"	P	implementation:DeserializeRecordsIter
reader_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader_mut(&mut self) -> &mut Reader<R> {$/;"	P	implementation:StringRecordsIntoIter
reader_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn reader_mut(&mut self) -> &mut Reader<R> {$/;"	P	implementation:StringRecordsIter
real	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod real;$/;"	n
rec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rec: ByteRecord,$/;"	m	struct:ByteRecordsIntoIter
rec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rec: ByteRecord,$/;"	m	struct:ByteRecordsIter
rec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rec: StringRecord,$/;"	m	struct:DeserializeRecordsIntoIter
rec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rec: StringRecord,$/;"	m	struct:DeserializeRecordsIter
rec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rec: StringRecord,$/;"	m	struct:StringRecordsIntoIter
rec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    rec: StringRecord,$/;"	m	struct:StringRecordsIter
receive	/home/pme/src/rust/ctap/src/lib.rs	/^    fn receive(&mut self, cmd: &CtapCommand) -> FidoResult<Vec<u8>> {$/;"	P	implementation:FidoDevice
recip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn recip(self) -> Self {$/;"	P	interface:FloatCore
recip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn recip(self) -> Self;$/;"	P	interface:Float
recip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn recip(self) -> Self;$/;"	P	interface:Real
recommended_key_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub fn recommended_key_len(digest_alg: &digest::Algorithm) -> usize { digest_alg.chaining_len }$/;"	f
record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn record(&self) -> u64 {$/;"	P	implementation:Position
record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    record: u64,$/;"	m	struct:Position
record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    record: ByteRecord,$/;"	m	struct:FromUtf8Error
record_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn record_1() {$/;"	f	module:tests
record_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn record_2() {$/;"	f	module:tests
records	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn records(&mut self) -> StringRecordsIter<R> {$/;"	P	implementation:Reader
ref_from_mut_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^pub fn ref_from_mut_ref<'a, T: ?Sized>(x: &'a mut T) -> &'a T { x }$/;"	f
refresh_devices	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn refresh_devices(&mut self) -> HidResult<()> {$/;"	P	implementation:HidApi
register_fork_handler	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    pub fn register_fork_handler() {$/;"	f	module:fork
register_fork_handler	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    pub fn register_fork_handler() {}$/;"	f	module:fork
release_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub release_number: c_ushort,$/;"	m	struct:HidDeviceInfo
release_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn release_number(&self) -> u16 {$/;"	P	implementation:DeviceInfo
release_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub release_number: u16,$/;"	m	struct:HidDeviceInfo
release_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    release_number: u16,$/;"	m	struct:DeviceInfo
relevant_type_params	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^        relevant_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.buff.len() - self.pos }$/;"	P	implementation:RefReadBuffer
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:BorrowedWriteBuffer
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:OwnedReadBuffer
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:OwnedWriteBuffer
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:RefWriteBuffer
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:ReadBuffer
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:WriteBuffer
remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:FixedBuffer
remote	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn remote(&self) -> Option<&syn::Path> {$/;"	P	implementation:Container
remote	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    remote: Option<syn::Path>,$/;"	m	struct:Container
rename_all_rules	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Container
rename_all_rules	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Variant
rename_all_rules	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Container
rename_all_rules	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Variant
rename_by_rules	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Field
rename_by_rules	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Variant
rename_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^fn rename_fields() {$/;"	f
rename_variants	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/case.rs	/^fn rename_variants() {$/;"	f
replace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn replace(self, index: usize, new_value: Self) -> Self { debug_assert_eq!(index, 0); new_va/;"	P	interface:FloatAsSIMD
replacement	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/try.rs	/^pub fn replacement() -> TokenStream {$/;"	f
report_size	/home/pme/src/rust/ctap/src/hid_common.rs	/^    pub report_size: u16,$/;"	m	struct:DeviceInfo
repr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    repr: ChiSquaredRepr,$/;"	m	struct:ChiSquared
repr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    repr: GammaRepr,$/;"	m	struct:Gamma
request_multiple_devices	/home/pme/src/rust/ctap/src/util.rs	/^pub fn request_multiple_devices<$/;"	f
require_bounded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^    fn require_bounded<T: Bounded>(_: &T) {}$/;"	f	function:wrapping_is_bounded
require_num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    fn require_num<T: Num>(_: &T) {}$/;"	f	function:wrapping_is_num
require_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn require_one<T: One>(_: &T) {}$/;"	f	function:wrapping_is_one
require_unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn require_unsigned<T: Unsigned>(_: &T) {}$/;"	f	function:unsigned_wrapping_is_unsigned
require_wrappingadd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn require_wrappingadd<T: WrappingAdd>(_: &T) {}$/;"	f	function:wrapping_is_wrappingadd
require_wrappingmul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn require_wrappingmul<T: WrappingMul>(_: &T) {}$/;"	f	function:wrapping_is_wrappingmul
require_wrappingshl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn require_wrappingshl<T: WrappingShl>(_: &T) {}$/;"	f	function:wrapping_is_wrappingshl
require_wrappingshr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn require_wrappingshr<T: WrappingShr>(_: &T) {}$/;"	f	function:wrapping_is_wrappingshr
require_wrappingsub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn require_wrappingsub<T: WrappingSub>(_: &T) {}$/;"	f	function:wrapping_is_wrappingsub
require_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn require_zero<T: Zero>(_: &T) {}$/;"	f	function:wrapping_is_zero
requires_clone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn requires_clone(&self) -> bool {$/;"	P	implementation:Options
requires_default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn requires_default(field: &attr::Field, _variant: Option<&attr::Variant>) -> bool {$/;"	f
reseed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn reseed(&mut self) -> Result<(), Error> {$/;"	f
reseed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn reseed(&mut self) -> Result<(), Error> {$/;"	f
reseed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    pub fn reseed(&mut self) -> Result<(), Error> {$/;"	f
reseed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, s: &[u8]) {$/;"	P	implementation:FortunaGenerator
reseed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, seed: &'a [u8]) {$/;"	P	implementation:Fortuna
reseed_and_generate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn reseed_and_generate(&mut self,$/;"	f
reseed_count	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    reseed_count: u32,$/;"	m	struct:Fortuna
reseeder	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    reseeder: Rsdr,$/;"	m	struct:ReseedingCore
reseeding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/mod.rs	/^mod reseeding;$/;"	n
reserved	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    reserved: [u8; 14],$/;"	m	struct:Blake2bParam
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:BlockRng
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:BlockRng64
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) { Blake2b::reset(self); }$/;"	P	implementation:Blake2b
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Blake2b
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:Blake2b
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) { Blake2s::reset(self); }$/;"	P	implementation:Blake2s
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Blake2s
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:Blake2s
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset(&mut self) {$/;"	P	implementation:BlockEngine
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:EcbDecryptor
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:EcbEncryptor
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, ctr: &[u8]) {$/;"	P	implementation:CtrMode
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, ctr: &[u8]) {$/;"	P	implementation:CtrModeX8
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, iv: &[u8]) {$/;"	P	implementation:CbcDecryptor
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, iv: &[u8]) {$/;"	P	implementation:CbcEncryptor
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:OwnedReadBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:OwnedWriteBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:RefReadBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:RefWriteBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) {$/;"	P	implementation:BorrowedWriteBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self);$/;"	P	interface:ReadBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self);$/;"	P	interface:WriteBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn reset(&mut self);$/;"	P	interface:FixedBuffer
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn reset(&mut self);$/;"	P	interface:Digest
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Ghash
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Hmac
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn reset(&mut self);$/;"	P	interface:Mac
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Md5
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Md5State
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Poly1305
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Ripemd160
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha1
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha224
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha256
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha384
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512Trunc224
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512Trunc256
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha3
reset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Whirlpool
reset_with_history	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset_with_history(&mut self, in_hist: &[u8], out_hist: &[u8]) {$/;"	P	implementation:BlockEngine
resolved	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    resolved: Mutex<bool>,$/;"	m	struct:MaybeResolved
respan_token_stream	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn respan_token_stream(stream: TokenStream, span: Span) -> TokenStream {$/;"	f
respan_token_tree	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn respan_token_tree(mut token: TokenTree, span: Span) -> TokenTree {$/;"	f
rest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    rest: Option<[u8; 16]>$/;"	m	struct:GhashWithC
rest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    rest: Option<[u8; 16]>,$/;"	m	struct:Ghash
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^    mod result {$/;"	n	module:tests
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Blake2b
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	P	implementation:Blake2b
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Blake2s
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	P	implementation:Blake2s
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn result(&mut self, out: &mut [u8]);$/;"	P	interface:Digest
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Pool
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Ghash
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn result(mut self) -> [u8; 16] {$/;"	P	implementation:Ghash
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn result(mut self) -> [u8; 16] {$/;"	P	implementation:GhashWithC
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Hmac
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn result(&mut self) -> MacResult;$/;"	P	interface:Mac
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Md5
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Poly1305
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Ripemd160
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn result(&mut self, out: &mut [u8]) { mk_result(self, out) }$/;"	P	implementation:Sha1
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha224
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha256
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha384
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512Trunc224
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512Trunc256
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha3
result	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Whirlpool
result_ext	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^mod result_ext;$/;"	n
result_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn result_str(&mut self) -> String {$/;"	P	interface:Digest
results	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    results: R::Results,$/;"	m	struct:BlockRng
results	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    results: R::Results,$/;"	m	struct:BlockRng64
retries	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub retries: Option<u8>,$/;"	m	struct:ClientPinResponse
rewind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:OwnedReadBuffer
rewind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:OwnedWriteBuffer
rewind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:RefReadBuffer
rewind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:RefWriteBuffer
rewind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) {$/;"	P	implementation:BorrowedWriteBuffer
rewind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize);$/;"	P	interface:ReadBuffer
rewind	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize);$/;"	P	interface:WriteBuffer
ring_src_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn ring_src_path() -> std::path::PathBuf { std::path::PathBuf::from(".") }$/;"	f
ring_src_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^pub fn ring_src_path() -> std::path::PathBuf {$/;"	f
ripemd160	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ripemd160;$/;"	n
ripemd160_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_10(bh: & mut Bencher) {$/;"	f	module:bench
ripemd160_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_1k(bh: & mut Bencher) {$/;"	f	module:bench
ripemd160_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_64k(bh: & mut Bencher) {$/;"	f	module:bench
rk	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub rk: bool,$/;"	m	struct:AuthenticatorOptions
rk	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub rk: bool,$/;"	m	struct:OptionsInfo
rk	/home/pme/src/rust/ctap/src/lib.rs	/^    rk: bool,$/;"	m	struct:FidoAssertionRequest
rk	/home/pme/src/rust/ctap/src/lib.rs	/^    rk: bool,$/;"	m	struct:FidoCredentialRequest
rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    rng: &'a mut R,$/;"	m	struct:DistIter
rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    pub fn rng(seed: u64) -> TestRng<StdRng> {$/;"	f	module:test
rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^    rng: *mut ReseedingRng<Hc128Core, EntropyRng>,$/;"	m	struct:ThreadRng
rngs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod rngs;$/;"	n
root_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^    pub fn root_cause(&self) -> &dyn Fail {$/;"	P	implementation:Error
root_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    fn root_cause(&self) -> &dyn Fail$/;"	P	interface:Fail
root_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^    pub fn root_cause(&self) -> &dyn Fail {$/;"	P	implementation:Fail
root_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    pub fn root_cause(&self) -> &Fail {$/;"	P	implementation:Error
ror1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> Self;$/;"	P	interface:AesBitValueOps
ror1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u16 {$/;"	P	implementation:u16
ror1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u32x4 {$/;"	P	implementation:u32x4
ror2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> Self;$/;"	P	interface:AesBitValueOps
ror2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u16 {$/;"	P	implementation:u16
ror2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u32x4 {$/;"	P	implementation:u32x4
ror3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> Self;$/;"	P	interface:AesBitValueOps
ror3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u16 {$/;"	P	implementation:u16
ror3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u32x4 {$/;"	P	implementation:u32x4
rotate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! rotate {$/;"	M
rotate_left	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn rotate_left(self, n: u32) -> Self;$/;"	P	interface:PrimInt
rotate_right	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn rotate_right(self, n: u32) -> Self;$/;"	P	interface:PrimInt
rotl64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^fn rotl64(v: u64, n: usize) -> u64 {$/;"	f
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn round(self) -> Self {$/;"	P	implementation:f32
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn round(self) -> Self {$/;"	P	implementation:f64
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn round(self) -> Self {$/;"	P	interface:FloatCore
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn round(self) -> Self;$/;"	P	interface:Float
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn round(self) -> Self;$/;"	P	interface:Real
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	M
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	M
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! round{$/;"	M
round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! round($/;"	M
round_function	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn round_function(&self, x: u32) -> u32 {$/;"	P	implementation:Blowfish
round_keys	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    round_keys: [u8; 240]$/;"	m	struct:AesNiDecryptor
round_keys	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    round_keys: [u8; 240]$/;"	m	struct:AesNiEncryptor
rounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^        pub rounds: c::uint,$/;"	m	struct:tests::AES_KEY
rounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    rounds: u8,$/;"	m	struct:AesNiDecryptor
rounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    rounds: u8,$/;"	m	struct:AesNiEncryptor
rounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            rounds: u32,$/;"	m	struct:test::test_openbsd_vectors::Test
rounds4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! rounds4 {$/;"	M
rounds4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! rounds4 {$/;"	M
rowround	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^fn rowround(state: &mut SalsaState) -> () {$/;"	f
rp	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub rp: PublicKeyCredentialRpEntity<'a>,$/;"	m	struct:MakeCredentialRequest
rp_icon_url	/home/pme/src/rust/ctap/src/lib.rs	/^    rp_icon_url: Option<&'a str>,$/;"	m	struct:FidoCredentialRequest
rp_id	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub rp_id: &'a str,$/;"	m	struct:GetAssertionRequest
rp_id	/home/pme/src/rust/ctap/src/lib.rs	/^    rp_id: &'a str,$/;"	m	struct:FidoAssertionRequest
rp_id	/home/pme/src/rust/ctap/src/lib.rs	/^    rp_id: &'a str,$/;"	m	struct:FidoCredentialRequest
rp_id_hash	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub rp_id_hash: [u8; 32],$/;"	m	struct:AuthenticatorData
rp_name	/home/pme/src/rust/ctap/src/lib.rs	/^    rp_name: Option<&'a str>,$/;"	m	struct:FidoCredentialRequest
rr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    rr: [Limb; MAX_LIMBS],$/;"	m	struct:Modulus
rsa	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod rsa;$/;"	n
rsa_params	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^macro_rules! rsa_params {$/;"	M
rsa_pkcs1_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^macro_rules! rsa_pkcs1_padding {$/;"	M
rsa_pss_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^macro_rules! rsa_pss_padding {$/;"	M
rsh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn rsh(self, s: u32) -> u32x4 {$/;"	P	implementation:u32x4
run_full_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_full_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f	module:test
run_inc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc<OpFunc, NextInFunc, NextOutFunc>($/;"	f	module:test
run_inc1_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc1_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f	module:test
run_rand_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_rand_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f	module:test
run_round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    macro_rules! run_round ($/;"	M	function:salsa20_8
run_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn run_test<E: BlockEncryptor, D: BlockDecryptor>(enc: &mut E, dec: &mut D, test: &Test) {$/;"	f	module:test
run_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f	module:test
rust_crypto_aesni_aesimc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_aesimc(round_keys: *mut u8);$/;"	f
rust_crypto_aesni_decrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_decrypt_block($/;"	f
rust_crypto_aesni_encrypt_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_encrypt_block($/;"	f
rust_crypto_aesni_setup_working_key_128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_128(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_192	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_192(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_256(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_util_fixed_time_eq_asm	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_fixed_time_eq_asm($/;"	f
rust_crypto_util_secure_memset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_secure_memset($/;"	f
rust_crypto_util_supports_aesni	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_supports_aesni() -> u32;$/;"	f
s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn s(b: &[u8]) -> &str {$/;"	f	module:tests
s	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    s: [[u32; 256]; 4],$/;"	m	struct:Blowfish
s0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s0: u32,$/;"	m	struct:Md5State
s1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s1: u32,$/;"	m	struct:Md5State
s2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s2: u32,$/;"	m	struct:Md5State
s3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s3: u32$/;"	m	struct:Md5State
s_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    s_len: usize,$/;"	m	struct:PSSMetrics
salsa20	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod salsa20;$/;"	n
salsa20_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_10(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_1k(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_64k(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn salsa20_8(input: &[u8], output: &mut [u8]) {$/;"	f
salt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::Test
salt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            salt: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
salt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    salt: [u8; BLAKE2B_SALTBYTES],$/;"	m	struct:Blake2bParam
salt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    salt: [u8; BLAKE2S_SALTBYTES],$/;"	m	struct:Blake2sParam
salt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::TestVector
salt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::Test
salt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        salt: &'static str,$/;"	m	struct:test::Test
salted_expand_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn salted_expand_key(&mut self, salt: &[u8], key: &[u8]) {$/;"	P	implementation:Blowfish
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> bool {$/;"	P	implementation:Bernoulli
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u64 {$/;"	P	implementation:Binomial
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Cauchy
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Vec<f64> {$/;"	P	implementation:Dirichlet
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Exp
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Exp1
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Beta
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:ChiSquared
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:FisherF
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Gamma
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:GammaLargeShape
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:GammaSmallShape
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:StudentT
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u16 {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u32 {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u64 {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u8 {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> usize {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T {$/;"	P	implementation:D
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T {$/;"	P	implementation:WeightedChoice
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;$/;"	P	interface:Distribution
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:LogNormal
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Normal
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:StandardNormal
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn sample<R: Rng + ?Sized>(&self, _: &mut R) -> () { () }$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Option<T> {$/;"	f
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Wrapping<T> {$/;"	f
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> bool {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> char {$/;"	P	implementation:Alphanumeric
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> char {$/;"	P	implementation:Standard
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^    fn sample() {$/;"	f	module:tests
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Pareto
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u64 {$/;"	P	implementation:Poisson
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Triangular
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^            fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {$/;"	P	implementation:tests::test_custom_uniform::UniformMyF32
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Duration {$/;"	P	implementation:UniformDuration
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X;$/;"	P	interface:UniformSampler
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> X {$/;"	P	implementation:Uniform
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> [f64; 2] {$/;"	P	implementation:UnitCircle
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> [f64; 3] {$/;"	P	implementation:UnitSphereSurface
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^    fn sample() {$/;"	f	module:tests
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> f64 {$/;"	P	implementation:Weibull
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> usize {$/;"	f
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T {$/;"	P	interface:Rng
sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^pub fn sample<R>(rng: &mut R, length: usize, amount: usize) -> IndexVec$/;"	f
sample_floyd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^fn sample_floyd<R>(rng: &mut R, length: u32, amount: u32) -> IndexVec$/;"	f
sample_inplace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^fn sample_inplace<R>(rng: &mut R, length: u32, amount: u32) -> IndexVec$/;"	f
sample_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn sample_iter<'a, R>(&'a self, rng: &'a mut R) -> DistIter<'a, Self, R, T>$/;"	P	interface:Distribution
sample_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn sample_iter<'a, T, D: Distribution<T>>(&'a mut self, distr: &'a D)$/;"	P	interface:Rng
sample_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^pub fn sample_iter<T, I, R>(rng: &mut R, iterable: I, amount: usize) -> Result<Vec<T>, Vec<T>>$/;"	f
sample_rejection	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^fn sample_rejection<R>(rng: &mut R, length: usize, amount: usize) -> IndexVec$/;"	f
sample_single	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn sample_single<R: Rng + ?Sized, B1, B2>(low: B1, high: B2, rng: &mut R)$/;"	P	interface:UniformSampler
sample_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^pub fn sample_slice<R, T>(rng: &mut R, slice: &[T], amount: usize) -> Vec<T>$/;"	f
sample_slice_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^pub fn sample_slice_ref<'a, R, T>(rng: &mut R, slice: &'a [T], amount: usize) -> Vec<&'a T>$/;"	f
saturating	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs	/^pub mod saturating;$/;"	n
saturating_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_add(&self, v: &Self) -> Self;$/;"	P	interface:SaturatingAdd
saturating_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_add(self, v: Self) -> Self;$/;"	P	interface:Saturating
saturating_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_add<T: SaturatingAdd>(a: T, b: T) -> T {$/;"	f	function:test_saturating_traits
saturating_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^macro_rules! saturating_impl {$/;"	M
saturating_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_mul(&self, v: &Self) -> Self;$/;"	P	interface:SaturatingMul
saturating_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_mul<T: SaturatingMul>(a: T, b: T) -> T {$/;"	f	function:test_saturating_traits
saturating_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_sub(&self, v: &Self) -> Self;$/;"	P	interface:SaturatingSub
saturating_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_sub(self, v: Self) -> Self;$/;"	P	interface:Saturating
saturating_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^    fn saturating_sub<T: SaturatingSub>(a: T, b: T) -> T {$/;"	f	function:test_saturating_traits
sc_muladd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_muladd(s: &mut[u8], a: &[u8], b: &[u8], c: &[u8]) {$/;"	f
sc_reduce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_reduce(s: &mut [u8]) {$/;"	f
scalar_as_elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn scalar_as_elem(&self, a: &Scalar) -> Elem<Unencoded> {$/;"	P	implementation:PublicScalarOps
scalar_bytes_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn scalar_bytes_len(&self) -> usize { self.common.num_limbs * LIMB_BYTES }$/;"	P	implementation:ScalarOps
scalar_float_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^macro_rules! scalar_float_impl {$/;"	M
scalar_from_big_endian_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/private_key.rs	/^pub fn scalar_from_big_endian_bytes($/;"	f
scalar_inv_to_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn scalar_inv_to_mont(&self, a: &Scalar) -> Scalar<R> {$/;"	P	implementation:ScalarOps
scalar_inv_to_mont_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    scalar_inv_to_mont_impl: fn(a: &Scalar) -> Scalar<R>,$/;"	m	struct:ScalarOps
scalar_mul_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    scalar_mul_mont: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:ScalarOps
scalar_mul_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn scalar_mul_test(ops: &ScalarOps, file_path: &str) {$/;"	f	module:tests
scalar_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub scalar_ops: &'static ScalarOps,$/;"	m	struct:PrivateScalarOps
scalar_ops	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub scalar_ops: &'static ScalarOps,$/;"	m	struct:PublicScalarOps
scalar_parse_big_endian_fixed_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub fn scalar_parse_big_endian_fixed_consttime($/;"	f
scalar_parse_big_endian_partially_reduced_variable_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub fn scalar_parse_big_endian_partially_reduced_variable_consttime($/;"	f
scalar_parse_big_endian_variable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub fn scalar_parse_big_endian_variable($/;"	f
scalar_product	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    pub fn scalar_product<EA: Encoding, EB: Encoding>($/;"	P	implementation:ScalarOps
scalar_square_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    fn scalar_square_test($/;"	f	module:tests
scalar_sum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^pub fn scalar_sum(ops: &CommonOps, a: &Scalar, b: &Scalar) -> Scalar {$/;"	f
scale	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    scale: f64$/;"	m	struct:Cauchy
scale	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    scale: f64,$/;"	m	struct:GammaLargeShape
scale	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^    scale: f64,$/;"	m	struct:Pareto
scale	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    scale: X,$/;"	m	struct:UniformFloat
scale	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^    scale: f64,$/;"	m	struct:Weibull
schedule	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! schedule {$/;"	M
schedule	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! schedule {$/;"	M
scl_n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
scl_n	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Self;$/;"	P	interface:Gf2Ops
scl_n2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
scl_n2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Self;$/;"	P	interface:Gf2Ops
scrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod scrypt;$/;"	n
scrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt(password: &[u8], salt: &[u8], params: &ScryptParams, output: &mut [u8]) {$/;"	f
scrypt_block_mix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_block_mix(input: &[u8], output: &mut [u8]) {$/;"	f
scrypt_check	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
scrypt_ro_mix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_ro_mix(b: &mut [u8], v: &mut [u8], t: &mut [u8], n: usize) {$/;"	f
scrypt_simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_simple(password: &str, params: &ScryptParams) -> io::Result<String> {$/;"	f
seal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    seal: fn(ctx: &[u64; KEY_CTX_BUF_ELEMS], nonce: &[u8; NONCE_LEN], ad: &[u8],$/;"	m	struct:Algorithm
seal_in_place	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^pub fn seal_in_place(key: &SealingKey, nonce: &[u8], ad: &[u8],$/;"	f
secure_memset	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn secure_memset(dst: &mut [u8], val: u8) {$/;"	f
seed_from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn seed_from_u64(seed: u64) -> Self {$/;"	P	implementation:BlockRng
seed_from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn seed_from_u64(seed: u64) -> Self {$/;"	P	implementation:BlockRng64
seed_from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn seed_from_u64(mut state: u64) -> Self {$/;"	P	interface:SeedableRng
seek	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn seek() {$/;"	f	module:tests
seek	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn seek(&mut self, pos: Position) -> Result<()> {$/;"	P	implementation:Reader
seek_headers_after	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn seek_headers_after() {$/;"	f	module:tests
seek_headers_before_after	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn seek_headers_before_after() {$/;"	f	module:tests
seek_headers_no_actual_seek	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn seek_headers_no_actual_seek() {$/;"	f	module:tests
seek_raw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn seek_raw($/;"	P	implementation:Reader
seeked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    seeked: bool,$/;"	m	struct:ReaderState
select	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn select(pos: usize, b: i8) -> GePrecomp {$/;"	P	implementation:GePrecomp
self_var	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    self_var: Ident,$/;"	m	struct:Parameters
semantics	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^        fn semantics() {$/;"	f	module:tests::result
send	/home/pme/src/rust/ctap/src/lib.rs	/^    fn send(&mut self, cmd: &CtapCommand, payload: &[u8]) -> FidoResult<()> {$/;"	P	implementation:FidoDevice
send_feature_report	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn send_feature_report(&self, data: &[u8]) -> HidResult<()> {$/;"	P	implementation:HidDevice
seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn seq() {$/;"	f	module:tests
seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^pub mod seq;$/;"	n
seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    seq: A,$/;"	m	struct:SeqAccessDeserializer
seq	/home/pme/src/rust/ctap/src/packet.rs	/^    pub seq: u8,$/;"	m	struct:ContPacket
seq_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! seq_impl {$/;"	M
seq_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! seq_impl {$/;"	M
seq_in_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn seq_in_struct() {$/;"	f	module:tests
seq_in_struct_tail	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn seq_in_struct_tail() {$/;"	f	module:tests
ser	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^pub mod ser;$/;"	n
ser	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/mod.rs	/^pub mod ser;$/;"	n
ser	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod ser;$/;"	n
ser_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
ser_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
ser_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
ser_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
ser_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
ser_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
serde	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^pub mod serde;$/;"	n
serde_if_integer128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/integer128.rs	/^macro_rules! serde_if_integer128 {$/;"	M
serde_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn serde_path(&self) -> Cow<syn::Path> {$/;"	P	implementation:Container
serde_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    serde_path: Option<syn::Path>,$/;"	m	struct:Container
serial_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub serial_number: *mut wchar_t,$/;"	m	struct:HidDeviceInfo
serial_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn serial_number(&self) -> Option<&str> {$/;"	P	implementation:DeviceInfo
serial_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub serial_number: Option<String>,$/;"	m	struct:HidDeviceInfo
serial_number	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    serial_number: WcharString,$/;"	m	struct:DeviceInfo
serial_number_raw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn serial_number_raw(&self) -> Option<&[wchar_t]> {$/;"	P	implementation:DeviceInfo
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize<S: Serialize>(s: S) -> String {$/;"	f	module:tests
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^pub fn serialize<S: Serialize, W: io::Write>($/;"	f
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn serialize<S: Serialize>(&mut self, record: S) -> Result<()> {$/;"	P	implementation:Writer
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^pub fn serialize<S, T>(data: T, serializer: S) -> Result<S::Ok, S::Error>$/;"	f
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:content::Content
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Arguments
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CStr
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CString
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Duration
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:IpAddr
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv4Addr
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv6Addr
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsStr
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsString
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Path
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PathBuf
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PhantomData
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddr
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV4
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV6
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:String
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SystemTime
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:T
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:str
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	f
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	interface:Serialize
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    serialize: RenameRule,$/;"	m	struct:RenameAllRules
serialize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    serialize: String,$/;"	m	struct:Name
serialize_adjacently_tagged_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_adjacently_tagged_variant($/;"	f
serialize_body	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_bool(self, v: bool) -> Result<Content, E> {$/;"	f	module:content
serialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_bytes(self, value: &[u8]) -> Result<Content, E> {$/;"	f	module:content
serialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_bytes(self, _v: &[u8]) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_char(self, v: char) -> Result<Content, E> {$/;"	f	module:content
serialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_display_bounded_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! serialize_display_bounded_length {$/;"	M
serialize_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_element<T: ?Sized + Serialize>($/;"	P	implementation:SeHeader
serialize_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_element<T: ?Sized + Serialize>($/;"	P	implementation:SeRecord
serialize_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeSeq
serialize_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTuple
serialize_element	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    fn serialize_element(&self, span: Span) -> TokenStream {$/;"	P	implementation:TupleTrait
serialize_entry	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_entry<K: ?Sized, V: ?Sized>(&mut self, key: &K, value: &V) -> Result<(), E>$/;"	f	module:content
serialize_entry	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_entry<K: ?Sized, V: ?Sized>($/;"	f
serialize_entry	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_entry<K: ?Sized, V: ?Sized>($/;"	P	interface:SerializeMap
serialize_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_enum(params: &Parameters, variants: &[Variant], cattrs: &attr::Container) -> Fragme/;"	f
serialize_err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_err<S: Serialize>(s: S) -> Error {$/;"	f	module:tests
serialize_externally_tagged_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_externally_tagged_variant($/;"	f
serialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_f32(self, v: f32) -> Result<Content, E> {$/;"	f	module:content
serialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_f64(self, v: f64) -> Result<Content, E> {$/;"	f	module:content
serialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_field<T: ?Sized + Serialize>($/;"	P	implementation:SeHeader
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_field<T: ?Sized + Serialize>($/;"	P	implementation:SeRecord
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>($/;"	f	module:content
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), M::Error>$/;"	f	module:content
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_field<T: ?Sized>($/;"	f
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStruct
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStructVariant
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleStruct
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleVariant
serialize_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    fn serialize_field(&self, span: Span) -> TokenStream {$/;"	P	implementation:StructTrait
serialize_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_header<S: Serialize>(s: S) -> (bool, String) {$/;"	f	module:tests
serialize_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^pub fn serialize_header<S: Serialize, W: io::Write>($/;"	f
serialize_header_err	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_header_err<S: Serialize>(s: S) -> Error {$/;"	f	module:tests
serialize_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_i16(self, v: i16) -> Result<Content, E> {$/;"	f	module:content
serialize_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_i32(self, v: i32) -> Result<Content, E> {$/;"	f	module:content
serialize_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_i64(self, v: i64) -> Result<Content, E> {$/;"	f	module:content
serialize_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_i8(self, v: i8) -> Result<Content, E> {$/;"	f	module:content
serialize_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_internally_tagged_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_internally_tagged_variant($/;"	f
serialize_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_into(params: &Parameters, type_into: &syn::Type) -> Fragment {$/;"	f
serialize_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_key<T: ?Sized + Serialize>($/;"	P	implementation:SeHeader
serialize_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_key<T: ?Sized + Serialize>($/;"	P	implementation:SeRecord
serialize_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), E>$/;"	f	module:content
serialize_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	f
serialize_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Error>$/;"	f
serialize_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_map($/;"	P	implementation:SeHeader
serialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_map($/;"	P	implementation:SeRecord
serialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, E> {$/;"	f	module:content
serialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap, fmt::Error> {$/;"	P	implementation:Formatter
serialize_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error>;$/;"	P	interface:Serializer
serialize_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn serialize_name(&self) -> String {$/;"	P	implementation:Name
serialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_newtype_struct<T: ?Sized + Serialize>($/;"	P	implementation:SeHeader
serialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_newtype_struct<T: ?Sized + Serialize>($/;"	P	implementation:SeRecord
serialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_newtype_struct<T: ?Sized>($/;"	f	module:content
serialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	f
serialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_newtype_struct<T: ?Sized>(self, _name: &'static str, value: &T) -> fmt::Result$/;"	P	implementation:Formatter
serialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	P	interface:Serializer
serialize_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_newtype_struct($/;"	f
serialize_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_newtype_variant<T: ?Sized + Serialize>($/;"	P	implementation:SeHeader
serialize_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_newtype_variant<T: ?Sized + Serialize>($/;"	P	implementation:SeRecord
serialize_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_newtype_variant<T: ?Sized>($/;"	f	module:content
serialize_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	f
serialize_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	implementation:Formatter
serialize_newtype_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	interface:Serializer
serialize_no_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn serialize_no_headers() {$/;"	f	module:tests
serialize_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_none(self) -> Result<Content, E> {$/;"	f	module:content
serialize_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_none(self) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_renamed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    serialize_renamed: bool,$/;"	m	struct:Name
serialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_seq($/;"	P	implementation:SeHeader
serialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_seq($/;"	P	implementation:SeRecord
serialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, E> {$/;"	f	module:content
serialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {$/;"	f
serialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq, fmt::Error> {$/;"	P	implementation:Formatter
serialize_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error>;$/;"	P	interface:Serializer
serialize_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_some<T: ?Sized + Serialize>($/;"	P	implementation:SeHeader
serialize_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_some<T: ?Sized + Serialize>($/;"	P	implementation:SeRecord
serialize_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Content, E>$/;"	f	module:content
serialize_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_some<T: ?Sized>(self, _value: &T) -> fmt::Result$/;"	P	implementation:Formatter
serialize_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
serialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_str(self, value: &str) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_str(self, value: &str) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_str(self, value: &str) -> Result<Content, E> {$/;"	f	module:content
serialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_struct($/;"	P	implementation:SeHeader
serialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_struct($/;"	P	implementation:SeRecord
serialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_struct($/;"	f	module:content
serialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_struct($/;"	f
serialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_struct($/;"	P	implementation:Formatter
serialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_struct($/;"	P	interface:Serializer
serialize_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_struct(params: &Parameters, fields: &[Field], cattrs: &attr::Container) -> Fragment/;"	f
serialize_struct_as_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_struct_as_map($/;"	f
serialize_struct_as_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_struct_as_struct($/;"	f
serialize_struct_tag_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_struct_tag_field(cattrs: &attr::Container, struct_trait: &StructTrait) -> TokenStre/;"	f
serialize_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_struct_variant($/;"	P	implementation:SeHeader
serialize_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_struct_variant($/;"	P	implementation:SeRecord
serialize_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_struct_variant($/;"	f	module:content
serialize_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_struct_variant($/;"	f
serialize_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_struct_variant($/;"	P	implementation:Formatter
serialize_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_struct_variant($/;"	P	interface:Serializer
serialize_struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_struct_variant<'a>($/;"	f
serialize_struct_variant_with_flatten	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_struct_variant_with_flatten<'a>($/;"	f
serialize_struct_visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_struct_visitor($/;"	f
serialize_tagged_newtype	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^pub fn serialize_tagged_newtype<S, T>($/;"	f
serialize_transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_tuple($/;"	P	implementation:SeHeader
serialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_tuple($/;"	P	implementation:SeRecord
serialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn serialize_tuple() {$/;"	f	module:tests
serialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, E> {$/;"	f	module:content
serialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> {$/;"	f
serialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple, fmt::Error> {$/;"	P	implementation:Formatter
serialize_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error>;$/;"	P	interface:Serializer
serialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:SeHeader
serialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:SeRecord
serialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_tuple_struct($/;"	f	module:content
serialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_tuple_struct($/;"	f
serialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:Formatter
serialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_tuple_struct($/;"	P	interface:Serializer
serialize_tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_tuple_struct($/;"	f
serialize_tuple_struct_visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_tuple_struct_visitor($/;"	f
serialize_tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:SeHeader
serialize_tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:SeRecord
serialize_tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_tuple_variant($/;"	f	module:content
serialize_tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_tuple_variant($/;"	f
serialize_tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:Formatter
serialize_tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_tuple_variant($/;"	P	interface:Serializer
serialize_tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_tuple_variant($/;"	f
serialize_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_u16(self, v: u16) -> Result<Content, E> {$/;"	f	module:content
serialize_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_u32(self, v: u32) -> Result<Content, E> {$/;"	f	module:content
serialize_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_u64(self, v: u64) -> Result<Content, E> {$/;"	f	module:content
serialize_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_u8(self, v: u8) -> Result<Content, E> {$/;"	f	module:content
serialize_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeHeader
serialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {$/;"	P	implementation:SeRecord
serialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_unit(self) -> Result<Content, E> {$/;"	f	module:content
serialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_unit(self) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_unit_struct($/;"	P	implementation:SeHeader
serialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_unit_struct($/;"	P	implementation:SeRecord
serialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_unit_struct(self, name: &'static str) -> Result<Content, E> {$/;"	f	module:content
serialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_unit_struct(cattrs: &attr::Container) -> Fragment {$/;"	f
serialize_unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_unit_variant($/;"	P	implementation:SeHeader
serialize_unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_unit_variant($/;"	P	implementation:SeRecord
serialize_unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_unit_variant($/;"	f	module:content
serialize_unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_unit_variant($/;"	f
serialize_unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/fmt.rs	/^    fn serialize_unit_variant($/;"	P	implementation:Formatter
serialize_unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_unit_variant($/;"	P	interface:Serializer
serialize_untagged_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_untagged_variant($/;"	f
serialize_upper	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^pub fn serialize_upper<S, T>(data: T, serializer: S) -> Result<S::Ok, S::Error>$/;"	f
serialize_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_value<T: ?Sized + Serialize>($/;"	P	implementation:SeHeader
serialize_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn serialize_value<T: ?Sized + Serialize>($/;"	P	implementation:SeRecord
serialize_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	f
serialize_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn serialize_variant($/;"	f
serialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
serialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
serialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
serialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
serialize_with_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn serialize_with_headers() {$/;"	f	module:tests
serializer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^mod serializer;$/;"	n
set	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn set<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:Attr
set_blocking_mode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn set_blocking_mode(&self, blocking: bool) -> HidResult<()> {$/;"	P	implementation:HidDevice
set_byte	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn set_byte(&mut self, byte: u64) -> &mut Position {$/;"	P	implementation:Position
set_byte_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn set_byte_headers(&mut self, headers: ByteRecord) {$/;"	P	implementation:Reader
set_domain_sep	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_domain_sep(out_len: usize, buf: &mut [u8]) {$/;"	f	method:Sha3::finalize
set_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn set_headers(&mut self, headers: StringRecord) {$/;"	P	implementation:Reader
set_headers_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    fn set_headers_impl($/;"	P	implementation:Reader
set_if_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn set_if_none(&mut self, value: T) {$/;"	P	implementation:Attr
set_lastblock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastblock(&mut self) {$/;"	P	implementation:Blake2b
set_lastblock	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastblock(&mut self) {$/;"	P	implementation:Blake2s
set_lastnode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastnode(&mut self) {$/;"	P	implementation:Blake2b
set_lastnode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastnode(&mut self) {$/;"	P	implementation:Blake2s
set_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub(crate) fn set_len(&mut self, len: usize) {$/;"	P	implementation:ByteRecord
set_line	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn set_line(&mut self, line: u64) -> &mut Position {$/;"	P	implementation:Position
set_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn set_one(&mut self) {$/;"	P	interface:One
set_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn set_one(&mut self) {$/;"	f
set_opt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn set_opt<A: ToTokens>(&mut self, obj: A, value: Option<T>) {$/;"	P	implementation:Attr
set_pad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_pad(offset: usize, buf: &mut [u8]) {$/;"	f	method:Sha3::finalize
set_position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn set_position(&mut self, pos: Option<Position>) {$/;"	P	implementation:ByteRecord
set_position	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn set_position(&mut self, pos: Option<Position>) {$/;"	P	implementation:StringRecord
set_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn set_record(&mut self, record: u64) -> &mut Position {$/;"	P	implementation:Position
set_rounds	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn set_rounds(&mut self, rounds: u8) {$/;"	P	implementation:JitterRng
set_stream	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn set_stream(&mut self, stream: u64) {$/;"	P	implementation:ChaChaRng
set_true	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    fn set_true<A: ToTokens>(&mut self, obj: A) {$/;"	P	implementation:BoolAttr
set_word_pos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn set_word_pos(&mut self, word_offset: u128) {$/;"	P	implementation:ChaChaRng
set_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn set_zero(&mut self) {$/;"	P	interface:Zero
set_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn set_zero(&mut self) {$/;"	f
setter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    setter: FieldLevelSetter,$/;"	m	struct:Field
setter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    setter: StructLevelSetter,$/;"	m	struct:Options
setter_enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn setter_enabled(&self) -> Option<bool> {$/;"	P	implementation:FieldLevelSetter
setter_enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn setter_enabled(&self) -> bool {$/;"	P	implementation:FieldWithDefaults
setter_ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn setter_ident(&self) -> syn::Ident {$/;"	P	implementation:FieldWithDefaults
setter_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn setter_into(&self) -> bool {$/;"	P	implementation:FieldWithDefaults
setter_prefix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn setter_prefix(&self) -> Option<&Ident> {$/;"	P	implementation:FieldWithDefaults
setter_strip_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn setter_strip_option(&self) -> bool {$/;"	P	implementation:FieldWithDefaults
setter_vis	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn setter_vis(&self) -> Visibility {$/;"	P	implementation:FieldWithDefaults
setup	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^fn setup(cost: u32, salt: &[u8], key: &[u8]) -> Blowfish {$/;"	f
setup_working_key_aesni_128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_128(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_192	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_192(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_256(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
sha1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^mod sha1;$/;"	n
sha1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha1;$/;"	n
sha1_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_10(bh: & mut Bencher) {$/;"	f	module:bench
sha1_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha1_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha1_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_block(bh: & mut Bencher) {$/;"	f	module:bench
sha1_digest_round_x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_digest_round_x4(abcd: u32x4, work: u32x4, i: i8) -> u32x4 {$/;"	f
sha1_first	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first(w0: u32x4) -> u32 {$/;"	f
sha1_first_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_add(e: u32, w0: u32x4) -> u32x4 {$/;"	f
sha1_first_half	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_half(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1_schedule_x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha1msg1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg1(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1msg2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg2(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1rnds4c	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4c(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4m	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4m(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4p	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4p(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha2;$/;"	n
sha256_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_10(bh: & mut Bencher) {$/;"	f	module:bench
sha256_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha256_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha256_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_block(bh: & mut Bencher) {$/;"	f	module:bench
sha256_digest_round_x2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_digest_round_x2(cdgh: u32x4, abef: u32x4, wk: u32x4) -> u32x4 {$/;"	f
sha256_format_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^fn sha256_format_output(input: &State) -> Output {$/;"	f
sha256_schedule_x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256load	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256load(v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256msg1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg1(v0: u32x4, v1: u32x4) -> u32x4 {$/;"	f
sha256msg2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg2(v4: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256swap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256swap(v0: u32x4) -> u32x4 {$/;"	f
sha3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha3;$/;"	n
sha3_224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_224() -> Sha3 {$/;"	P	implementation:Sha3
sha3_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_256() -> Sha3 {$/;"	P	implementation:Sha3
sha3_384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_384() -> Sha3 {$/;"	P	implementation:Sha3
sha3_512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_512() -> Sha3 {$/;"	P	implementation:Sha3
sha512_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_10(bh: & mut Bencher) {$/;"	f	module:bench
sha512_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha512_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha512_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_block(bh: & mut Bencher) {$/;"	f	module:bench
sha512_digest_round	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_digest_round(ae: u64x2, bf: u64x2, cg: u64x2, dh: u64x2, wk0: u64) -> u64x2 {$/;"	f
sha512_format_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^fn sha512_format_output(input: &State) -> Output {$/;"	f
sha512_schedule_x2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_schedule_x2(v0: u64x2, v1: u64x2, v4to5: u64x2, v7: u64x2) -> u64x2 {$/;"	f
sha512load	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha512load(v0: u64x2, v1: u64x2) -> u64x2 {$/;"	f
shake_128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_128() -> Sha3 {$/;"	P	implementation:Sha3
shake_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_256() -> Sha3 {$/;"	P	implementation:Sha3
shared_secret	/home/pme/src/rust/ctap/src/crypto.rs	/^    pub shared_secret: [u8; 32],$/;"	m	struct:SharedSecret
shared_secret	/home/pme/src/rust/ctap/src/lib.rs	/^    shared_secret: Option<crypto::SharedSecret>,$/;"	m	struct:FidoDevice
shift_row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> Self;$/;"	P	interface:AesBitValueOps
shift_row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u16 {$/;"	P	implementation:u16
shift_row	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u32x4 {$/;"	P	implementation:u32x4
shift_rows	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
shift_rows	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Self;$/;"	P	interface:AesOps
shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, amt: usize) -> u32x4 {$/;"	P	implementation:fake::u32x4
shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
should_retry	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub fn should_retry(self) -> bool {$/;"	P	implementation:ErrorKind
should_trim_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    fn should_trim_fields(&self) -> bool {$/;"	P	implementation:Trim
should_trim_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    fn should_trim_headers(&self) -> bool {$/;"	P	implementation:Trim
should_wait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub fn should_wait(self) -> bool {$/;"	P	implementation:ErrorKind
shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, amt: usize) -> u32x4 {$/;"	P	implementation:fake::u32x4
shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
shuffle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn shuffle<T>(&mut self, values: &mut [T]) {$/;"	P	interface:Rng
shuffle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn shuffle<R>(&mut self, rng: &mut R) where R: Rng + ?Sized$/;"	P	implementation:T
shuffle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn shuffle<R>(&mut self, rng: &mut R) where R: Rng + ?Sized;$/;"	P	interface:SliceRandom
sig_r_equals_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^        fn sig_r_equals_x($/;"	f	method:Algorithm::verify
sigma0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0(x: u64) -> u64 {$/;"	f	function:sha512_schedule_x2
sigma0x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0x4(x: u32x4) -> u32x4 {$/;"	f	function:sha256msg1
sigma1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma1(x: u64) -> u64 {$/;"	f	function:sha512_schedule_x2
sigma1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! sigma1 {$/;"	M	function:sha256msg2
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^pub mod sign;$/;"	n
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^    pub fn sign(&self, msg: &[u8]) -> signature::Signature {$/;"	P	implementation:KeyPair
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn sign($/;"	P	implementation:Key
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn sign($/;"	P	implementation:Key
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn sign(mut self) -> Signature {$/;"	P	implementation:SigningContext
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub fn sign(key: &SigningKey, data: &[u8]) -> Signature {$/;"	f
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    pub fn sign(mut self, tag_out: &mut Tag) {$/;"	P	implementation:SigningContext
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^pub fn sign(key: Key, msg: &[u8], tag: &mut Tag) {$/;"	f
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    pub fn sign($/;"	P	implementation:SigningState
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^    fn sign($/;"	P	interface:KeyPairImpl
sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub fn sign($/;"	f
sign_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn sign_($/;"	P	implementation:Key
sign_count	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub sign_count: u32,$/;"	m	struct:AuthenticatorData
sign_verify_cases	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn sign_verify_cases() {$/;"	f	module:tests
signature	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod signature;$/;"	n
signature	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn signature(message: &[u8], secret_key: &[u8]) -> [u8; 64] {$/;"	f
signature	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub signature: Vec<u8>,$/;"	m	struct:GetAssertionResponse
signature_ecdsa_sign_asn1_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn signature_ecdsa_sign_asn1_test() {$/;"	f	module:tests
signature_ecdsa_sign_fixed_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^    fn signature_ecdsa_sign_fixed_test() {$/;"	f	module:tests
signature_from_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature_impl.rs	/^pub fn signature_from_bytes(bytes: &[u8]) -> Signature {$/;"	f
signature_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod signature_impl;$/;"	n
signed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn signed() {$/;"	f	module:tests
signed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn signed() {$/;"	f	module:tests
signed_float_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^macro_rules! signed_float_impl {$/;"	M
signed_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^macro_rules! signed_impl {$/;"	M
signed_shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn signed_shl(self, n: u32) -> Self;$/;"	P	interface:PrimInt
signed_shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn signed_shr(self, n: u32) -> Self;$/;"	P	interface:PrimInt
signing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/mod.rs	/^pub mod signing;$/;"	n
signing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/mod.rs	/^pub mod signing;$/;"	n
signing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^pub mod signing;$/;"	n
signum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn signum(self) -> Self {$/;"	P	interface:FloatCore
signum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn signum(self) -> Self;$/;"	P	interface:Float
signum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn signum(self) -> Self;$/;"	P	interface:Real
signum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn signum(&self) -> Self {$/;"	f
signum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^    fn signum(&self) -> Self;$/;"	P	interface:Signed
signum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^pub fn signum<T: Signed>(value: T) -> T {$/;"	f
simd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod simd;$/;"	n
simd_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self {$/;"	P	implementation:u32x4
simd_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self;$/;"	P	interface:SimdExt
simd_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^macro_rules! simd_impl {$/;"	M
simd_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^macro_rules! simd_impl {$/;"	M
simd_wmul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^mod simd_wmul {$/;"	n
simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn simple() {$/;"	f	module:tests
simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn simple(&mut self) -> DecodeResult<Simple> {$/;"	P	implementation:Decoder
simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn simple(&mut self, ti: &TypeInfo) -> DecodeResult<Simple> {$/;"	P	implementation:Kernel
simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn simple() {$/;"	f	module:tests
simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn simple(&mut self, x: Simple) -> EncodeResult {$/;"	P	implementation:Encoder
simple_hex_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn simple_hex_seq() {$/;"	f	module:tests
simple_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn simple_seq() {$/;"	f	module:tests
sin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sin(self) -> Self {$/;"	P	implementation:f32
sin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sin(self) -> Self {$/;"	P	implementation:f64
sin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sin(self) -> Self;$/;"	P	interface:Float
sin	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn sin(self) -> Self;$/;"	P	interface:Real
sin_cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sin_cos(self) -> (Self, Self) {$/;"	P	implementation:f32
sin_cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sin_cos(self) -> (Self, Self) {$/;"	P	implementation:f64
sin_cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sin_cos(self) -> (Self, Self);$/;"	P	interface:Float
sin_cos	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn sin_cos(self) -> (Self, Self);$/;"	P	interface:Real
sinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sinh(self) -> Self {$/;"	P	implementation:f32
sinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sinh(self) -> Self {$/;"	P	implementation:f64
sinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sinh(self) -> Self;$/;"	P	interface:Float
sinh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn sinh(self) -> Self;$/;"	P	interface:Real
size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn size(rounds: u8) -> usize { 16 * ((rounds as usize) + 1) }$/;"	f
size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn size(&self) -> usize;$/;"	P	interface:FixedBuffer
size	/home/pme/src/rust/ctap/src/packet.rs	/^    pub size: u16,$/;"	m	struct:InitPacket
size_and_alignment	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^        fn size_and_alignment() {$/;"	f	module:tests::result
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:ByteRecordIter
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:StringRecordIter
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:BytesToHexChars
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:IndexVecIntoIter
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:IndexVecIter
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:test::ChunkHintedIterator
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:test::WindowHintedIterator
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:SliceChooseIter
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:MapAccess
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:SeqAccess
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn size_hint(&self) -> Option<usize> {$/;"	f	module:content
size_hint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^pub mod size_hint {$/;"	n
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn skip() {$/;"	f	module:tests
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn skip(&mut self) -> DecodeResult<()> {$/;"	P	implementation:Decoder
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/lib.rs	/^pub mod skip;$/;"	n
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/skip.rs	/^    fn skip(&mut self, n: u64) -> Result<()> {$/;"	P	implementation:A
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/skip.rs	/^    fn skip(&mut self, n: u64) -> Result<()>;$/;"	P	interface:Skip
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    skip: Option<bool>,$/;"	m	struct:FieldLevelSetter
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    skip: Option<bool>,$/;"	m	struct:StructLevelSetter
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    skip: bool,$/;"	m	struct:BuildFn
skip	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn skip(&mut self, num_bytes: usize) -> Result<(), EndOfInput> {$/;"	P	implementation:Reader
skip_and_get_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn skip_and_get_input(&mut self, num_bytes: usize)$/;"	P	implementation:Reader
skip_deserializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Field
skip_deserializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Variant
skip_deserializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Field
skip_deserializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Variant
skip_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStruct
skip_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStructVariant
skip_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    fn skip_field(&self, span: Span) -> Option<TokenStream> {$/;"	P	implementation:StructTrait
skip_serializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Field
skip_serializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Variant
skip_serializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Field
skip_serializing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Variant
skip_serializing_if	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn skip_serializing_if(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
skip_serializing_if	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    skip_serializing_if: Option<syn::ExprPath>,$/;"	m	struct:Field
skip_tags	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub skip_tags: bool,$/;"	m	struct:Config
skip_to_end	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn skip_to_end(&mut self) -> Input<'a> {$/;"	P	implementation:Reader
skip_until_break	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn skip_until_break(&mut self, ty: Type) -> DecodeResult<()> {$/;"	P	implementation:Decoder
skip_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn skip_value(&mut self, level: usize) -> DecodeResult<bool> {$/;"	P	implementation:Decoder
slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/lib.rs	/^pub mod slice;$/;"	n
slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    slice: &'a S,$/;"	m	struct:SliceChooseIter
slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^pub mod slice {$/;"	n
slice_as_array_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^macro_rules! slice_as_array_ref {$/;"	M
slice_as_array_ref_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^macro_rules! slice_as_array_ref_mut {$/;"	M
slice_lengths	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    macro_rules! slice_lengths {$/;"	M	module:test
slice_to_u8_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^unsafe fn slice_to_u8_mut<T: Copy>(slice: &mut [T]) -> &mut [u8] {$/;"	f
slide	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn slide(a: &[u8]) -> [i8; 256] {$/;"	P	implementation:GeP2
small	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mod.rs	/^mod small;$/;"	n
small_nonnegative_integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^pub fn small_nonnegative_integer(input: &mut untrusted::Reader) -> Result<u8, error::Unspecified/;"	f
sort	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    fn sort(numbers: &mut [f64]) {$/;"	f	module:test
sosemanuk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sosemanuk;$/;"	n
sosemanuk_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_10(bh: & mut Bencher) {$/;"	f	module:bench
sosemanuk_1k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_1k(bh: & mut Bencher) {$/;"	f	module:bench
sosemanuk_64k	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_64k(bh: & mut Bencher) {$/;"	f	module:bench
source	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn source(&self) -> Option<&(dyn StdError + 'static)> {$/;"	P	implementation:Error
source	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn source(&self) -> Option<&(dyn StdError + 'static)> {$/;"	P	implementation:FromUtf8Error
source	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    fn source(&self) -> Option<&(dyn StdError + 'static)> {$/;"	P	implementation:IntoInnerError
source	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/error.rs	/^    fn source(&self) -> Option<&(dyn Error + 'static)> {$/;"	P	implementation:HidError
source	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    source: Source,$/;"	m	struct:EntropyRng
source	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/std_error.rs	/^    fn source(&self) -> Option<&(Error + 'static)> {$/;"	P	interface:Error
spanned_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn spanned_tokens(s: &syn::LitStr) -> parse::Result<TokenStream> {$/;"	f
splat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn splat(scalar: Self) -> Self { scalar }$/;"	P	interface:FloatAsSIMD
split	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs2State<T>, Bs2State<T>) {$/;"	P	implementation:Bs4State
split	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs4State<T>, Bs4State<T>) {$/;"	P	implementation:Bs8State
split	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (T, T) {$/;"	P	implementation:Bs2State
split	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn split(self) -> (A, B) {$/;"	P	implementation:private::B
split	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn split(self) -> (Self::First, Self::Second);$/;"	P	interface:private::Pair
split_at	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn split_at<'a>(vec: &'a [u8], at: usize) -> (&'a [u8], &'a [u8]) {$/;"	f	method:BlockEngine::fast_mode
split_input	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn split_input() {$/;"	f	module:test
split_rs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    split_rs:$/;"	m	struct:Algorithm
split_rs_asn1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^fn split_rs_asn1<'a>($/;"	f
split_rs_fixed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^fn split_rs_fixed<'a>($/;"	f
split_with_de_lifetime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn split_with_de_lifetime($/;"	f
sq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
sq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Self;$/;"	P	interface:Gf2Ops
sq_scl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Bs4State<T> {$/;"	P	implementation:Bs4State
sq_scl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Self;$/;"	P	interface:Gf4Ops
sqr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn sqr(a: &Scalar<R>) -> Scalar<R> { unary_op(GFp_p256_scalar_sqr_mont, a) }$/;"	f	function:p256_scalar_inv_to_mont
sqr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn sqr(a: &Scalar<R>) -> Scalar<R> { binary_op(GFp_p384_scalar_mul_mont, a, a) }$/;"	f	function:p384_scalar_inv_to_mont
sqr_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul(a: &Elem<R>, squarings: usize, b: &Elem<R>) -> Elem<R> {$/;"	f	function:p256_elem_inv_squared
sqr_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul(a: &Scalar<R>, squarings: c::int, b: &Scalar<R>) -> Scalar<R> {$/;"	f	function:p256_scalar_inv_to_mont
sqr_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul(a: &Elem<R>, squarings: usize, b: &Elem<R>) -> Elem<R> {$/;"	f	function:p384_elem_inv_squared
sqr_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul(a: &Scalar<R>, squarings: usize, b: &Scalar<R>) -> Scalar<R> {$/;"	f	function:p384_scalar_inv_to_mont
sqr_mul_acc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul_acc(a: &mut Elem<R>, squarings: usize, b: &Elem<R>) {$/;"	f	function:p256_elem_inv_squared
sqr_mul_acc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul_acc(acc: &mut Scalar<R>, squarings: c::int, b: &Scalar<R>) {$/;"	f	function:p256_scalar_inv_to_mont
sqr_mul_acc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul_acc(a: &mut Elem<R>, squarings: usize, b: &Elem<R>) {$/;"	f	function:p384_elem_inv_squared
sqr_mul_acc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul_acc(acc: &mut Scalar<R>, squarings: usize, b: &Scalar<R>) {$/;"	f	function:p384_scalar_inv_to_mont
sqr_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mut(a: &mut Scalar<R>) { unary_op_from_binary_op_assign(GFp_p384_scalar_mul_mont, a);/;"	f	function:p384_scalar_inv_to_mont
sqrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sqrt(self) -> Self {$/;"	P	implementation:f32
sqrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sqrt(self) -> Self {$/;"	P	implementation:f64
sqrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn sqrt(self) -> Self;$/;"	P	interface:Float
sqrt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn sqrt(self) -> Self;$/;"	P	interface:Real
sqrt_2lambda	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    sqrt_2lambda: f64,$/;"	m	struct:Poisson
square	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square(&self) -> Fe {$/;"	P	implementation:Fe
square_and_double	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_and_double(&self) -> Fe {$/;"	P	implementation:Fe
square_by_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_by_mul() {$/;"	f	module:tests
standard_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, func: F);$/;"	P	interface:StandardPadding
standard_padding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, mut func: F) {$/;"	P	implementation:T
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    state: ReaderState,$/;"	m	struct:Reader
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    state: HeaderState,$/;"	m	struct:SeHeader
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    state: WriterState,$/;"	m	struct:Writer
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    state: State,$/;"	m	struct:Context
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    state: BlockEngineState$/;"	m	struct:BlockEngine
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    state  : ChaChaState,$/;"	m	struct:ChaCha20
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    state: Sha256,$/;"	m	struct:Pool
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    state: Gf128,$/;"	m	struct:Ghash
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    state: Gf128,$/;"	m	struct:GhashWithC
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    state: Md5State,$/;"	m	struct:Md5
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    state: [u8; 256]$/;"	m	struct:Rc4
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    state: SalsaState,$/;"	m	struct:Salsa20
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    state: Engine256State,$/;"	m	struct:Engine256
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    state: Engine512State,$/;"	m	struct:Engine512
state	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    state: [u8; B],  \/\/ B bytes$/;"	m	struct:Sha3
state_to_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! state_to_buffer {$/;"	M
std	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mod.rs	/^mod std;$/;"	n
std_dev	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    std_dev: f64,$/;"	m	struct:Normal
std_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/lib.rs	/^mod std_error;$/;"	n
stdtests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^mod stdtests {$/;"	n
step	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn step(&mut self) -> u32 {$/;"	P	implementation:Hc128
step_by	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod step_by;$/;"	n
step_up	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T> {$/;"	f
step_up	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T>;$/;"	P	interface:RangeExt
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn str() {$/;"	f	module:tests
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^const NEWTYPE_ONLY: &'static str = "This trait can only be derived for newtypes";$/;"	v
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^        &'static str,$/;"	v	module:tests
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust PBKDF2 format.";$/;"	v	function:pbkdf2_check
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust Scrypt format.";$/;"	v	function:scrypt_check
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    static TESTS: [(&'static str, &'static str); 18] = [$/;"	v	module:test
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs", "nanos"];$/;"	v	method:Duration::deserialize
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs_since_epoch", "nanos_since_epoch"];$/;"	v	method:SystemTime::deserialize
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Ok", "Err"];$/;"	v	function:deserialize
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Unbounded", "Included", "Excluded"];$/;"	v	function:deserialize
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    pub const FIELDS: &'static [&'static str] = &["start", "end"];$/;"	v	module:range
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a str {$/;"	c
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^impl<'a> Expected for &'a str {$/;"	c
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for &'a str$/;"	c
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a str$/;"	c
str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^impl Serialize for str {$/;"	c
string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/export.rs	/^mod string {$/;"	n
string_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^mod string_record;$/;"	n
string_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    string_record: result::Result<StringRecord, Utf8Error>,$/;"	m	struct:Headers
strip_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    strip_option: Option<bool>,$/;"	m	struct:FieldLevelSetter
strip_option	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    strip_option: Option<bool>,$/;"	m	struct:StructLevelSetter
strip_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, _: &mut R) -> bool { true }$/;"	P	implementation:EncPadding
strip_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, _: &mut R) -> bool { true }$/;"	P	implementation:NoPadding
strip_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, a: &mut R) -> bool { self.padding.strip_output(a) /;"	P	implementation:DecPadding
strip_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool {$/;"	P	implementation:PkcsPadding
strip_output	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool;$/;"	P	interface:PaddingProcessor
struct_from_ast	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^fn struct_from_ast<'a>($/;"	f
struct_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers() {$/;"	f	module:tests
struct_headers_inside_nested_tuple_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers_inside_nested_tuple_seq() {$/;"	f	module:tests
struct_headers_inside_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers_inside_seq() {$/;"	f	module:tests
struct_headers_inside_tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers_inside_tuple() {$/;"	f	module:tests
struct_headers_inside_tuple_scalar_after	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers_inside_tuple_scalar_after() {$/;"	f	module:tests
struct_headers_inside_tuple_scalar_before	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers_inside_tuple_scalar_before() {$/;"	f	module:tests
struct_headers_nested	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers_nested() {$/;"	f	module:tests
struct_headers_nested_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_headers_nested_seq() {$/;"	f	module:tests
struct_newtype	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_newtype() {$/;"	f	module:tests
struct_no_headers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_no_headers() {$/;"	f	module:tests
struct_pattern	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/pretend.rs	/^fn struct_pattern(fields: &[Field]) -> TokenStream {$/;"	f
struct_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn struct_unit() {$/;"	f	module:tests
struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn struct_variant<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn struct_variant<V>($/;"	P	interface:VariantAccess
struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn struct_variant<V>($/;"	f	module:private
struct_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn struct_variant<V>($/;"	f	module:content
style	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub style: Style,$/;"	m	struct:Variant
sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GeCached) -> GeP1P1 {$/;"	P	implementation:GeP3
sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	P	implementation:GeP3
sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn sub(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
sub_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
sub_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Self;$/;"	P	interface:AesOps
sub_command	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub sub_command: u8,$/;"	m	struct:ClientPinRequest
sub_word	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn sub_word(x: u32) -> u32 {$/;"	f
subkeys	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    subkeys: [u32; 100],$/;"	m	struct:Sosemanuk
suite_b	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/mod.rs	/^pub mod suite_b;$/;"	n
suite_b_curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/curve.rs	/^macro_rules! suite_b_curve {$/;"	M
supports_aesni	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn supports_aesni() -> bool {$/;"	f
swap_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn swap_bytes(self) -> Self;$/;"	P	interface:PrimInt
swap_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn swap_test() {$/;"	f	module:tests
swizzle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! swizzle{$/;"	M
symbol	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^mod symbol;$/;"	n
symm_enc_or_dec	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn symm_enc_or_dec<S: SynchronousStreamCipher, R: ReadBuffer, W: WriteBuffer>($/;"	f
symmetriccipher	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod symmetriccipher;$/;"	n
syn_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ctxt.rs	/^    pub fn syn_error(&self, err: syn::Error) {$/;"	P	implementation:Ctxt
syntax_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^    fn syntax_error() { test::from_file("src\/test_1_syntax_error_tests.txt", |_, _| Ok(())); }$/;"	f	module:tests
sysrand	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^mod sysrand {$/;"	n
sysrand_chunk	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^mod sysrand_chunk {$/;"	n
sysrand_or_urandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^mod sysrand_or_urandom {$/;"	n
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^        macro_rules! t {$/;"	M	function:tests::test_weighted_choice
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        macro_rules! t {$/;"	M	function:tests::test_float_assertions
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        macro_rules! t {$/;"	M	function:tests::test_floats
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^        macro_rules! t {$/;"	M	function:tests::test_integers
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    t: Elem<T>,$/;"	m	struct:ExtPoint
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    t: [u64; 2],$/;"	m	struct:Blake2b
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    t: [u32; 2],$/;"	m	struct:Blake2s
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t: Fe,$/;"	m	struct:GeP1P1
t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t: Fe,$/;"	m	struct:GeP3
t2d	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t2d: Fe,$/;"	m	struct:GeCached
table	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    table: &'static [u8; 16],$/;"	m	struct:BytesToHexChars
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn tag(&mut self) -> DecodeResult<Tag> {$/;"	P	implementation:Decoder
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn tag(&mut self, x: Tag) -> EncodeResult {$/;"	P	implementation:Encoder
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                tag:  Vec<u8>,$/;"	m	struct:test::TestVector
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    tag: Vec<u8>$/;"	m	struct:test::TestVector
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        pub tag: T,$/;"	m	struct:content::TaggedContent
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    tag: &'static str,$/;"	m	struct:TaggedSerializer
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn tag(&self) -> &TagType {$/;"	P	implementation:Container
tag	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    tag: TagType,$/;"	m	struct:Container
tag_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/mod.rs	/^    pub fn tag_len(&self) -> usize { TAG_LEN }$/;"	P	implementation:Algorithm
tag_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        tag_name: &'static str,$/;"	m	struct:content::TaggedContentVisitor
tagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn tagged() {$/;"	f	module:tests
tagged	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn tagged() {$/;"	f	module:tests
tagged_value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn tagged_value() {$/;"	f	module:tests
take_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub fn take_cause(&mut self) -> Option<Box<stdError + Send + Sync>> {$/;"	P	implementation:Error
take_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8] {$/;"	P	implementation:OwnedReadBuffer
take_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8] {$/;"	P	implementation:RefReadBuffer
take_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8];$/;"	P	interface:ReadBuffer
take_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8] {$/;"	P	implementation:RefWriteBuffer
take_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8];$/;"	P	interface:WriteBuffer
take_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<'a>(&'a mut self, count: usize) -> &'a mut [u8] {$/;"	P	implementation:OwnedWriteBuffer
take_next	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<>(&mut self, count: usize) -> &mut [u8] {$/;"	P	implementation:BorrowedWriteBuffer
take_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:BorrowedWriteBuffer
take_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:RefWriteBuffer
take_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer;$/;"	P	interface:WriteBuffer
take_read_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	P	implementation:OwnedWriteBuffer
take_remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &[u8] {$/;"	P	interface:ReadBuffer
take_remaining	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &mut [u8] {$/;"	P	interface:WriteBuffer
tan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn tan(self) -> Self {$/;"	P	implementation:f32
tan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn tan(self) -> Self {$/;"	P	implementation:f64
tan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn tan(self) -> Self;$/;"	P	interface:Float
tan	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn tan(self) -> Self;$/;"	P	interface:Real
tanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn tanh(self) -> Self {$/;"	P	implementation:f32
tanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn tanh(self) -> Self {$/;"	P	implementation:f64
tanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn tanh(self) -> Self;$/;"	P	interface:Float
tanh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn tanh(self) -> Self;$/;"	P	interface:Real
temp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    temp: Vec<u8>$/;"	m	struct:CbcDecryptorProcessor
temp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    temp: Vec<u8>$/;"	m	struct:CbcEncryptorProcessor
terminator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn terminator(&mut self, term: Terminator) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
terminator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn terminator(&mut self, term: Terminator) -> &mut WriterBuilder {$/;"	P	implementation:WriterBuilder
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/mod.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/digest_scalar.rs	/^    fn test() {$/;"	f	module:tests
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^pub mod test;$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test() {$/;"	f	module:tests
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn test() {$/;"	f	module:tests
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^mod test {$/;"	n
test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^mod test {$/;"	n
test	/home/pme/src/rust/ctap/src/error.rs	/^mod test {$/;"	n
test_1million_random_md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_1million_random_md5() {$/;"	f	module:tests
test_1million_random_ripemd160	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test_1million_random_ripemd160() {$/;"	f	module:tests
test_1million_random_sha1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn test_1million_random_sha1() {$/;"	f	module:tests
test_1million_random_sha256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha256() {$/;"	f	module:tests
test_1million_random_sha512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha512() {$/;"	f	module:tests
test_accumulator_correctness	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_accumulator_correctness() {$/;"	f	module:tests
test_add_bytes_to_bits_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_ok() {$/;"	f	module:test
test_add_bytes_to_bits_overflow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_overflow() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok2() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok3() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_overflow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_overflow2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow2() {$/;"	f	module:test
test_aes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^    pub fn test_aes() {$/;"	f	module:tests
test_aesni_128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_128() {$/;"	f	module:test
test_aesni_192	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_192() {$/;"	f	module:test
test_aesni_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_256() {$/;"	f	module:test
test_aessafe_128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128() {$/;"	f	module:test
test_aessafe_128_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128_x8() {$/;"	f	module:test
test_aessafe_192	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192() {$/;"	f	module:test
test_aessafe_192_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192_x8() {$/;"	f	module:test
test_aessafe_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256() {$/;"	f	module:test
test_aessafe_256_x8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256_x8() {$/;"	f	module:test
test_agreement_suite_b_ecdh_generate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^    fn test_agreement_suite_b_ecdh_generate() {$/;"	f	module:tests
test_alphanumeric	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn test_alphanumeric() {$/;"	f	module:tests
test_average	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^    fn test_average() {$/;"	f	module:test
test_badly_seeded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_badly_seeded() {$/;"	f	module:tests
test_bcrypt_hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_bcrypt_hash() {$/;"	f	module:test
test_beta	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_beta() {$/;"	f	module:test
test_beta_invalid_dof	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_beta_invalid_dof() {$/;"	f	module:test
test_big_endian_from_limbs_fewer_limbs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_big_endian_from_limbs_fewer_limbs() {$/;"	f	module:tests
test_big_endian_from_limbs_same_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_big_endian_from_limbs_same_length() {$/;"	f	module:tests
test_binomial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    fn test_binomial() {$/;"	f	module:test
test_binomial_end_points	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    fn test_binomial_end_points() {$/;"	f	module:test
test_binomial_invalid_lambda_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    fn test_binomial_invalid_lambda_neg() {$/;"	f	module:test
test_binomial_mean_and_variance	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/binomial.rs	/^    fn test_binomial_mean_and_variance<R: Rng>(n: u64, p: f64, rng: &mut R) {$/;"	f	module:test
test_blake2b_digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_digest() {$/;"	f	module:digest_tests
test_blake2b_mac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_mac() {$/;"	f	module:mac_tests
test_blake2s_digest	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_digest() {$/;"	f	module:digest_tests
test_blake2s_mac	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_mac() {$/;"	f	module:mac_tests
test_cauchy_invalid_scale_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    fn test_cauchy_invalid_scale_neg() {$/;"	f	module:test
test_cauchy_invalid_scale_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    fn test_cauchy_invalid_scale_zero() {$/;"	f	module:test
test_cauchy_mean	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    fn test_cauchy_mean() {$/;"	f	module:test
test_cauchy_median	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/cauchy.rs	/^    fn test_cauchy_median() {$/;"	f	module:test
test_chacha20_256_poly1305_boringssl_vectors_decrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_decrypt() {$/;"	f	module:test
test_chacha20_256_poly1305_boringssl_vectors_encrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_encrypt() {$/;"	f	module:test
test_chacha20_256_tls_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors() {$/;"	f	module:test
test_chacha20_256_tls_vectors_96_nonce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors_96_nonce() {$/;"	f	module:test
test_chars	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn test_chars() {$/;"	f	module:tests
test_chi_squared_invalid_dof	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_chi_squared_invalid_dof() {$/;"	f	module:test
test_chi_squared_large	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_chi_squared_large() {$/;"	f	module:test
test_chi_squared_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_chi_squared_one() {$/;"	f	module:test
test_chi_squared_small	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_chi_squared_small() {$/;"	f	module:test
test_clone_reseeding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn test_clone_reseeding() {$/;"	f	module:test
test_create_unseeded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_create_unseeded() {$/;"	f	module:tests
test_custom_uniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_custom_uniform() {$/;"	f	module:tests
test_decode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn test_decode() {$/;"	f	module:test
test_decode_to_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn test_decode_to_slice() {$/;"	f	module:test
test_digest_1million_random	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn test_digest_1million_random<D: Digest>(digest: &mut D, blocksize: usize, expected: &s/;"	f	module:test
test_dirichlet	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    fn test_dirichlet() {$/;"	f	module:test
test_dirichlet_invalid_alpha	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    fn test_dirichlet_invalid_alpha() {$/;"	f	module:test
test_dirichlet_invalid_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    fn test_dirichlet_invalid_length() {$/;"	f	module:test
test_dirichlet_with_param	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/dirichlet.rs	/^    fn test_dirichlet_with_param() {$/;"	f	module:test
test_display	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^    fn test_display() {$/;"	f	module:tests
test_distributions_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_distributions_iter() {$/;"	f	module:tests
test_durations	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_durations() {$/;"	f	module:tests
test_elem_exp_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn test_elem_exp_consttime() {$/;"	f	module:tests
test_elem_exp_vartime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn test_elem_exp_vartime() {$/;"	f	module:tests
test_elem_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn test_elem_mul() {$/;"	f	module:tests
test_elem_reduced	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn test_elem_reduced() {$/;"	f	module:tests
test_elem_reduced_once	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn test_elem_reduced_once() {$/;"	f	module:tests
test_elem_squared	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn test_elem_squared() {$/;"	f	module:tests
test_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    pub fn test_empty() {$/;"	f	module:test
test_enabled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^    macro_rules! test_enabled {$/;"	M	module:tests
test_encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn test_encode() {$/;"	f	module:test
test_encode_to_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn test_encode_to_slice() {$/;"	f	module:test
test_entropy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn test_entropy() {$/;"	f	module:test
test_exp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^    fn test_exp() {$/;"	f	module:test
test_exp_invalid_lambda_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^    fn test_exp_invalid_lambda_neg() {$/;"	f	module:test
test_exp_invalid_lambda_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^    fn test_exp_invalid_lambda_zero() {$/;"	f	module:test
test_f	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_f() {$/;"	f	module:test
test_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^    macro_rules! test_f32 {$/;"	M	module:tests
test_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^    macro_rules! test_f64 {$/;"	M	module:tests
test_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_fill() {$/;"	f	module:test
test_fill_bytes_default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_fill_bytes_default() {$/;"	f	module:test
test_fill_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_fill_empty() {$/;"	f	module:test
test_fixed_time_eq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn test_fixed_time_eq() {$/;"	f	module:test
test_float_assertions	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_float_assertions() {$/;"	f	module:tests
test_floats	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_floats() {$/;"	f	module:tests
test_force_reseed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^fn test_force_reseed(f: &mut Fortuna) {$/;"	f
test_from_hex_array	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    pub fn test_from_hex_array() {$/;"	f	module:test
test_from_hex_okay_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    pub fn test_from_hex_okay_bytes() {$/;"	f	module:test
test_from_hex_okay_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    pub fn test_from_hex_okay_str() {$/;"	f	module:test
test_from_hex_whitespace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    pub fn test_from_hex_whitespace() {$/;"	f	module:test
test_gen_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_gen_bool() {$/;"	f	module:test
test_gen_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn test_gen_iter() {$/;"	f	module:test
test_gen_range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_gen_range() {$/;"	f	module:test
test_gen_range_panic_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_gen_range_panic_int() {$/;"	f	module:test
test_gen_range_panic_usize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_gen_range_panic_usize() {$/;"	f	module:test
test_gen_ratio_average	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_gen_ratio_average() {$/;"	f	module:test
test_generator_correctness	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_generator_correctness() {$/;"	f	module:tests
test_hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f	module:digest_tests
test_hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f	module:digest_tests
test_hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hash	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hc128_ecrypt_set_2_vector_0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_2_vector_0() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_1() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_2() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_3() {$/;"	f	module:test
test_hkdf_rfc5869_sha1_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha1_vectors() {$/;"	f	module:test
test_hkdf_rfc5869_sha256_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha256_vectors() {$/;"	f	module:test
test_hmac_md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5() {$/;"	f	module:test
test_hmac_md5_incremental	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5_incremental() {$/;"	f	module:test
test_input_as_iterator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_as_iterator() {$/;"	f	module:tests
test_input_as_slice_less_safe	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_as_slice_less_safe() {$/;"	f	module:tests
test_input_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_from() {$/;"	f	module:tests
test_input_is_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_is_empty() {$/;"	f	module:tests
test_input_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_len() {$/;"	f	module:tests
test_input_read_all	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_read_all() {$/;"	f	module:tests
test_input_read_all_unconsume	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_read_all_unconsume() {$/;"	f	module:tests
test_integers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^    fn test_integers() {$/;"	f	module:tests
test_integers	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_integers() {$/;"	f	module:tests
test_invalid_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    pub fn test_invalid_char() {$/;"	f	module:test
test_invalid_length	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    pub fn test_invalid_length() {$/;"	f	module:test
test_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        fn test_iter<R: Rng + ?Sized, Iter: Iterator<Item=usize> + Clone>(r: &mut R, iter: Iter)/;"	f	function:test::test_iterator_choose
test_iterator_choose	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_iterator_choose() {$/;"	f	module:test
test_keccak_224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_224() {$/;"	f	module:tests
test_keccak_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_256() {$/;"	f	module:tests
test_keccak_384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_384() {$/;"	f	module:tests
test_keccak_512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_512() {$/;"	f	module:tests
test_limbs_are_even	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_limbs_are_even() {$/;"	f	module:tests
test_limbs_are_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_limbs_are_zero() {$/;"	f	module:tests
test_limbs_equal_limb	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_limbs_equal_limb() {$/;"	f	module:tests
test_limbs_less_than_limb_constant_time	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_limbs_less_than_limb_constant_time() {$/;"	f	module:tests
test_limbs_minimal_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_limbs_minimal_bits() {$/;"	f	module:tests
test_log_normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    fn test_log_normal() {$/;"	f	module:tests
test_log_normal_invalid_sd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    fn test_log_normal_invalid_sd() {$/;"	f	module:tests
test_md5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_md5() {$/;"	f	module:tests
test_misc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^    fn test_misc() {$/;"	f	module:tests
test_mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^        macro_rules! test_mul_add {$/;"	M	function:tests::mul_add_float
test_mul_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^        macro_rules! test_mul_add {$/;"	M	function:tests::mul_add_integer
test_nacl_vector	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_nacl_vector() {$/;"	f	module:test
test_new	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^    fn test_new() {$/;"	f	module:test
test_normal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    fn test_normal() {$/;"	f	module:tests
test_normal_invalid_sd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^    fn test_normal_invalid_sd() {$/;"	f	module:tests
test_openbsd_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_openbsd_vectors() {$/;"	f	module:test
test_openwall_test_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn test_openwall_test_vectors() {$/;"	f	module:test
test_overflowing_traits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs	/^fn test_overflowing_traits() {$/;"	f
test_parse_big_endian_and_pad_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^    fn test_parse_big_endian_and_pad_consttime() {$/;"	f	module:tests
test_partial_shuffle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_partial_shuffle() {$/;"	f	module:test
test_pbkdf2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2() {$/;"	f	module:test
test_pbkdf2_simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2_simple() {$/;"	f	module:test
test_poisson_10	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    fn test_poisson_10() {$/;"	f	module:test
test_poisson_15	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    fn test_poisson_15() {$/;"	f	module:test
test_poisson_invalid_lambda_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    fn test_poisson_invalid_lambda_neg() {$/;"	f	module:test
test_poisson_invalid_lambda_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/poisson.rs	/^    fn test_poisson_invalid_lambda_zero() {$/;"	f	module:test
test_poly1305	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    pub fn test_poly1305() {$/;"	f	module:tests
test_positive_integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    fn test_positive_integer() {$/;"	f	module:tests
test_pss_padding_encode	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn test_pss_padding_encode() {$/;"	f	module:test
test_pss_padding_verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn test_pss_padding_verify() {$/;"	f	module:test
test_random	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_random() {$/;"	f	module:test
test_read	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs	/^fn test_read() {$/;"	f
test_reader_rng_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn test_reader_rng_fill_bytes() {$/;"	f	module:test
test_reader_rng_insufficient_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn test_reader_rng_insufficient_bytes() {$/;"	f	module:test
test_reader_rng_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn test_reader_rng_u32() {$/;"	f	module:test
test_reader_rng_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn test_reader_rng_u64() {$/;"	f	module:test
test_reseeding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn test_reseeding() {$/;"	f	module:test
test_rng_boxed_trait	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_rng_boxed_trait() {$/;"	f	module:test
test_rng_trait_object	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn test_rng_trait_object() {$/;"	f	module:test
test_salsa20_128bit_ecrypt_set_1_vector_0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_128bit_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_salsa20_256bit_ecrypt_set_1_vector_0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_salsa20_256bit_nacl_vector_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_nacl_vector_2() {$/;"	f	module:test
test_sample	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/triangular.rs	/^    fn test_sample() {$/;"	f	module:test
test_sample_alg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn test_sample_alg() {$/;"	f	module:test
test_sample_boundaries	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/index.rs	/^    fn test_sample_boundaries() {$/;"	f	module:test
test_sample_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_sample_iter() {$/;"	f	module:test
test_sample_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_sample_slice() {$/;"	f	module:test
test_sample_slice_boundaries	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_sample_slice_boundaries() {$/;"	f	module:test
test_saturating_traits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs	/^fn test_saturating_traits() {$/;"	f
test_scrypt	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt() {$/;"	f	module:test
test_scrypt_simple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple(log_n: u8, r: u32, p: u32) {$/;"	f	module:test
test_scrypt_simple_compact	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_compact() {$/;"	f	module:test
test_scrypt_simple_expanded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_expanded() {$/;"	f	module:test
test_seed_from_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn test_seed_from_u64() {$/;"	f	module:test
test_seeded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_seeded() {$/;"	f	module:tests
test_sha224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha224() {$/;"	f	module:tests
test_sha256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha256() {$/;"	f	module:tests
test_sha384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha384() {$/;"	f	module:tests
test_sha3_224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_224() {$/;"	f	module:tests
test_sha3_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_256() {$/;"	f	module:tests
test_sha3_384	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_384() {$/;"	f	module:tests
test_sha3_512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_512() {$/;"	f	module:tests
test_sha3_shake128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake128() {$/;"	f	module:tests
test_sha3_shake256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake256() {$/;"	f	module:tests
test_sha512	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512() {$/;"	f	module:tests
test_sha512_224	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_224() {$/;"	f	module:tests
test_sha512_256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_256() {$/;"	f	module:tests
test_shuffle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_shuffle() {$/;"	f	module:test
test_signature_rsa_pkcs1_sign_output_buffer_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^    fn test_signature_rsa_pkcs1_sign_output_buffer_len() {$/;"	f	module:tests
test_slice_choose	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_slice_choose() {$/;"	f	module:test
test_small_nonnegative_integer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    fn test_small_nonnegative_integer() {$/;"	f	module:tests
test_sosemanuk_ecrypt_set_1_vector_0	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_2_vector_63	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_63() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_2_vector_90	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_90() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_3_vector_135	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_135() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_3_vector_207	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_207() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_6_vector_3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_6_vector_3() {$/;"	f	module:test
test_sosemanuk_vector128_test1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test1() {$/;"	f	module:test
test_sosemanuk_vector128_test2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test2() {$/;"	f	module:test
test_state_layout	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    pub fn test_state_layout() {$/;"	f	module:tests
test_stdrng_construction	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    fn test_stdrng_construction() {$/;"	f	module:test
test_system_random_lengths	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^    fn test_system_random_lengths() {$/;"	f	module:tests
test_t	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/gamma.rs	/^    fn test_t() {$/;"	f	module:test
test_thread_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^    fn test_thread_rng() {$/;"	f	module:test
test_timer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn test_timer(&mut self) -> Result<u8, rngs::TimerError> {$/;"	P	implementation:JitterRng
test_tls_vectors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_tls_vectors() {$/;"	f	module:test
test_to_hex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^    fn test_to_hex() {$/;"	f	module:test
test_too_big_event	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_too_big_event() {$/;"	f	module:tests
test_trivial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/bernoulli.rs	/^    fn test_trivial() {$/;"	f	module:test
test_uniform_bad_limits_equal_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_uniform_bad_limits_equal_int() {$/;"	f	module:tests
test_uniform_bad_limits_flipped_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_uniform_bad_limits_flipped_int() {$/;"	f	module:tests
test_uniform_from_std_range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_uniform_from_std_range() {$/;"	f	module:tests
test_uniform_from_std_range_inclusive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_uniform_from_std_range_inclusive() {$/;"	f	module:tests
test_uniform_good_limits_equal_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    fn test_uniform_good_limits_equal_int() {$/;"	f	module:tests
test_use_unseeded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_use_unseeded() {$/;"	f	module:tests
test_util	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^pub mod test_util {$/;"	n
test_weighted	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^    fn test_weighted() {$/;"	f	module:test
test_weighted_choice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_weighted_choice() {$/;"	f	module:tests
test_weighted_choice_no_items	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_weighted_choice_no_items() {$/;"	f	module:tests
test_weighted_choice_weight_overflows	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_weighted_choice_weight_overflows() {$/;"	f	module:tests
test_weighted_choice_zero_weight	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_weighted_choice_zero_weight() {$/;"	f	module:tests
test_weighted_clone_change_item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_weighted_clone_change_item() {$/;"	f	module:tests
test_weighted_clone_change_weight	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_weighted_clone_change_weight() {$/;"	f	module:tests
test_weighted_clone_initialization	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    fn test_weighted_clone_initialization() {$/;"	f	module:tests
test_weightedindex	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    fn test_weightedindex() {$/;"	f	module:test
test_wrapping_bounded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^    macro_rules! test_wrapping_bounded {$/;"	M	function:wrapping_bounded
test_wrapping_bounded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^    macro_rules! test_wrapping_bounded {$/;"	M	function:wrapping_bounded_i128
test_wrapping_from_str_radix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^    macro_rules! test_wrapping_from_str_radix {$/;"	M	function:wrapping_from_str_radix
test_wrapping_identities	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    macro_rules! test_wrapping_identities {$/;"	M	function:wrapping_identities
test_wrapping_traits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^fn test_wrapping_traits() {$/;"	f
test_xchacha20_basic	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_xchacha20_basic() {$/;"	f	module:test
test_xsalsa20_cryptopp	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_xsalsa20_cryptopp() {$/;"	f	module:test
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/internal.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/float.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/integer.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/pareto.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weibull.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/aes_gcm.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/aead/chacha20_poly1305.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bssl.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/chacha.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdh.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/digest_scalar.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/signing.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/public_key.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/lib.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/limb.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/signing.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/test.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^mod tests {$/;"	n
tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^mod tests {$/;"	n
tests128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests128() -> Vec<Test> {$/;"	f	module:test
tests192	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests192() -> Vec<Test> {$/;"	f	module:test
tests256	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests256() -> Vec<Test> {$/;"	f	module:test
text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn text() {$/;"	f	module:tests
text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn text(&mut self) -> DecodeResult<String> {$/;"	P	implementation:Decoder
text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn text() {$/;"	f	module:tests
text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn text(&mut self, x: &str) -> EncodeResult {$/;"	P	implementation:Encoder
text	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn text(&self) -> Option<&Text> {$/;"	P	implementation:Cursor
text_borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn text_borrow() {$/;"	f	module:tests
text_borrow	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn text_borrow(&mut self) -> DecodeResult<&str> {$/;"	P	implementation:Decoder
text_chunked	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn text_chunked(&self) -> Option<&LinkedList<String>> {$/;"	P	implementation:Cursor
text_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn text_iter(&mut self) -> DecodeResult<TextIter<R>> {$/;"	P	implementation:Decoder
text_iter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn text_iter<'r, I: Iterator<Item=&'r str>>(&mut self, iter: I) -> EncodeResult {$/;"	P	implementation:Encoder
text_plain	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn text_plain(&self) -> Option<&String> {$/;"	P	implementation:Cursor
this	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    this: syn::Path,$/;"	m	struct:Parameters
this	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    this: syn::Path,$/;"	m	struct:Parameters
thread	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mod.rs	/^#[cfg(feature="std")] pub(crate) mod thread;$/;"	n
thread_rng	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^pub fn thread_rng() -> ThreadRng {$/;"	f
threshold	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    threshold: i64,$/;"	m	struct:ReseedingCore
timer_stats	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    pub fn timer_stats(&mut self, var_rounds: bool) -> i64 {$/;"	P	implementation:JitterRng
times_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x(self) -> Gf128 {$/;"	P	implementation:Gf128
times_x_reduce	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x_reduce(self) -> Gf128 {$/;"	P	implementation:Gf128
to	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/types.rs	/^    pub fn to(&self) -> u64 {$/;"	P	implementation:Tag
to_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn to_be(self) -> Self;$/;"	P	interface:PrimInt
to_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn to_bits(self) -> Self::Bits;$/;"	P	interface:Float
to_bits	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^fn to_bits(x: u64) -> (u64, u64) {$/;"	f
to_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:Fe
to_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:GeP2
to_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:GeP3
to_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn to_bytes(&self) -> [u8; 16] {$/;"	P	implementation:Gf128
to_cached	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_cached(&self) -> GeCached {$/;"	P	implementation:GeP3
to_compile_errors	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^fn to_compile_errors(errors: Vec<syn::Error>) -> proc_macro2::TokenStream {$/;"	f
to_core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    fn to_core(self) -> csv_core::QuoteStyle {$/;"	P	implementation:QuoteStyle
to_core	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^    fn to_core(self) -> csv_core::Terminator {$/;"	P	implementation:Terminator
to_cose	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub fn to_cose(&self) -> CoseKey {$/;"	P	implementation:P256Key
to_degrees	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_degrees(self) -> Self {$/;"	P	implementation:f32
to_degrees	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_degrees(self) -> Self {$/;"	P	implementation:f64
to_degrees	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_degrees(self) -> Self {$/;"	P	interface:Float
to_degrees	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_degrees(self) -> Self;$/;"	P	interface:FloatCore
to_degrees	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn to_degrees(self) -> Self;$/;"	P	interface:Real
to_degrees_rounding	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_degrees_rounding() {$/;"	f	module:tests
to_elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn to_elem<L>(&self, l: &Modulus<L>) -> Elem<L, Unencoded>$/;"	P	implementation:Modulus
to_elem	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn to_elem<M>(&self, m: &Modulus<M>) -> Result<Elem<M, Unencoded>, error::Unspecified> {$/;"	P	implementation:Nonnegative
to_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_f32(&self) -> Option<f32> {$/;"	P	interface:ToPrimitive
to_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_f64(&self) -> Option<f64> {$/;"	P	interface:ToPrimitive
to_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_i128(&self) -> Option<i128> {$/;"	P	interface:ToPrimitive
to_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_i16(&self) -> Option<i16> {$/;"	P	interface:ToPrimitive
to_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_i32(&self) -> Option<i32> {$/;"	P	interface:ToPrimitive
to_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_i64(&self) -> Option<i64>;$/;"	P	interface:ToPrimitive
to_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_i8(&self) -> Option<i8> {$/;"	P	interface:ToPrimitive
to_isize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_isize(&self) -> Option<isize> {$/;"	P	interface:ToPrimitive
to_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn to_le(self) -> Self;$/;"	P	interface:PrimInt
to_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn to_le(&mut self) {}$/;"	P	implementation:u8
to_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn to_le(&mut self);$/;"	P	interface:AsByteSliceMut
to_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p256.rs	/^    fn to_mont(a: &Scalar) -> Scalar<R> {$/;"	f	function:p256_scalar_inv_to_mont
to_mont	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/p384.rs	/^    fn to_mont(a: &Scalar<Unencoded>) -> Scalar<R> {$/;"	f	function:p384_scalar_inv_to_mont
to_p2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p2(&self) -> GeP2 {$/;"	P	implementation:GeP1P1
to_p2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p2(&self) -> GeP2 {$/;"	P	implementation:GeP3
to_p3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p3(&self) -> GeP3 {$/;"	P	implementation:GeP1P1
to_primitive	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn to_primitive(input: TokenStream) -> TokenStream {$/;"	f
to_radians	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_radians(self) -> Self {$/;"	P	implementation:f32
to_radians	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_radians(self) -> Self {$/;"	P	implementation:f64
to_radians	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_radians(self) -> Self {$/;"	P	interface:Float
to_radians	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn to_radians(self) -> Self;$/;"	P	interface:FloatCore
to_radians	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn to_radians(self) -> Self;$/;"	P	interface:Real
to_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            fn to_str(self) -> String {$/;"	P	implementation:tests::full_buffer_should_not_flush_underlying::MarkWriteAndFlush
to_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeImplGenerics
to_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeTypeGenerics
to_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceImplGenerics
to_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceTypeGenerics
to_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Expr
to_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Match
to_tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Stmts
to_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_u128(&self) -> Option<u128> {$/;"	P	interface:ToPrimitive
to_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_u16(&self) -> Option<u16> {$/;"	P	interface:ToPrimitive
to_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_u32(&self) -> Option<u32> {$/;"	P	interface:ToPrimitive
to_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_u64(&self) -> Option<u64>;$/;"	P	interface:ToPrimitive
to_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_u8(&self) -> Option<u8> {$/;"	P	interface:ToPrimitive
to_usize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs	/^    fn to_usize(&self) -> Option<usize> {$/;"	P	interface:ToPrimitive
to_wire_format	/home/pme/src/rust/ctap/src/packet.rs	/^    pub fn to_wire_format(&self) -> u8 {$/;"	P	implementation:CtapCommand
tokens	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    tokens: TokenStream,$/;"	m	struct:Attr
too_long_input_test_block	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^        fn too_long_input_test_block(alg: &'static digest::Algorithm) {$/;"	f	module:tests::max_input
too_long_input_test_byte	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^        fn too_long_input_test_byte(alg: &'static digest::Algorithm) {$/;"	f	module:tests::max_input
too_many_chars	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn too_many_chars() {$/;"	f	module:tests
too_small	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    macro_rules! too_small {$/;"	M	module:test
top_byte_mask	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    top_byte_mask: u8,$/;"	m	struct:PSSMetrics
trace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/log_disabled.rs	/^macro_rules! trace {$/;"	M
trace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^#[cfg(not(feature = "log"))] macro_rules! trace { ($($x:tt)*) => () }$/;"	M
trailing_zeros	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn trailing_zeros(self) -> u32;$/;"	P	interface:PrimInt
transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Container
transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Field
transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Container
transparent	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Field
triangular	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod triangular;$/;"	n
trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn trim(&mut self) {$/;"	P	implementation:ByteRecord
trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    pub fn trim(&mut self, trim: Trim) -> &mut ReaderBuilder {$/;"	P	implementation:ReaderBuilder
trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    trim: Trim,$/;"	m	struct:ReaderBuilder
trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/reader.rs	/^    trim: Trim,$/;"	m	struct:ReaderState
trim	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn trim(&mut self) {$/;"	P	implementation:StringRecord
trim_back	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn trim_back() {$/;"	f	module:tests
trim_back	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn trim_back() {$/;"	f	module:tests
trim_both	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn trim_both() {$/;"	f	module:tests
trim_both	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn trim_both() {$/;"	f	module:tests
trim_does_not_panic_on_empty_records_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn trim_does_not_panic_on_empty_records_1() {$/;"	f	module:tests
trim_does_not_panic_on_empty_records_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn trim_does_not_panic_on_empty_records_1() {$/;"	f	module:tests
trim_does_not_panic_on_empty_records_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn trim_does_not_panic_on_empty_records_2() {$/;"	f	module:tests
trim_does_not_panic_on_empty_records_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn trim_does_not_panic_on_empty_records_2() {$/;"	f	module:tests
trim_does_not_panic_on_empty_records_3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn trim_does_not_panic_on_empty_records_3() {$/;"	f	module:tests
trim_does_not_panic_on_empty_records_3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn trim_does_not_panic_on_empty_records_3() {$/;"	f	module:tests
trim_front	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn trim_front() {$/;"	f	module:tests
trim_front	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn trim_front() {$/;"	f	module:tests
trim_whitespace_only	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn trim_whitespace_only() {$/;"	f	module:tests
trim_whitespace_only	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    fn trim_whitespace_only() {$/;"	f	module:tests
trunc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn trunc(self) -> Self {$/;"	P	implementation:f32
trunc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn trunc(self) -> Self {$/;"	P	implementation:f64
trunc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn trunc(self) -> Self {$/;"	P	interface:FloatCore
trunc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs	/^    fn trunc(self) -> Self;$/;"	P	interface:Float
trunc	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/real.rs	/^    fn trunc(self) -> Self;$/;"	P	interface:Real
truncate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn truncate(&mut self, n: usize) {$/;"	P	implementation:ByteRecord
truncate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn truncate(&mut self, n: usize) {$/;"	P	implementation:StringRecord
truncate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) { self.len -= amount; }$/;"	P	implementation:OwnedReadBuffer
truncate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) {$/;"	P	implementation:RefReadBuffer
truncate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize);$/;"	P	interface:ReadBuffer
try	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/lib.rs	/^mod try;$/;"	n
try_fill	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^    fn try_fill<T: AsByteSliceMut + ?Sized>(&mut self, dest: &mut T) -> Result<(), Error> {$/;"	P	interface:Rng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:ChaChaRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:EntropyRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:Hc128Rng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:Isaac64Rng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:IsaacRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:JitterRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:OsRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:ReadRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:StdRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:ThreadRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:XorShiftRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/deprecated.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	f
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:test::TestRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/read.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:ReadRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/adapter/reseeding.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	f
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/entropy.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:EntropyRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:StepRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/small.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:SmallRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/std.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:StdRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/thread.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:ThreadRng
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	f
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:Box
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {$/;"	P	implementation:R
try_fill_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs	/^    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error>;$/;"	P	interface:RngCore
try_float	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^fn try_float(s: &str) -> Option<f64> {$/;"	f
try_float_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^fn try_float_bytes(s: &[u8]) -> Option<f64> {$/;"	f
try_negative_integer64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^fn try_negative_integer64(s: &str) -> Option<i64> {$/;"	f
try_negative_integer64_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^fn try_negative_integer64_bytes(s: &[u8]) -> Option<i64> {$/;"	f
try_positive_integer64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^fn try_positive_integer64(s: &str) -> Option<u64> {$/;"	f
try_positive_integer64_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^fn try_positive_integer64_bytes(s: &[u8]) -> Option<u64> {$/;"	f
try_setter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn try_setter(&self) -> bool {$/;"	P	implementation:FieldWithDefaults
try_setter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    try_setter: Flag,$/;"	m	struct:Field
try_setter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    try_setter: Flag,$/;"	m	struct:Options
try_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/bits.rs	/^    pub fn try_sub(self, other: BitLength) -> Result<BitLength, error::Unspecified> {$/;"	P	implementation:BitLength
tuple	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn tuple() {$/;"	f	module:tests
tuple_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/other.rs	/^macro_rules! tuple_impl {$/;"	M
tuple_impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_impls	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn tuple_struct() {$/;"	f	module:tests
tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn tuple_variant<V: Visitor<'de>>($/;"	P	implementation:DeRecordWrap
tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn tuple_variant() {$/;"	f	module:tests
tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn tuple_variant<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:VariantAccess
tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn tuple_variant<V>(mut self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:private
tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:private
tuple_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
tutorial	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^pub mod tutorial;$/;"	n
twin_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^fn twin_mul($/;"	f
two_empty_records	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn two_empty_records() {$/;"	f	module:tests
two_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn two_fields() {$/;"	f	module:tests
two_fields_too_few	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn two_fields_too_few() {$/;"	f	module:tests
two_fields_too_many	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn two_fields_too_many() {$/;"	f	module:tests
ty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    ty: syn::Type,$/;"	m	struct:Field
ty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/ast.rs	/^    pub ty: &'a syn::Type,$/;"	m	struct:Field
type_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn type_from(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    type_from: Option<syn::Type>,$/;"	m	struct:Container
type_ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    type_ident: &'static str,$/;"	m	struct:TaggedSerializer
type_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn type_into(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    type_into: Option<syn::Type>,$/;"	m	struct:Container
type_len	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn type_len(&mut self, t: Type, x: u64) -> EncodeResult {$/;"	P	implementation:Encoder
type_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
type_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
type_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_of_item	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^fn type_of_item(cont: &Container) -> syn::Type {$/;"	f
type_try_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    pub fn type_try_from(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_try_from	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    type_try_from: Option<syn::Type>,$/;"	m	struct:Container
typeinfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn typeinfo(&mut self) -> DecodeResult<TypeInfo> {$/;"	P	implementation:Decoder
typeinfo	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn typeinfo(&mut self) -> DecodeResult<TypeInfo> {$/;"	P	implementation:Kernel
types	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/lib.rs	/^pub mod types;$/;"	n
u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u16(&mut self) -> DecodeResult<u16> {$/;"	P	implementation:Decoder
u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u16(&mut self, ti: &TypeInfo) -> DecodeResult<u16> {$/;"	P	implementation:Kernel
u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn u16(&mut self, x: u16) -> EncodeResult {$/;"	P	implementation:Encoder
u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn u16(&self) -> Option<u16> {$/;"	P	implementation:Cursor
u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u16 {$/;"	c
u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u32(&mut self) -> DecodeResult<u32> {$/;"	P	implementation:Decoder
u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u32(&mut self, ti: &TypeInfo) -> DecodeResult<u32> {$/;"	P	implementation:Kernel
u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn u32(&mut self, x: u32) -> EncodeResult {$/;"	P	implementation:Encoder
u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn u32(&self) -> Option<u32> {$/;"	P	implementation:Cursor
u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for u32$/;"	c
u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'de, E> IdentifierDeserializer<'de, E> for u32$/;"	c
u32_as_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn u32_as_u8<'a>(src: &'a [u32]) -> &'a [u8] {$/;"	f	module:slice
u32_as_u8_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn u32_as_u8_mut<'a>(src: &'a mut [u32]) -> &'a mut [u8] {$/;"	f	module:slice
u32x2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^macro_rules! u32x2 {$/;"	M
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u32x4 {$/;"	c
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl Default for u32x4 {$/;"	c
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl Not for u32x4 {$/;"	c
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl u32x4 {$/;"	c
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitAnd for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitOr for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitXor for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<u32x4> for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<usize> for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<u32x4> for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<usize> for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Sub for u32x4 {$/;"	c	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u32x4(pub u32, pub u32, pub u32, pub u32);$/;"	s	module:fake
u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^impl SimdExt for fake::u32x4 {$/;"	c
u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u64(&mut self) -> DecodeResult<u64> {$/;"	P	implementation:Decoder
u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u64(&mut self, ti: &TypeInfo) -> DecodeResult<u64> {$/;"	P	implementation:Kernel
u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn u64(&mut self, x: u64) -> EncodeResult {$/;"	P	implementation:Encoder
u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn u64(&self) -> Option<u64> {$/;"	P	implementation:Cursor
u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn u64(&self) -> Option<u64> {$/;"	P	implementation:Int
u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn u64(n: u64) -> Key {$/;"	P	implementation:Key
u64_as_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn u64_as_u32(src: &[u64]) -> &[u32] {$/;"	f	module:slice
u64_as_u32_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn u64_as_u32_mut(src: &mut [u64]) -> &mut [u32] {$/;"	f	module:slice
u64_as_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn u64_as_u8(src: &[u64]) -> &[u8] {$/;"	f	module:slice
u64_as_u8_mut	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^    pub fn u64_as_u8_mut(src: &mut [u64]) -> &mut [u8] {$/;"	f	module:slice
u64_from_usize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^pub fn u64_from_usize(x: usize) -> u64 { x as u64 }$/;"	f
u64x2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u64x2 {$/;"	c	module:fake
u64x2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u64x2(pub u64, pub u64);$/;"	s	module:fake
u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u8(&mut self) -> DecodeResult<u8> {$/;"	P	implementation:Decoder
u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn u8(&mut self, ti: &TypeInfo) -> DecodeResult<u8> {$/;"	P	implementation:Kernel
u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn u8(&mut self, x: u8) -> EncodeResult {$/;"	P	implementation:Encoder
u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn u8(&self) -> Option<u8> {$/;"	P	implementation:Cursor
u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^impl AsByteSliceMut for [u8] {$/;"	c
u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a [u8] {$/;"	c
u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a [u8]$/;"	c
uint_bigger_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn uint_bigger_buffer() {$/;"	f	module:test
uint_to	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/from_primitive.rs	/^macro_rules! uint_to {$/;"	M
un_bit_slice_1x128_with_u32x4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x128_with_u32x4(bs: Bs8State<u32x4>, output: &mut [u8]) {$/;"	f
un_bit_slice_1x16_with_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x16_with_u16(bs: &Bs8State<u16>, output: &mut [u8]) {$/;"	f
un_bit_slice_4x1_with_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x1_with_u16(bs: &Bs8State<u16>) -> u32 {$/;"	f
un_bit_slice_4x4_with_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x4_with_u16(bs: &Bs8State<u16>) -> (u32, u32, u32, u32) {$/;"	f
unary_op	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^pub fn unary_op<M, E: Encoding>($/;"	f
unary_op_assign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^pub fn unary_op_assign<M, E: Encoding>($/;"	f
unary_op_from_binary_op_assign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^pub fn unary_op_from_binary_op_assign<M, E: Encoding>($/;"	f
undefined	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn undefined() {$/;"	f	module:tests
undefined	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn undefined(&mut self) -> EncodeResult {$/;"	P	implementation:Encoder
unequal_records_bad	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn unequal_records_bad() {$/;"	f	module:tests
unequal_records_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn unequal_records_ok() {$/;"	f	module:tests
unexpected	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn unexpected(&self) -> Unexpected {$/;"	P	implementation:content::Content
unexpected_type	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^fn unexpected_type<A>(ti: &TypeInfo) -> DecodeResult<A> {$/;"	f
unextend_sign	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^fn unextend_sign(val: i64, nbytes: usize) -> u64 {$/;"	f
unextend_sign128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^fn unextend_sign128(val: i128, nbytes: usize) -> u128 {$/;"	f
ungroup	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/mod.rs	/^pub fn ungroup(mut ty: &Type) -> &Type {$/;"	f
uniform	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^pub mod uniform;$/;"	n
uniform_float_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^macro_rules! uniform_float_impl {$/;"	M
uniform_int_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^macro_rules! uniform_int_impl {$/;"	M
uniform_simd_int_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^macro_rules! uniform_simd_int_impl {$/;"	M
unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn unit() {$/;"	f	module:tests
unit_circle	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod unit_circle;$/;"	n
unit_only	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    pub fn unit_only<T, E>(t: T) -> (T, UnitOnly<E>) {$/;"	f	module:private
unit_sphere	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod unit_sphere;$/;"	n
unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn unit_variant(self) -> Result<(), Self::Error> {$/;"	P	implementation:DeRecordWrap
unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn unit_variant(self) -> Result<(), Self::Error>;$/;"	P	interface:VariantAccess
unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn unit_variant(mut self) -> Result<(), Self::Error> {$/;"	f	module:private
unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        fn unit_variant(self) -> Result<(), Self::Error> {$/;"	f	module:private
unit_variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn unit_variant(self) -> Result<(), E> {$/;"	f	module:content
unlock	/home/pme/src/rust/ctap/src/lib.rs	/^    pub fn unlock(&mut self, pin: &str) -> FidoResult<()> {$/;"	P	implementation:FidoDevice
unraw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^fn unraw(ident: &proc_macro2::Ident) -> String {$/;"	f
unraw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/dummy.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unraw	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    fn unsigned() {$/;"	f	module:tests
unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn unsigned(&mut self, first: u8) -> DecodeResult<u64> {$/;"	P	implementation:Kernel
unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    fn unsigned() {$/;"	f	module:tests
unsigned_shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn unsigned_shl(self, n: u32) -> Self;$/;"	P	interface:PrimInt
unsigned_shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs	/^    fn unsigned_shr(self, n: u32) -> Self;$/;"	P	interface:PrimInt
unsigned_wrapping_is_unsigned	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs	/^fn unsigned_wrapping_is_unsigned() {$/;"	f
unwrap_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^pub(crate) fn unwrap_key<'a>($/;"	f
unwrap_key_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^pub(crate) fn unwrap_key_<'a>($/;"	f
unwrap_pkcs8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/signing.rs	/^fn unwrap_pkcs8($/;"	f
up	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub up: bool,$/;"	m	struct:AuthenticatorData
up	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub up: bool,$/;"	m	struct:AuthenticatorOptions
up	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub up: bool,$/;"	m	struct:OptionsInfo
up	/home/pme/src/rust/ctap/src/lib.rs	/^    up: bool,$/;"	m	struct:FidoAssertionRequest
update	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    pub fn update(&mut self, data: &[u8]) {$/;"	P	implementation:Context
update	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn update(&mut self, data: &[u8]) { self.inner.update(data); }$/;"	P	implementation:SigningContext
update	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^    pub fn update(&mut self, mut input: &[u8]) {$/;"	P	implementation:SigningContext
update	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	P	implementation:Blake2b
update	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	P	implementation:Blake2s
update	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn update(&mut self) {$/;"	P	implementation:ChaCha20
update_history	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn update_history(in_hist: &mut [u8], out_hist: &mut [u8], last_in: &[u8], last_out: &[u8]) {$/;"	f
urandom	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rand.rs	/^mod urandom {$/;"	n
usage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub usage: c_ushort,$/;"	m	struct:HidDeviceInfo
usage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn usage(&self) -> u16 {$/;"	P	implementation:DeviceInfo
usage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub usage: u16,$/;"	m	struct:HidDeviceInfo
usage	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    usage: u16,$/;"	m	struct:DeviceInfo
usage	/home/pme/src/rust/ctap/src/hid_common.rs	/^    pub usage: u16,$/;"	m	struct:DeviceInfo
usage_page	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub usage_page: c_ushort,$/;"	m	struct:HidDeviceInfo
usage_page	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn usage_page(&self) -> u16 {$/;"	P	implementation:DeviceInfo
usage_page	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub usage_page: u16,$/;"	m	struct:HidDeviceInfo
usage_page	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    usage_page: u16,$/;"	m	struct:DeviceInfo
usage_page	/home/pme/src/rust/ctap/src/hid_common.rs	/^    pub usage_page: u16,$/;"	m	struct:DeviceInfo
use_parent_default	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    pub fn use_parent_default(&self) -> bool {$/;"	P	implementation:FieldWithDefaults
user	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub user: PublicKeyCredentialUserEntity<'a>,$/;"	m	struct:MakeCredentialRequest
user_display_name	/home/pme/src/rust/ctap/src/lib.rs	/^    user_display_name: Option<&'a str>,$/;"	m	struct:FidoCredentialRequest
user_icon_url	/home/pme/src/rust/ctap/src/lib.rs	/^    user_icon_url: Option<&'a str>,$/;"	m	struct:FidoCredentialRequest
user_id	/home/pme/src/rust/ctap/src/lib.rs	/^    user_id: &'a [u8],$/;"	m	struct:FidoCredentialRequest
user_name	/home/pme/src/rust/ctap/src/lib.rs	/^    user_name: Option<&'a str>,$/;"	m	struct:FidoCredentialRequest
utf8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^mod utf8;$/;"	n
utf8_clear_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn utf8_clear_ok() {$/;"	f	module:tests
utf8_error	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn utf8_error(&self) -> &Utf8Error {$/;"	P	implementation:FromUtf8Error
utf8_error_1	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn utf8_error_1() {$/;"	f	module:tests
utf8_error_2	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn utf8_error_2() {$/;"	f	module:tests
utf8_error_3	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn utf8_error_3() {$/;"	f	module:tests
utf8_error_4	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn utf8_error_4() {$/;"	f	module:tests
utf8_error_5	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn utf8_error_5() {$/;"	f	module:tests
utf8_error_6	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn utf8_error_6() {$/;"	f	module:tests
util	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod util;$/;"	n
util	/home/pme/src/rust/ctap/src/lib.rs	/^mod util;$/;"	n
utils	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-0.7.3/src/lib.rs	/^pub mod utils {$/;"	n
utils	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^mod utils;$/;"	n
uv	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub uv: Option<bool>,$/;"	m	struct:OptionsInfo
uv	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub uv: bool,$/;"	m	struct:AuthenticatorData
uv	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub uv: bool,$/;"	m	struct:AuthenticatorOptions
uv	/home/pme/src/rust/ctap/src/lib.rs	/^    uv: bool,$/;"	m	struct:FidoAssertionRequest
uv	/home/pme/src/rust/ctap/src/lib.rs	/^    uv: bool,$/;"	m	struct:FidoCredentialRequest
v	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/rngs/mock.rs	/^    v: u64,$/;"	m	struct:StepRng
val	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs	/^fn val(c: u8, idx: usize) -> Result<u8, FromHexError> {$/;"	f
valid_up_to	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    pub fn valid_up_to(&self) -> usize {$/;"	P	implementation:Utf8Error
valid_up_to	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    valid_up_to: usize,$/;"	m	struct:Utf8Error
validate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub(crate) fn validate(&self) -> result::Result<(), Utf8Error> {$/;"	P	implementation:ByteRecord
validate	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    validate: Option<Path>,$/;"	m	struct:BuildFn
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/decoder.rs	/^    pub fn value(&mut self) -> DecodeResult<Value> {$/;"	P	implementation:GenericDecoder
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn value(&mut self, x: &Value) -> EncodeResult {$/;"	P	implementation:GenericEncoder
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/lib.rs	/^pub mod value;$/;"	n
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    pub fn value(&self) -> Option<&Value> {$/;"	P	implementation:Cursor
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/value.rs	/^    value: Option<&'r Value>$/;"	m	struct:Cursor
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            value: i32,$/;"	m	struct:tests::struct_headers_inside_nested_tuple_seq::Bar
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            value: i32,$/;"	m	struct:tests::struct_headers_inside_tuple::Bar
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            value: i32,$/;"	m	struct:tests::struct_headers_nested::Nested
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/digest/mod.rs	/^    value: Output,$/;"	m	struct:Digest
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature_impl.rs	/^    value: [u8; MAX_LEN],$/;"	m	struct:Signature
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^pub mod value;$/;"	n
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    value: &'de [u8],$/;"	m	struct:BorrowedBytesDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    value: &'de str,$/;"	m	struct:BorrowedStrDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    value: Cow<'a, str>,$/;"	m	struct:CowStrDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    value: Option<Second<I::Item>>,$/;"	m	struct:MapDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    value: String,$/;"	m	struct:StringDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    value: u32,$/;"	m	struct:U32Deserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::EnumRefDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::MapRefDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::VariantRefDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::EnumDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::MapDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::VariantDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: PhantomData<Content<'de>>,$/;"	m	struct:content::ContentVisitor
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: PhantomData<TagOrContent<'de>>,$/;"	m	struct:content::TagOrContentVisitor
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        value: PhantomData<TaggedContent<'de, T>>,$/;"	m	struct:content::TaggedContentVisitor
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    value: &'a [u8],$/;"	m	struct:BytesDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    value: Option<T>,$/;"	m	struct:Attr
value	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    value: no_panic::Slice<'a>$/;"	m	struct:Input
value_stability	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_circle.rs	/^    fn value_stability() {$/;"	f	module:tests
value_stability	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/unit_sphere.rs	/^    fn value_stability() {$/;"	f	module:tests
values	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            values: Vec<i32>,$/;"	m	struct:tests::struct_headers_nested_seq::Foo
values	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/internals/attr.rs	/^    values: Vec<T>,$/;"	m	struct:VecAttr
variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn variant<V>(self) -> Result<(V, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        variant: &'a Content<'de>,$/;"	m	struct:content::EnumRefDeserializer
variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        variant: Content<'de>,$/;"	m	struct:content::EnumDeserializer
variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeStructVariant
variant	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeTupleVariant
variant_ident	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    variant_ident: &'static str,$/;"	m	struct:TaggedSerializer
variant_identifier	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! variant_identifier {$/;"	M
variant_index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeStructVariant
variant_index	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeTupleVariant
variant_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
variant_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
variant_name	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/ser.rs	/^    variant_name: &'static str,$/;"	m	struct:TaggedSerializer
variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn variant_seed<V: DeserializeSeed<'de>>($/;"	P	implementation:DeRecordWrap
variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn variant_seed<T>(mut self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>$/;"	f
variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^    fn variant_seed<T>(self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>$/;"	f
variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), E>$/;"	f	module:content
variant_seed	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	f	module:content
vendor_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/ffi.rs	/^    pub vendor_id: c_ushort,$/;"	m	struct:HidDeviceInfo
vendor_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn vendor_id(&self) -> u16 {$/;"	P	implementation:DeviceInfo
vendor_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub vendor_id: u16,$/;"	m	struct:HidDeviceInfo
vendor_id	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    vendor_id: u16,$/;"	m	struct:DeviceInfo
verification	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/mod.rs	/^pub mod verification;$/;"	n
verification	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/mod.rs	/^pub mod verification;$/;"	n
verification	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/mod.rs	/^pub mod verification;$/;"	n
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ed25519/verification.rs	/^    fn verify($/;"	P	implementation:EdDSAParameters
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ecdsa/verification.rs	/^    fn verify($/;"	P	implementation:Algorithm
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub fn verify($/;"	f
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pbkdf2.rs	/^pub fn verify($/;"	f
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/poly1305.rs	/^pub fn verify(key: Key, msg: &[u8], tag: &Tag)$/;"	f
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn verify($/;"	P	implementation:PKCS1
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn verify($/;"	P	implementation:PSS
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/padding.rs	/^    fn verify($/;"	P	interface:RSAVerification
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^    fn verify($/;"	P	implementation:RSAParameters
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^    fn verify($/;"	P	interface:VerificationAlgorithm
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/signature.rs	/^pub fn verify($/;"	f
verify	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn verify(message: &[u8], public_key: &[u8], signature: &[u8]) -> bool {$/;"	f
verify_affine_point_is_on_the_curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^fn verify_affine_point_is_on_the_curve($/;"	f
verify_affine_point_is_on_the_curve_scaled	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^fn verify_affine_point_is_on_the_curve_scaled($/;"	f
verify_inverses_consttime	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^pub fn verify_inverses_consttime<M>($/;"	f
verify_jacobian_point_is_on_the_curve	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/mod.rs	/^fn verify_jacobian_point_is_on_the_curve($/;"	f
verify_less_than	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn verify_less_than(&self, other: &Self) -> Result<(), error::Unspecified> {$/;"	P	implementation:Nonnegative
verify_less_than_modulus	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    pub fn verify_less_than_modulus<M>(&self, m: &Modulus<M>) -> Result<(), error::Unspecified> /;"	P	implementation:Nonnegative
verify_rsa	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/verification.rs	/^pub fn verify_rsa($/;"	f
verify_signature	/home/pme/src/rust/ctap/src/crypto.rs	/^pub fn verify_signature($/;"	f
verify_slices_are_equal	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/constant_time.rs	/^pub fn verify_slices_are_equal(a: &[u8], b: &[u8]) -> Result<(), error::Unspecified> {$/;"	f
verify_with_own_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^pub fn verify_with_own_key($/;"	f
versions	/home/pme/src/rust/ctap/src/cbor.rs	/^    pub versions: Vec<String>,$/;"	m	struct:GetInfoResponse
vis	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    vis: Visibility,$/;"	m	struct:Options
vis	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/options/darling_opts.rs	/^    vis: syn::Visibility,$/;"	m	struct:Field
visit_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_bool<E>(self, x: bool) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	implementation:BoolVisitor
visit_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^        fn visit_borrowed_str<E>(self, data: &'de str) -> Result<Self::Value, E>$/;"	f	function:deserialize
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_borrowed_str<E>(self, v: &'de str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_byte_buf	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_bytes<E>(self, bytes: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_char	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_content_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn visit_content_map<'de, V, E>($/;"	f	module:content
visit_content_map_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn visit_content_map_ref<'a, 'de, V, E>($/;"	f	module:content
visit_content_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn visit_content_seq<'de, V, E>(content: Vec<Content<'de>>, visitor: V) -> Result<V::Value, /;"	f	module:content
visit_content_seq_ref	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^    fn visit_content_seq_ref<'a, 'de, V, E>($/;"	f	module:content
visit_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:OsStringVisitor
visit_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_enum<V>(self, _visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_enum	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_enum<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_f32<E>(self, v: f32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_f64<E>(self, x: f64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_f64<E>(self, v: f64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^        fn visit_field(&mut self, field: &'ast syn::Field) {$/;"	P	implementation:with_bound::FindTyParams
visit_float_method	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! visit_float_method {$/;"	M
visit_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_i16<E>(self, v: i16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_i32<E>(self, v: i32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_i64<E>(self, x: i64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_i64<E>(self, v: i64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_i8<E>(self, v: i8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_integer_method	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^macro_rules! visit_integer_method {$/;"	M
visit_macro	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^        fn visit_macro(&mut self, _mac: &'ast syn::Macro) {}$/;"	P	implementation:with_bound::FindTyParams
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_map<A>(self, map: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_map<M>(self, mut access: M) -> Result<(), M::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>$/;"	f	module:content
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_map	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_map<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_newtype_struct	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	f
visit_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_none<E>(self) -> Result<(), E>$/;"	P	implementation:content::UntaggedUnitVisitor
visit_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_none	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_path	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^        fn visit_path(&mut self, path: &'ast syn::Path) {$/;"	P	implementation:with_bound::FindTyParams
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize_in_place
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_seq<A>(self, _: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:ArrayVisitor
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:CStringVisitor
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_seq<S>(self, _: S) -> Result<(), S::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>$/;"	f	module:content
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_seq<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_seq	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_seq<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
visit_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_some	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/serde.rs	/^        fn visit_str<E>(self, data: &str) -> Result<Self::Value, E>$/;"	f	function:deserialize
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:IpAddr::deserialize::IpAddrVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:SocketAddr::deserialize::SocketAddrVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagContentOtherFieldVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagOrContentFieldVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_str	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_u16<E>(self, v: u16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_u32<E>(self, v: u32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_u64<E>(self, x: u64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^                    fn visit_u64<E>(self, value: u64) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_u64<E>(self, v: u64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_u8<E>(self, v: u8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/ignored_any.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:PhantomDataVisitor
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:UnitVisitor
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	f
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/mod.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_unit<E>(self) -> Result<(), E>$/;"	P	implementation:content::UntaggedUnitVisitor
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_unit	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        visitor: V,$/;"	m	struct:private::SeedStructVariant
visitor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/de/value.rs	/^        visitor: V,$/;"	m	struct:private::SeedTupleVariant
void	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.117/src/ser/impossible.rs	/^    void: Void,$/;"	m	struct:Impossible
vtable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    vtable: *const VTable,$/;"	m	struct:Inner
vtable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    vtable: *const VTable,$/;"	m	struct:InnerHeader
vtable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/error/error_impl_small.rs	/^    vtable: *const VTable,$/;"	m	struct:TraitObject
vtable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    vtable: *const VTable,$/;"	m	struct:Inner
vtable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    vtable: *const VTable,$/;"	m	struct:InnerHeader
vtable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/small_error.rs	/^    vtable: *const VTable,$/;"	m	struct:TraitObject
warn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_builder-0.9.0/src/log_disabled.rs	/^macro_rules! warn {$/;"	M
warn	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs	/^#[cfg(not(feature = "log"))] macro_rules! warn { ($($x:tt)*) => () }$/;"	M
wchar_to_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^unsafe fn wchar_to_string(wstr: *const wchar_t) -> WcharString {$/;"	f
weibull	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod weibull;$/;"	n
weight	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    pub weight: u32,$/;"	m	struct:Weighted
weight_distribution	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/weighted.rs	/^    weight_distribution: X::Sampler,$/;"	m	struct:WeightedIndex
weight_range	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^    weight_range: Uniform<u32>,$/;"	m	struct:WeightedChoice
weighted	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="alloc")] mod weighted;$/;"	n
which	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        which: u32$/;"	m	struct:tests::CurveGen
whirlpool	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod whirlpool;$/;"	n
whirlpool_1000000a_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_1000000a_test() {$/;"	f	module:test
whirlpool_static_test	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_static_test() {$/;"	f	module:test
width	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn width(&self) -> Width<M> { self.limbs.width() }$/;"	P	implementation:Modulus
width	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn width(&self) -> Width<M> {$/;"	P	implementation:BoxedLimbs
wikipedia_tests	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn wikipedia_tests() {$/;"	f	module:test
win32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/c.rs	/^pub mod win32 {$/;"	n
window_size	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/seq/mod.rs	/^        window_size: usize,$/;"	m	struct:test::WindowHintedIterator
with_backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/mod.rs	/^macro_rules! with_backtrace { ($($i:item)*) => ($(#[cfg(all(feature = "backtrace", feature = "st/;"	M
with_bad_i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    fn with_bad_i<F, R>(value: &[u8], f: F)$/;"	f	module:tests
with_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^pub fn with_bound($/;"	f
with_capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    fn with_capacity(capacity: usize) -> Bounds {$/;"	P	implementation:Bounds
with_capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/byte_record.rs	/^    pub fn with_capacity(buffer: usize, fields: usize) -> ByteRecord {$/;"	P	implementation:ByteRecord
with_capacity	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/string_record.rs	/^    pub fn with_capacity(buffer: usize, fields: usize) -> StringRecord {$/;"	P	implementation:StringRecord
with_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub fn with_cause<E>(kind: ErrorKind, msg: &'static str, _cause: E) -> Self {$/;"	P	implementation:Error
with_cause	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs	/^    pub fn with_cause<E>(kind: ErrorKind, msg: &'static str, cause: E) -> Self$/;"	P	implementation:Error
with_context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^    fn with_context<F, D>(self, f: F) -> Result<T, Context<D>>$/;"	P	interface:ResultExt
with_context	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/result_ext.rs	/^    fn with_context<F, D>(self, f: F) -> Result<T, Context<D>>$/;"	f
with_good_i	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/der.rs	/^    fn with_good_i<F, R>(value: &[u8], f: F)$/;"	f	module:tests
with_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn with_header() {$/;"	f	module:tests
with_header_empty	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn with_header_empty() {$/;"	f	module:tests
with_header_empty_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn with_header_empty_ok() {$/;"	f	module:tests
with_header_missing	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn with_header_missing() {$/;"	f	module:tests
with_header_missing_ok	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn with_header_missing_ok() {$/;"	f	module:tests
with_header_no_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn with_header_no_fields() {$/;"	f	module:tests
with_header_unknown	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn with_header_unknown() {$/;"	f	module:tests
with_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    pub fn with_key(signing_key: &SigningKey) -> SigningContext {$/;"	P	implementation:SigningContext
with_lifetime_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^pub fn with_lifetime_bound(generics: &syn::Generics, lifetime: &str) -> syn::Generics {$/;"	f
with_self_bound	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^pub fn with_self_bound($/;"	f
with_std	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^macro_rules! with_std { ($($i:item)*) => ($(#[cfg(feature = "std")]$i)*) }$/;"	M
with_where_predicates	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^pub fn with_where_predicates($/;"	f
with_where_predicates_from_fields	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^pub fn with_where_predicates_from_fields($/;"	f
with_where_predicates_from_variants	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^pub fn with_where_predicates_from_variants($/;"	f
without_backtrace	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/backtrace/mod.rs	/^macro_rules! without_backtrace { ($($i:item)*) => ($(#[cfg(not(all(feature = "backtrace", featur/;"	M
without_defaults	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/bound.rs	/^pub fn without_defaults(generics: &syn::Generics) -> syn::Generics {$/;"	f
without_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^    fn without_header() {$/;"	f	module:tests
without_std	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.8/src/lib.rs	/^macro_rules! without_std { ($($i:item)*) => ($(#[cfg(not(feature = "std"))]$i)*) }$/;"	M
wmul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    fn wmul(self, x: RHS) -> Self::Output;$/;"	P	interface:WideningMultiply
wmul_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^macro_rules! wmul_impl {$/;"	M
wmul_impl_16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^    macro_rules! wmul_impl_16 {$/;"	M	module:simd_wmul
wmul_impl_large	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^macro_rules! wmul_impl_large {$/;"	M
wmul_impl_usize	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^macro_rules! wmul_impl_usize {$/;"	M
wrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> DecPadding<X> { DecPadding { padding: p } }$/;"	P	implementation:DecPadding
wrap	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> EncPadding<X> { EncPadding { padding: p } }$/;"	P	implementation:EncPadding
wrap_deserialize_field_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn wrap_deserialize_field_with($/;"	f
wrap_deserialize_variant_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn wrap_deserialize_variant_with($/;"	f
wrap_deserialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/de.rs	/^fn wrap_deserialize_with($/;"	f
wrap_in_const	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/dummy.rs	/^pub fn wrap_in_const($/;"	f
wrap_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^pub(crate) fn wrap_key(template: &Template, private_key: &[u8], public_key: &[u8]) -> Document {$/;"	f
wrap_key_	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/pkcs8.rs	/^pub(crate) fn wrap_key_($/;"	f
wrap_serialize_field_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn wrap_serialize_field_with($/;"	f
wrap_serialize_variant_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn wrap_serialize_variant_with($/;"	f
wrap_serialize_with	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.117/src/ser.rs	/^fn wrap_serialize_with($/;"	f
wrapped	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs	/^    wrapped: SigningKey,$/;"	m	struct:VerificationKey
wrapping	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs	/^pub mod wrapping;$/;"	n
wrapping_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_add(&self, v: &Self) -> Self {$/;"	f
wrapping_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_add(&self, v: &Self) -> Self;$/;"	P	interface:WrappingAdd
wrapping_add	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_add<T: WrappingAdd>(a: T, b: T) -> T {$/;"	f	function:test_wrapping_traits
wrapping_bounded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^fn wrapping_bounded() {$/;"	f
wrapping_bounded_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^fn wrapping_bounded_i128() {$/;"	f
wrapping_from_str_radix	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn wrapping_from_str_radix() {$/;"	f
wrapping_identities	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^fn wrapping_identities() {$/;"	f
wrapping_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^macro_rules! wrapping_impl {$/;"	M
wrapping_is_bounded	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs	/^fn wrapping_is_bounded() {$/;"	f
wrapping_is_num	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs	/^fn wrapping_is_num() {$/;"	f
wrapping_is_one	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^fn wrapping_is_one() {$/;"	f
wrapping_is_wrappingadd	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^fn wrapping_is_wrappingadd() {$/;"	f
wrapping_is_wrappingmul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^fn wrapping_is_wrappingmul() {$/;"	f
wrapping_is_wrappingshl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^fn wrapping_is_wrappingshl() {$/;"	f
wrapping_is_wrappingshr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^fn wrapping_is_wrappingshr() {$/;"	f
wrapping_is_wrappingsub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^fn wrapping_is_wrappingsub() {$/;"	f
wrapping_is_zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^fn wrapping_is_zero() {$/;"	f
wrapping_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_mul(&self, v: &Self) -> Self {$/;"	f
wrapping_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_mul(&self, v: &Self) -> Self;$/;"	P	interface:WrappingMul
wrapping_mul	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_mul<T: WrappingMul>(a: T, b: T) -> T {$/;"	f	function:test_wrapping_traits
wrapping_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_neg(&self) -> Self {$/;"	f
wrapping_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_neg(&self) -> Self;$/;"	P	interface:WrappingNeg
wrapping_neg	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_neg<T: WrappingNeg>(a: T) -> T {$/;"	f	function:test_wrapping_traits
wrapping_rotate_left_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/polyfill.rs	/^pub fn wrapping_rotate_left_u32(x: core::num::Wrapping<u32>, n: u32) -> core::num::Wrapping<u32>/;"	f
wrapping_shift_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^macro_rules! wrapping_shift_impl {$/;"	M
wrapping_shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_shl(&self, rhs: u32) -> Self {$/;"	f
wrapping_shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_shl(&self, rhs: u32) -> Self;$/;"	P	interface:WrappingShl
wrapping_shl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_shl<T: WrappingShl>(a: T, b: u32) -> T {$/;"	f	function:test_wrapping_traits
wrapping_shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_shr(&self, rhs: u32) -> Self {$/;"	f
wrapping_shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_shr(&self, rhs: u32) -> Self;$/;"	P	interface:WrappingShr
wrapping_shr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_shr<T: WrappingShr>(a: T, b: u32) -> T {$/;"	f	function:test_wrapping_traits
wrapping_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_sub(&self, v: &Self) -> Self {$/;"	f
wrapping_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_sub(&self, v: &Self) -> Self;$/;"	P	interface:WrappingSub
wrapping_sub	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^    fn wrapping_sub<T: WrappingSub>(a: T, b: T) -> T {$/;"	f	function:test_wrapping_traits
wrapping_unary_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs	/^macro_rules! wrapping_unary_impl {$/;"	M
writable	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn writable(&mut self) -> &mut [u8] {$/;"	P	implementation:Buffer
write	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^            fn write(&mut self, data: &[u8]) -> io::Result<usize> {$/;"	P	implementation:tests::full_buffer_should_not_flush_underlying::MarkWriteAndFlush
write	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-1.2.3/src/lib.rs	/^    pub fn write(&self, data: &[u8]) -> HidResult<usize> {$/;"	P	implementation:HidDevice
write_byte_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn write_byte_record(&mut self, record: &ByteRecord) -> Result<()> {$/;"	P	implementation:Writer
write_cont_packet	/home/pme/src/rust/ctap/src/packet.rs	/^pub fn write_cont_packet<W: Write>($/;"	f
write_delimiter	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn write_delimiter(&mut self) -> Result<()> {$/;"	P	implementation:Writer
write_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_f32<T: ByteOrder>(&mut self, n: f32) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_f32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_f32(buf: &mut [u8], n: f32) {$/;"	P	interface:ByteOrder
write_f32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_f32_into(src: &[f32], dst: &mut [u8]) {$/;"	P	interface:ByteOrder
write_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_f64<T: ByteOrder>(&mut self, n: f64) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_f64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_f64(buf: &mut [u8], n: f64) {$/;"	P	interface:ByteOrder
write_f64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_f64_into(src: &[f64], dst: &mut [u8]) {$/;"	P	interface:ByteOrder
write_field	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn write_field<T: AsRef<[u8]>>(&mut self, field: T) -> Result<()> {$/;"	P	implementation:Writer
write_field_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn write_field_impl<T: AsRef<[u8]>>(&mut self, field: T) -> Result<()> {$/;"	P	implementation:Writer
write_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_i128<T: ByteOrder>(&mut self, n: i128) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_i128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i128(buf: &mut [u8], n: i128) {$/;"	P	interface:ByteOrder
write_i128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i128_into(src: &[i128], dst: &mut [u8]) {$/;"	P	interface:ByteOrder
write_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_i16<T: ByteOrder>(&mut self, n: i16) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_i16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i16(buf: &mut [u8], n: i16) {$/;"	P	interface:ByteOrder
write_i16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i16_into(src: &[i16], dst: &mut [u8]) {$/;"	P	interface:ByteOrder
write_i24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_i24<T: ByteOrder>(&mut self, n: i32) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_i24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i24(buf: &mut [u8], n: i32) {$/;"	P	interface:ByteOrder
write_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_i32<T: ByteOrder>(&mut self, n: i32) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_i32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i32(buf: &mut [u8], n: i32) {$/;"	P	interface:ByteOrder
write_i32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i32_into(src: &[i32], dst: &mut [u8]) {$/;"	P	interface:ByteOrder
write_i48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_i48<T: ByteOrder>(&mut self, n: i64) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_i48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i48(buf: &mut [u8], n: i64) {$/;"	P	interface:ByteOrder
write_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_i64<T: ByteOrder>(&mut self, n: i64) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_i64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i64(buf: &mut [u8], n: i64) {$/;"	P	interface:ByteOrder
write_i64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i64_into(src: &[i64], dst: &mut [u8]) {$/;"	P	interface:ByteOrder
write_i8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_i8(&mut self, n: i8) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_i8_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_i8_into(src: &[i8], dst: &mut [u8]) {$/;"	P	interface:ByteOrder
write_init_packet	/home/pme/src/rust/ctap/src/packet.rs	/^pub fn write_init_packet<W: Write>($/;"	f
write_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_int<T: ByteOrder>($/;"	P	interface:WriteBytesExt
write_int	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_int(buf: &mut [u8], n: i64, nbytes: usize) {$/;"	P	interface:ByteOrder
write_int128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_int128<T: ByteOrder>($/;"	P	interface:WriteBytesExt
write_int128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_int128(buf: &mut [u8], n: i128, nbytes: usize) {$/;"	P	interface:ByteOrder
write_num_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^macro_rules! write_num_bytes {$/;"	M
write_record	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    pub fn write_record<I, T>(&mut self, record: I) -> Result<()>$/;"	P	implementation:Writer
write_row_major	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn write_row_major(block: u32x4, output: &mut [u8]) {$/;"	f	function:un_bit_slice_1x128_with_u32x4
write_slice	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^macro_rules! write_slice {$/;"	M
write_slice_native	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^macro_rules! write_slice_native {$/;"	M
write_terminator	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn write_terminator(&mut self) -> Result<()> {$/;"	P	implementation:Writer
write_terminator_into_buffer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn write_terminator_into_buffer(&mut self) -> Result<()> {$/;"	P	implementation:Writer
write_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_u128<T: ByteOrder>(&mut self, n: u128) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u128(buf: &mut [u8], n: u128) {$/;"	P	implementation:BigEndian
write_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u128(buf: &mut [u8], n: u128) {$/;"	P	implementation:LittleEndian
write_u128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u128(buf: &mut [u8], n: u128);$/;"	P	interface:ByteOrder
write_u128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u128_into(src: &[u128], dst: &mut [u8]) {$/;"	P	implementation:BigEndian
write_u128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u128_into(src: &[u128], dst: &mut [u8]) {$/;"	P	implementation:LittleEndian
write_u128_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u128_into(src: &[u128], dst: &mut [u8]);$/;"	P	interface:ByteOrder
write_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_u16<T: ByteOrder>(&mut self, n: u16) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u16(buf: &mut [u8], n: u16) {$/;"	P	implementation:BigEndian
write_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u16(buf: &mut [u8], n: u16) {$/;"	P	implementation:LittleEndian
write_u16	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u16(buf: &mut [u8], n: u16);$/;"	P	interface:ByteOrder
write_u16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u16_into(src: &[u16], dst: &mut [u8]) {$/;"	P	implementation:BigEndian
write_u16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u16_into(src: &[u16], dst: &mut [u8]) {$/;"	P	implementation:LittleEndian
write_u16_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u16_into(src: &[u16], dst: &mut [u8]);$/;"	P	interface:ByteOrder
write_u24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_u24<T: ByteOrder>(&mut self, n: u32) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_u24	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u24(buf: &mut [u8], n: u32) {$/;"	P	interface:ByteOrder
write_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_u32<T: ByteOrder>(&mut self, n: u32) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u32(buf: &mut [u8], n: u32) {$/;"	P	implementation:BigEndian
write_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u32(buf: &mut [u8], n: u32) {$/;"	P	implementation:LittleEndian
write_u32	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u32(buf: &mut [u8], n: u32);$/;"	P	interface:ByteOrder
write_u32_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u32_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_be(dst: &mut [u8], mut input: u32) {$/;"	f
write_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u32_into(src: &[u32], dst: &mut [u8]) {$/;"	P	implementation:BigEndian
write_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u32_into(src: &[u32], dst: &mut [u8]) {$/;"	P	implementation:LittleEndian
write_u32_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u32_into(src: &[u32], dst: &mut [u8]);$/;"	P	interface:ByteOrder
write_u32_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u32_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_le(dst: &mut[u8], mut input: u32) {$/;"	f
write_u32v_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32v_le (dst: &mut[u8], input: &[u32]) {$/;"	f
write_u48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_u48<T: ByteOrder>(&mut self, n: u64) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_u48	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u48(buf: &mut [u8], n: u64) {$/;"	P	interface:ByteOrder
write_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_u64<T: ByteOrder>(&mut self, n: u64) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u64(buf: &mut [u8], n: u64) {$/;"	P	implementation:BigEndian
write_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u64(buf: &mut [u8], n: u64) {$/;"	P	implementation:LittleEndian
write_u64	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u64(buf: &mut [u8], n: u64);$/;"	P	interface:ByteOrder
write_u64_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u64_be	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_be(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u64_into(src: &[u64], dst: &mut [u8]) {$/;"	P	implementation:BigEndian
write_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u64_into(src: &[u64], dst: &mut [u8]) {$/;"	P	implementation:LittleEndian
write_u64_into	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_u64_into(src: &[u64], dst: &mut [u8]);$/;"	P	interface:ByteOrder
write_u64_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u64_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_le(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64v_le	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64v_le(dst: &mut[u8], input: &[u64]) {$/;"	f
write_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_u8(&mut self, n: u8) -> Result<()> {$/;"	P	interface:WriteBytesExt
write_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()> {$/;"	f
write_u8	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()>;$/;"	P	interface:WriteExt
write_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_uint<T: ByteOrder>($/;"	P	interface:WriteBytesExt
write_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_uint(buf: &mut [u8], n: u64, nbytes: usize) {$/;"	P	implementation:BigEndian
write_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_uint(buf: &mut [u8], n: u64, nbytes: usize) {$/;"	P	implementation:LittleEndian
write_uint	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_uint(buf: &mut [u8], n: u64, nbytes: usize);$/;"	P	interface:ByteOrder
write_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs	/^    fn write_uint128<T: ByteOrder>($/;"	P	interface:WriteBytesExt
write_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_uint128(buf: &mut [u8], n: u128, nbytes: usize) {$/;"	P	implementation:BigEndian
write_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_uint128(buf: &mut [u8], n: u128, nbytes: usize) {$/;"	P	implementation:LittleEndian
write_uint128	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs	/^    fn write_uint128(buf: &mut [u8], n: u128, nbytes: usize);$/;"	P	interface:ByteOrder
writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    pub fn writer(&mut self) -> &mut W {$/;"	P	implementation:Encoder
writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/cbor-codec-0.7.1/src/encoder.rs	/^    writer: W$/;"	m	struct:Encoder
writer	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/lib.rs	/^mod writer;$/;"	n
written	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn written(&mut self, n: usize) {$/;"	P	implementation:Buffer
wrote_header	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    fn wrote_header(&self) -> bool {$/;"	P	implementation:SeHeader
wtr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/error.rs	/^    wtr: W,$/;"	m	struct:IntoInnerError
wtr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    wtr: &'w mut Writer<W>,$/;"	m	struct:SeHeader
wtr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^    wtr: &'w mut Writer<W>,$/;"	m	struct:SeRecord
wtr	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    wtr: Option<W>,$/;"	m	struct:Writer
wtr_as_string	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/writer.rs	/^    fn wtr_as_string(wtr: Writer<Vec<u8>>) -> String {$/;"	f	module:tests
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: Boolish,$/;"	m	struct:tests::enum_untagged::Row
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: Option<String>,$/;"	m	struct:tests::with_header_empty::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: Option<String>,$/;"	m	struct:tests::with_header_missing_ok::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: Option<String>,$/;"	m	struct:tests::with_header_no_fields::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: String,$/;"	m	struct:tests::with_header::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: String,$/;"	m	struct:tests::with_header_missing::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: String,$/;"	m	struct:tests::with_header_unknown::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: String,$/;"	m	struct:tests::without_header::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: f64,$/;"	m	struct:tests::enum_label_simple_tagged::Row
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            x: f64,$/;"	m	struct:tests::flatten::Input
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            x: bool,$/;"	m	struct:tests::struct_headers::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            x: bool,$/;"	m	struct:tests::struct_no_headers::Foo
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^            x: f32,$/;"	m	struct:tests::test_custom_uniform::MyF32
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    x: Elem<T>,$/;"	m	struct:ExtPoint
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    x: Elem<T>,$/;"	m	struct:Point
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP1P1
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP2
x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP3
x	/home/pme/src/rust/ctap/src/cbor.rs	/^    x: [u8; 32],$/;"	m	struct:P256Key
x25519	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/mod.rs	/^pub mod x25519;$/;"	n
x25519_check_private_key_bytes	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^fn x25519_check_private_key_bytes(bytes: &[u8]) -> Result<(), error::Unspecified> {$/;"	f
x25519_ecdh	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^fn x25519_ecdh($/;"	f
x25519_generate_private_key	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^fn x25519_generate_private_key($/;"	f
x25519_public_from_private	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/x25519.rs	/^fn x25519_public_from_private($/;"	f
xor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs2State<T>) -> Bs2State<T> {$/;"	P	implementation:Bs2State
xor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs4State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs4State
xor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs8State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs8State
xor	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn xor(x: &[u8], y: &[u8], output: &mut [u8]) {$/;"	f
xor_keystream	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn xor_keystream(dst: &mut[u8], plaintext: &[u8], keystream: &[u8]) {$/;"	f
xor_x63	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor_x63(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
xs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            xs: Vec<i32>,$/;"	m	struct:tests::seq_in_struct::Foo
xs	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            xs: Vec<i32>,$/;"	m	struct:tests::seq_in_struct_tail::Foo
xy	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^        xy: [Limb; 2 * MAX_LIMBS],$/;"	m	struct:tests::AffinePoint
xy2d	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    xy2d: Fe,$/;"	m	struct:GePrecomp
xyz	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/mod.rs	/^    xyz: [Limb; 3 * MAX_LIMBS],$/;"	m	struct:Point
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: Boolish,$/;"	m	struct:tests::enum_untagged::Row
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: f64,$/;"	m	struct:tests::flatten::Input
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: i32,$/;"	m	struct:tests::with_header::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: i32,$/;"	m	struct:tests::with_header_empty::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: i32,$/;"	m	struct:tests::with_header_missing::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: i32,$/;"	m	struct:tests::with_header_missing_ok::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: i32,$/;"	m	struct:tests::with_header_no_fields::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: i32,$/;"	m	struct:tests::with_header_unknown::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            y: i32,$/;"	m	struct:tests::without_header::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            y: i32,$/;"	m	struct:tests::struct_headers::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            y: i32,$/;"	m	struct:tests::struct_no_headers::Foo
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    y: Elem<T>,$/;"	m	struct:ExtPoint
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    y: Elem<T>,$/;"	m	struct:Point
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP1P1
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP2
y	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP3
y	/home/pme/src/rust/ctap/src/cbor.rs	/^    y: [u8; 32],$/;"	m	struct:P256Key
y_minus_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_minus_x: Fe,$/;"	m	struct:GeCached
y_minus_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_minus_x: Fe,$/;"	m	struct:GePrecomp
y_plus_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_plus_x: Fe,$/;"	m	struct:GeCached
y_plus_x	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_plus_x: Fe,$/;"	m	struct:GePrecomp
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: Boolish,$/;"	m	struct:tests::enum_untagged::Row
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: f64,$/;"	m	struct:tests::with_header::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: f64,$/;"	m	struct:tests::with_header_empty::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: f64,$/;"	m	struct:tests::with_header_missing::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: f64,$/;"	m	struct:tests::with_header_missing_ok::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: f64,$/;"	m	struct:tests::with_header_no_fields::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: f64,$/;"	m	struct:tests::with_header_unknown::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/deserializer.rs	/^            z: f64,$/;"	m	struct:tests::without_header::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            z: String,$/;"	m	struct:tests::struct_headers::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.4/src/serializer.rs	/^            z: String,$/;"	m	struct:tests::struct_no_headers::Foo
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    z: Elem<T>,$/;"	m	struct:ExtPoint
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    z: Elem<T>,$/;"	m	struct:Point
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeCached
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP1P1
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP2
z	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP3
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-derive-0.2.5/src/lib.rs	/^pub fn zero(input: TokenStream) -> TokenStream {$/;"	f
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn zero() -> Self {$/;"	f
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^    fn zero() -> Self;$/;"	P	interface:Zero
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^pub fn zero<T: Zero>() -> T {$/;"	f
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/curve25519/ops.rs	/^    fn zero() -> Self {$/;"	P	implementation:Elem
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/ec/suite_b/ops/elem.rs	/^    pub fn zero() -> Elem<M, E> {$/;"	P	implementation:Elem
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn zero(&self) -> Elem<M, R> {$/;"	P	implementation:PartialModulus
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn zero(width: Width<M>) -> Self {$/;"	P	implementation:BoxedLimbs
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/rsa/bigint.rs	/^    fn zero<E>(&self) -> Elem<M, E> {$/;"	P	implementation:Modulus
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn zero(dst: &mut [u8]) {$/;"	f
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP2 {$/;"	P	implementation:GeP2
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP3 {$/;"	P	implementation:GeP3
zero	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GePrecomp {$/;"	P	implementation:GePrecomp
zero_case	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/exponential.rs	/^        fn zero_case<R: Rng + ?Sized>(rng: &mut R, _u: f64) -> f64 {$/;"	f	method:Exp1::sample
zero_case	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/normal.rs	/^        fn zero_case<R: Rng + ?Sized>(rng: &mut R, u: f64) -> f64 {$/;"	f	method:StandardNormal::sample
zero_impl	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs	/^macro_rules! zero_impl {$/;"	M
zero_until	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn zero_until(&mut self, idx: usize);$/;"	P	interface:FixedBuffer
ziggurat	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/utils.rs	/^pub fn ziggurat<R: Rng + ?Sized, P, Z>($/;"	f
ziggurat_tables	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/mod.rs	/^#[cfg(feature="std")] mod ziggurat_tables;$/;"	n
zone	/home/pme/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/distributions/uniform.rs	/^    zone: X,$/;"	m	struct:UniformInt
